

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat May 26 15:20:56 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F18855 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  001C                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  008C                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  008E                     	;# 
   101  008F                     	;# 
   102  0090                     	;# 
   103  0090                     	;# 
   104  0091                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  0110                     	;# 
   123  0110                     	;# 
   124  0111                     	;# 
   125  0112                     	;# 
   126  0112                     	;# 
   127  0113                     	;# 
   128  0114                     	;# 
   129  0114                     	;# 
   130  0115                     	;# 
   131  0116                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0119                     	;# 
   135  0119                     	;# 
   136  0119                     	;# 
   137  011A                     	;# 
   138  011A                     	;# 
   139  011A                     	;# 
   140  011B                     	;# 
   141  011B                     	;# 
   142  011B                     	;# 
   143  011B                     	;# 
   144  011B                     	;# 
   145  011C                     	;# 
   146  011C                     	;# 
   147  011C                     	;# 
   148  011D                     	;# 
   149  011D                     	;# 
   150  011D                     	;# 
   151  011E                     	;# 
   152  011E                     	;# 
   153  011E                     	;# 
   154  011F                     	;# 
   155  011F                     	;# 
   156  011F                     	;# 
   157  011F                     	;# 
   158  011F                     	;# 
   159  018C                     	;# 
   160  018D                     	;# 
   161  018E                     	;# 
   162  018F                     	;# 
   163  0190                     	;# 
   164  0191                     	;# 
   165  0192                     	;# 
   166  0196                     	;# 
   167  0197                     	;# 
   168  0198                     	;# 
   169  0199                     	;# 
   170  019A                     	;# 
   171  019B                     	;# 
   172  019C                     	;# 
   173  020C                     	;# 
   174  020C                     	;# 
   175  020D                     	;# 
   176  020E                     	;# 
   177  020F                     	;# 
   178  020F                     	;# 
   179  0210                     	;# 
   180  0210                     	;# 
   181  0211                     	;# 
   182  0211                     	;# 
   183  0212                     	;# 
   184  0212                     	;# 
   185  0213                     	;# 
   186  0214                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0216                     	;# 
   190  0216                     	;# 
   191  0217                     	;# 
   192  0217                     	;# 
   193  0218                     	;# 
   194  0218                     	;# 
   195  0219                     	;# 
   196  021A                     	;# 
   197  021B                     	;# 
   198  021B                     	;# 
   199  021C                     	;# 
   200  021C                     	;# 
   201  021D                     	;# 
   202  021D                     	;# 
   203  021E                     	;# 
   204  021F                     	;# 
   205  028C                     	;# 
   206  028C                     	;# 
   207  028D                     	;# 
   208  028D                     	;# 
   209  028E                     	;# 
   210  028F                     	;# 
   211  0290                     	;# 
   212  0290                     	;# 
   213  0291                     	;# 
   214  0292                     	;# 
   215  0292                     	;# 
   216  0293                     	;# 
   217  0293                     	;# 
   218  0294                     	;# 
   219  0295                     	;# 
   220  0296                     	;# 
   221  0296                     	;# 
   222  0297                     	;# 
   223  0298                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  0299                     	;# 
   227  029A                     	;# 
   228  029B                     	;# 
   229  029C                     	;# 
   230  029C                     	;# 
   231  029D                     	;# 
   232  030C                     	;# 
   233  030C                     	;# 
   234  030D                     	;# 
   235  030E                     	;# 
   236  030F                     	;# 
   237  0310                     	;# 
   238  0310                     	;# 
   239  0311                     	;# 
   240  0312                     	;# 
   241  0313                     	;# 
   242  0314                     	;# 
   243  0314                     	;# 
   244  0315                     	;# 
   245  0316                     	;# 
   246  0317                     	;# 
   247  0318                     	;# 
   248  0318                     	;# 
   249  0319                     	;# 
   250  031A                     	;# 
   251  031B                     	;# 
   252  031C                     	;# 
   253  031C                     	;# 
   254  031D                     	;# 
   255  031E                     	;# 
   256  031F                     	;# 
   257  038C                     	;# 
   258  038D                     	;# 
   259  038E                     	;# 
   260  0390                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  040C                     	;# 
   264  040D                     	;# 
   265  040E                     	;# 
   266  040F                     	;# 
   267  0410                     	;# 
   268  0411                     	;# 
   269  0416                     	;# 
   270  0416                     	;# 
   271  0417                     	;# 
   272  0418                     	;# 
   273  0418                     	;# 
   274  0419                     	;# 
   275  041A                     	;# 
   276  041A                     	;# 
   277  041B                     	;# 
   278  041C                     	;# 
   279  041C                     	;# 
   280  041D                     	;# 
   281  041E                     	;# 
   282  041F                     	;# 
   283  048C                     	;# 
   284  048C                     	;# 
   285  048D                     	;# 
   286  048E                     	;# 
   287  048F                     	;# 
   288  048F                     	;# 
   289  0490                     	;# 
   290  0491                     	;# 
   291  0492                     	;# 
   292  0492                     	;# 
   293  0493                     	;# 
   294  0494                     	;# 
   295  0495                     	;# 
   296  0495                     	;# 
   297  0496                     	;# 
   298  0497                     	;# 
   299  0498                     	;# 
   300  0499                     	;# 
   301  049A                     	;# 
   302  049B                     	;# 
   303  049C                     	;# 
   304  049D                     	;# 
   305  050C                     	;# 
   306  050C                     	;# 
   307  050D                     	;# 
   308  050E                     	;# 
   309  050F                     	;# 
   310  050F                     	;# 
   311  0510                     	;# 
   312  0511                     	;# 
   313  0512                     	;# 
   314  0512                     	;# 
   315  0513                     	;# 
   316  0514                     	;# 
   317  0515                     	;# 
   318  0515                     	;# 
   319  0516                     	;# 
   320  0517                     	;# 
   321  0518                     	;# 
   322  0519                     	;# 
   323  051A                     	;# 
   324  051B                     	;# 
   325  051C                     	;# 
   326  051D                     	;# 
   327  058C                     	;# 
   328  058C                     	;# 
   329  058D                     	;# 
   330  058E                     	;# 
   331  058F                     	;# 
   332  058F                     	;# 
   333  0590                     	;# 
   334  0591                     	;# 
   335  0592                     	;# 
   336  0593                     	;# 
   337  060C                     	;# 
   338  060D                     	;# 
   339  060E                     	;# 
   340  060F                     	;# 
   341  0610                     	;# 
   342  0611                     	;# 
   343  0612                     	;# 
   344  0613                     	;# 
   345  0614                     	;# 
   346  0616                     	;# 
   347  0617                     	;# 
   348  0618                     	;# 
   349  0619                     	;# 
   350  061A                     	;# 
   351  061B                     	;# 
   352  061C                     	;# 
   353  061D                     	;# 
   354  061E                     	;# 
   355  068C                     	;# 
   356  068D                     	;# 
   357  068E                     	;# 
   358  068F                     	;# 
   359  0690                     	;# 
   360  0691                     	;# 
   361  0692                     	;# 
   362  0693                     	;# 
   363  0694                     	;# 
   364  070C                     	;# 
   365  070D                     	;# 
   366  070E                     	;# 
   367  070F                     	;# 
   368  0710                     	;# 
   369  0711                     	;# 
   370  0712                     	;# 
   371  0713                     	;# 
   372  0714                     	;# 
   373  0716                     	;# 
   374  0717                     	;# 
   375  0718                     	;# 
   376  0719                     	;# 
   377  071A                     	;# 
   378  071B                     	;# 
   379  071C                     	;# 
   380  071D                     	;# 
   381  071E                     	;# 
   382  0796                     	;# 
   383  0797                     	;# 
   384  0798                     	;# 
   385  0799                     	;# 
   386  079A                     	;# 
   387  079B                     	;# 
   388  080C                     	;# 
   389  080D                     	;# 
   390  080E                     	;# 
   391  080F                     	;# 
   392  0810                     	;# 
   393  0811                     	;# 
   394  0812                     	;# 
   395  0813                     	;# 
   396  0814                     	;# 
   397  081A                     	;# 
   398  081B                     	;# 
   399  081C                     	;# 
   400  081D                     	;# 
   401  081E                     	;# 
   402  081F                     	;# 
   403  088C                     	;# 
   404  088D                     	;# 
   405  088E                     	;# 
   406  088F                     	;# 
   407  0890                     	;# 
   408  0891                     	;# 
   409  0892                     	;# 
   410  0893                     	;# 
   411  0895                     	;# 
   412  0896                     	;# 
   413  0897                     	;# 
   414  0898                     	;# 
   415  0899                     	;# 
   416  089A                     	;# 
   417  089B                     	;# 
   418  090C                     	;# 
   419  090E                     	;# 
   420  090F                     	;# 
   421  091F                     	;# 
   422  091F                     	;# 
   423  098F                     	;# 
   424  098F                     	;# 
   425  0990                     	;# 
   426  0991                     	;# 
   427  0992                     	;# 
   428  0993                     	;# 
   429  0994                     	;# 
   430  0995                     	;# 
   431  0996                     	;# 
   432  0997                     	;# 
   433  0E0F                     	;# 
   434  0E10                     	;# 
   435  0E11                     	;# 
   436  0E12                     	;# 
   437  0E13                     	;# 
   438  0E14                     	;# 
   439  0E15                     	;# 
   440  0E16                     	;# 
   441  0E17                     	;# 
   442  0E18                     	;# 
   443  0E19                     	;# 
   444  0E1A                     	;# 
   445  0E1B                     	;# 
   446  0E1C                     	;# 
   447  0E1D                     	;# 
   448  0E1E                     	;# 
   449  0E1F                     	;# 
   450  0E20                     	;# 
   451  0E21                     	;# 
   452  0E22                     	;# 
   453  0E23                     	;# 
   454  0E24                     	;# 
   455  0E25                     	;# 
   456  0E26                     	;# 
   457  0E27                     	;# 
   458  0E28                     	;# 
   459  0E29                     	;# 
   460  0E2A                     	;# 
   461  0E2B                     	;# 
   462  0E2C                     	;# 
   463  0E2D                     	;# 
   464  0E2E                     	;# 
   465  0E2F                     	;# 
   466  0E30                     	;# 
   467  0E31                     	;# 
   468  0E32                     	;# 
   469  0E33                     	;# 
   470  0E34                     	;# 
   471  0E35                     	;# 
   472  0E36                     	;# 
   473  0E37                     	;# 
   474  0E8F                     	;# 
   475  0E90                     	;# 
   476  0E91                     	;# 
   477  0E92                     	;# 
   478  0E93                     	;# 
   479  0E94                     	;# 
   480  0E95                     	;# 
   481  0E96                     	;# 
   482  0E97                     	;# 
   483  0E9C                     	;# 
   484  0E9D                     	;# 
   485  0E9E                     	;# 
   486  0EA1                     	;# 
   487  0EA2                     	;# 
   488  0EA3                     	;# 
   489  0EA4                     	;# 
   490  0EA5                     	;# 
   491  0EA9                     	;# 
   492  0EAA                     	;# 
   493  0EAB                     	;# 
   494  0EAC                     	;# 
   495  0EB1                     	;# 
   496  0EB2                     	;# 
   497  0EB3                     	;# 
   498  0EB8                     	;# 
   499  0EB9                     	;# 
   500  0EBA                     	;# 
   501  0EBB                     	;# 
   502  0EBC                     	;# 
   503  0EBD                     	;# 
   504  0EBE                     	;# 
   505  0EC3                     	;# 
   506  0EC5                     	;# 
   507  0EC6                     	;# 
   508  0EC7                     	;# 
   509  0EC8                     	;# 
   510  0EC9                     	;# 
   511  0ECA                     	;# 
   512  0ECB                     	;# 
   513  0ECC                     	;# 
   514  0F10                     	;# 
   515  0F11                     	;# 
   516  0F12                     	;# 
   517  0F13                     	;# 
   518  0F14                     	;# 
   519  0F15                     	;# 
   520  0F16                     	;# 
   521  0F17                     	;# 
   522  0F18                     	;# 
   523  0F19                     	;# 
   524  0F1A                     	;# 
   525  0F1B                     	;# 
   526  0F1C                     	;# 
   527  0F1D                     	;# 
   528  0F1E                     	;# 
   529  0F1F                     	;# 
   530  0F20                     	;# 
   531  0F21                     	;# 
   532  0F22                     	;# 
   533  0F23                     	;# 
   534  0F24                     	;# 
   535  0F25                     	;# 
   536  0F26                     	;# 
   537  0F27                     	;# 
   538  0F38                     	;# 
   539  0F39                     	;# 
   540  0F3A                     	;# 
   541  0F3B                     	;# 
   542  0F3C                     	;# 
   543  0F3D                     	;# 
   544  0F3E                     	;# 
   545  0F3F                     	;# 
   546  0F40                     	;# 
   547  0F41                     	;# 
   548  0F43                     	;# 
   549  0F44                     	;# 
   550  0F45                     	;# 
   551  0F46                     	;# 
   552  0F47                     	;# 
   553  0F48                     	;# 
   554  0F49                     	;# 
   555  0F4A                     	;# 
   556  0F4B                     	;# 
   557  0F4C                     	;# 
   558  0F4E                     	;# 
   559  0F4F                     	;# 
   560  0F50                     	;# 
   561  0F51                     	;# 
   562  0F52                     	;# 
   563  0F53                     	;# 
   564  0F54                     	;# 
   565  0F55                     	;# 
   566  0F56                     	;# 
   567  0F57                     	;# 
   568  0F65                     	;# 
   569  0F68                     	;# 
   570  0F69                     	;# 
   571  0F6A                     	;# 
   572  0F6B                     	;# 
   573  0FE4                     	;# 
   574  0FE5                     	;# 
   575  0FE6                     	;# 
   576  0FE7                     	;# 
   577  0FE8                     	;# 
   578  0FE9                     	;# 
   579  0FEA                     	;# 
   580  0FEB                     	;# 
   581  0FED                     	;# 
   582  0FEE                     	;# 
   583  0FEF                     	;# 
   584  0000                     	;# 
   585  0001                     	;# 
   586  0002                     	;# 
   587  0003                     	;# 
   588  0004                     	;# 
   589  0005                     	;# 
   590  0006                     	;# 
   591  0007                     	;# 
   592  0008                     	;# 
   593  0009                     	;# 
   594  000A                     	;# 
   595  000B                     	;# 
   596  000C                     	;# 
   597  000D                     	;# 
   598  000E                     	;# 
   599  0010                     	;# 
   600  0011                     	;# 
   601  0012                     	;# 
   602  0013                     	;# 
   603  0016                     	;# 
   604  0017                     	;# 
   605  0018                     	;# 
   606  001C                     	;# 
   607  001C                     	;# 
   608  001D                     	;# 
   609  001D                     	;# 
   610  001E                     	;# 
   611  001F                     	;# 
   612  008C                     	;# 
   613  008C                     	;# 
   614  008D                     	;# 
   615  008E                     	;# 
   616  008E                     	;# 
   617  008F                     	;# 
   618  0090                     	;# 
   619  0090                     	;# 
   620  0091                     	;# 
   621  0093                     	;# 
   622  0094                     	;# 
   623  0095                     	;# 
   624  0096                     	;# 
   625  0097                     	;# 
   626  0098                     	;# 
   627  0099                     	;# 
   628  009A                     	;# 
   629  009B                     	;# 
   630  009C                     	;# 
   631  009D                     	;# 
   632  009E                     	;# 
   633  010C                     	;# 
   634  010D                     	;# 
   635  010E                     	;# 
   636  010E                     	;# 
   637  010F                     	;# 
   638  0110                     	;# 
   639  0110                     	;# 
   640  0111                     	;# 
   641  0112                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0114                     	;# 
   646  0115                     	;# 
   647  0116                     	;# 
   648  0116                     	;# 
   649  0117                     	;# 
   650  0119                     	;# 
   651  0119                     	;# 
   652  0119                     	;# 
   653  011A                     	;# 
   654  011A                     	;# 
   655  011A                     	;# 
   656  011B                     	;# 
   657  011B                     	;# 
   658  011B                     	;# 
   659  011B                     	;# 
   660  011B                     	;# 
   661  011C                     	;# 
   662  011C                     	;# 
   663  011C                     	;# 
   664  011D                     	;# 
   665  011D                     	;# 
   666  011D                     	;# 
   667  011E                     	;# 
   668  011E                     	;# 
   669  011E                     	;# 
   670  011F                     	;# 
   671  011F                     	;# 
   672  011F                     	;# 
   673  011F                     	;# 
   674  011F                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  018E                     	;# 
   678  018F                     	;# 
   679  0190                     	;# 
   680  0191                     	;# 
   681  0192                     	;# 
   682  0196                     	;# 
   683  0197                     	;# 
   684  0198                     	;# 
   685  0199                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  020C                     	;# 
   690  020C                     	;# 
   691  020D                     	;# 
   692  020E                     	;# 
   693  020F                     	;# 
   694  020F                     	;# 
   695  0210                     	;# 
   696  0210                     	;# 
   697  0211                     	;# 
   698  0211                     	;# 
   699  0212                     	;# 
   700  0212                     	;# 
   701  0213                     	;# 
   702  0214                     	;# 
   703  0215                     	;# 
   704  0215                     	;# 
   705  0216                     	;# 
   706  0216                     	;# 
   707  0217                     	;# 
   708  0217                     	;# 
   709  0218                     	;# 
   710  0218                     	;# 
   711  0219                     	;# 
   712  021A                     	;# 
   713  021B                     	;# 
   714  021B                     	;# 
   715  021C                     	;# 
   716  021C                     	;# 
   717  021D                     	;# 
   718  021D                     	;# 
   719  021E                     	;# 
   720  021F                     	;# 
   721  028C                     	;# 
   722  028C                     	;# 
   723  028D                     	;# 
   724  028D                     	;# 
   725  028E                     	;# 
   726  028F                     	;# 
   727  0290                     	;# 
   728  0290                     	;# 
   729  0291                     	;# 
   730  0292                     	;# 
   731  0292                     	;# 
   732  0293                     	;# 
   733  0293                     	;# 
   734  0294                     	;# 
   735  0295                     	;# 
   736  0296                     	;# 
   737  0296                     	;# 
   738  0297                     	;# 
   739  0298                     	;# 
   740  0298                     	;# 
   741  0299                     	;# 
   742  0299                     	;# 
   743  029A                     	;# 
   744  029B                     	;# 
   745  029C                     	;# 
   746  029C                     	;# 
   747  029D                     	;# 
   748  030C                     	;# 
   749  030C                     	;# 
   750  030D                     	;# 
   751  030E                     	;# 
   752  030F                     	;# 
   753  0310                     	;# 
   754  0310                     	;# 
   755  0311                     	;# 
   756  0312                     	;# 
   757  0313                     	;# 
   758  0314                     	;# 
   759  0314                     	;# 
   760  0315                     	;# 
   761  0316                     	;# 
   762  0317                     	;# 
   763  0318                     	;# 
   764  0318                     	;# 
   765  0319                     	;# 
   766  031A                     	;# 
   767  031B                     	;# 
   768  031C                     	;# 
   769  031C                     	;# 
   770  031D                     	;# 
   771  031E                     	;# 
   772  031F                     	;# 
   773  038C                     	;# 
   774  038D                     	;# 
   775  038E                     	;# 
   776  0390                     	;# 
   777  0391                     	;# 
   778  0392                     	;# 
   779  040C                     	;# 
   780  040D                     	;# 
   781  040E                     	;# 
   782  040F                     	;# 
   783  0410                     	;# 
   784  0411                     	;# 
   785  0416                     	;# 
   786  0416                     	;# 
   787  0417                     	;# 
   788  0418                     	;# 
   789  0418                     	;# 
   790  0419                     	;# 
   791  041A                     	;# 
   792  041A                     	;# 
   793  041B                     	;# 
   794  041C                     	;# 
   795  041C                     	;# 
   796  041D                     	;# 
   797  041E                     	;# 
   798  041F                     	;# 
   799  048C                     	;# 
   800  048C                     	;# 
   801  048D                     	;# 
   802  048E                     	;# 
   803  048F                     	;# 
   804  048F                     	;# 
   805  0490                     	;# 
   806  0491                     	;# 
   807  0492                     	;# 
   808  0492                     	;# 
   809  0493                     	;# 
   810  0494                     	;# 
   811  0495                     	;# 
   812  0495                     	;# 
   813  0496                     	;# 
   814  0497                     	;# 
   815  0498                     	;# 
   816  0499                     	;# 
   817  049A                     	;# 
   818  049B                     	;# 
   819  049C                     	;# 
   820  049D                     	;# 
   821  050C                     	;# 
   822  050C                     	;# 
   823  050D                     	;# 
   824  050E                     	;# 
   825  050F                     	;# 
   826  050F                     	;# 
   827  0510                     	;# 
   828  0511                     	;# 
   829  0512                     	;# 
   830  0512                     	;# 
   831  0513                     	;# 
   832  0514                     	;# 
   833  0515                     	;# 
   834  0515                     	;# 
   835  0516                     	;# 
   836  0517                     	;# 
   837  0518                     	;# 
   838  0519                     	;# 
   839  051A                     	;# 
   840  051B                     	;# 
   841  051C                     	;# 
   842  051D                     	;# 
   843  058C                     	;# 
   844  058C                     	;# 
   845  058D                     	;# 
   846  058E                     	;# 
   847  058F                     	;# 
   848  058F                     	;# 
   849  0590                     	;# 
   850  0591                     	;# 
   851  0592                     	;# 
   852  0593                     	;# 
   853  060C                     	;# 
   854  060D                     	;# 
   855  060E                     	;# 
   856  060F                     	;# 
   857  0610                     	;# 
   858  0611                     	;# 
   859  0612                     	;# 
   860  0613                     	;# 
   861  0614                     	;# 
   862  0616                     	;# 
   863  0617                     	;# 
   864  0618                     	;# 
   865  0619                     	;# 
   866  061A                     	;# 
   867  061B                     	;# 
   868  061C                     	;# 
   869  061D                     	;# 
   870  061E                     	;# 
   871  068C                     	;# 
   872  068D                     	;# 
   873  068E                     	;# 
   874  068F                     	;# 
   875  0690                     	;# 
   876  0691                     	;# 
   877  0692                     	;# 
   878  0693                     	;# 
   879  0694                     	;# 
   880  070C                     	;# 
   881  070D                     	;# 
   882  070E                     	;# 
   883  070F                     	;# 
   884  0710                     	;# 
   885  0711                     	;# 
   886  0712                     	;# 
   887  0713                     	;# 
   888  0714                     	;# 
   889  0716                     	;# 
   890  0717                     	;# 
   891  0718                     	;# 
   892  0719                     	;# 
   893  071A                     	;# 
   894  071B                     	;# 
   895  071C                     	;# 
   896  071D                     	;# 
   897  071E                     	;# 
   898  0796                     	;# 
   899  0797                     	;# 
   900  0798                     	;# 
   901  0799                     	;# 
   902  079A                     	;# 
   903  079B                     	;# 
   904  080C                     	;# 
   905  080D                     	;# 
   906  080E                     	;# 
   907  080F                     	;# 
   908  0810                     	;# 
   909  0811                     	;# 
   910  0812                     	;# 
   911  0813                     	;# 
   912  0814                     	;# 
   913  081A                     	;# 
   914  081B                     	;# 
   915  081C                     	;# 
   916  081D                     	;# 
   917  081E                     	;# 
   918  081F                     	;# 
   919  088C                     	;# 
   920  088D                     	;# 
   921  088E                     	;# 
   922  088F                     	;# 
   923  0890                     	;# 
   924  0891                     	;# 
   925  0892                     	;# 
   926  0893                     	;# 
   927  0895                     	;# 
   928  0896                     	;# 
   929  0897                     	;# 
   930  0898                     	;# 
   931  0899                     	;# 
   932  089A                     	;# 
   933  089B                     	;# 
   934  090C                     	;# 
   935  090E                     	;# 
   936  090F                     	;# 
   937  091F                     	;# 
   938  091F                     	;# 
   939  098F                     	;# 
   940  098F                     	;# 
   941  0990                     	;# 
   942  0991                     	;# 
   943  0992                     	;# 
   944  0993                     	;# 
   945  0994                     	;# 
   946  0995                     	;# 
   947  0996                     	;# 
   948  0997                     	;# 
   949  0E0F                     	;# 
   950  0E10                     	;# 
   951  0E11                     	;# 
   952  0E12                     	;# 
   953  0E13                     	;# 
   954  0E14                     	;# 
   955  0E15                     	;# 
   956  0E16                     	;# 
   957  0E17                     	;# 
   958  0E18                     	;# 
   959  0E19                     	;# 
   960  0E1A                     	;# 
   961  0E1B                     	;# 
   962  0E1C                     	;# 
   963  0E1D                     	;# 
   964  0E1E                     	;# 
   965  0E1F                     	;# 
   966  0E20                     	;# 
   967  0E21                     	;# 
   968  0E22                     	;# 
   969  0E23                     	;# 
   970  0E24                     	;# 
   971  0E25                     	;# 
   972  0E26                     	;# 
   973  0E27                     	;# 
   974  0E28                     	;# 
   975  0E29                     	;# 
   976  0E2A                     	;# 
   977  0E2B                     	;# 
   978  0E2C                     	;# 
   979  0E2D                     	;# 
   980  0E2E                     	;# 
   981  0E2F                     	;# 
   982  0E30                     	;# 
   983  0E31                     	;# 
   984  0E32                     	;# 
   985  0E33                     	;# 
   986  0E34                     	;# 
   987  0E35                     	;# 
   988  0E36                     	;# 
   989  0E37                     	;# 
   990  0E8F                     	;# 
   991  0E90                     	;# 
   992  0E91                     	;# 
   993  0E92                     	;# 
   994  0E93                     	;# 
   995  0E94                     	;# 
   996  0E95                     	;# 
   997  0E96                     	;# 
   998  0E97                     	;# 
   999  0E9C                     	;# 
  1000  0E9D                     	;# 
  1001  0E9E                     	;# 
  1002  0EA1                     	;# 
  1003  0EA2                     	;# 
  1004  0EA3                     	;# 
  1005  0EA4                     	;# 
  1006  0EA5                     	;# 
  1007  0EA9                     	;# 
  1008  0EAA                     	;# 
  1009  0EAB                     	;# 
  1010  0EAC                     	;# 
  1011  0EB1                     	;# 
  1012  0EB2                     	;# 
  1013  0EB3                     	;# 
  1014  0EB8                     	;# 
  1015  0EB9                     	;# 
  1016  0EBA                     	;# 
  1017  0EBB                     	;# 
  1018  0EBC                     	;# 
  1019  0EBD                     	;# 
  1020  0EBE                     	;# 
  1021  0EC3                     	;# 
  1022  0EC5                     	;# 
  1023  0EC6                     	;# 
  1024  0EC7                     	;# 
  1025  0EC8                     	;# 
  1026  0EC9                     	;# 
  1027  0ECA                     	;# 
  1028  0ECB                     	;# 
  1029  0ECC                     	;# 
  1030  0F10                     	;# 
  1031  0F11                     	;# 
  1032  0F12                     	;# 
  1033  0F13                     	;# 
  1034  0F14                     	;# 
  1035  0F15                     	;# 
  1036  0F16                     	;# 
  1037  0F17                     	;# 
  1038  0F18                     	;# 
  1039  0F19                     	;# 
  1040  0F1A                     	;# 
  1041  0F1B                     	;# 
  1042  0F1C                     	;# 
  1043  0F1D                     	;# 
  1044  0F1E                     	;# 
  1045  0F1F                     	;# 
  1046  0F20                     	;# 
  1047  0F21                     	;# 
  1048  0F22                     	;# 
  1049  0F23                     	;# 
  1050  0F24                     	;# 
  1051  0F25                     	;# 
  1052  0F26                     	;# 
  1053  0F27                     	;# 
  1054  0F38                     	;# 
  1055  0F39                     	;# 
  1056  0F3A                     	;# 
  1057  0F3B                     	;# 
  1058  0F3C                     	;# 
  1059  0F3D                     	;# 
  1060  0F3E                     	;# 
  1061  0F3F                     	;# 
  1062  0F40                     	;# 
  1063  0F41                     	;# 
  1064  0F43                     	;# 
  1065  0F44                     	;# 
  1066  0F45                     	;# 
  1067  0F46                     	;# 
  1068  0F47                     	;# 
  1069  0F48                     	;# 
  1070  0F49                     	;# 
  1071  0F4A                     	;# 
  1072  0F4B                     	;# 
  1073  0F4C                     	;# 
  1074  0F4E                     	;# 
  1075  0F4F                     	;# 
  1076  0F50                     	;# 
  1077  0F51                     	;# 
  1078  0F52                     	;# 
  1079  0F53                     	;# 
  1080  0F54                     	;# 
  1081  0F55                     	;# 
  1082  0F56                     	;# 
  1083  0F57                     	;# 
  1084  0F65                     	;# 
  1085  0F68                     	;# 
  1086  0F69                     	;# 
  1087  0F6A                     	;# 
  1088  0F6B                     	;# 
  1089  0FE4                     	;# 
  1090  0FE5                     	;# 
  1091  0FE6                     	;# 
  1092  0FE7                     	;# 
  1093  0FE8                     	;# 
  1094  0FE9                     	;# 
  1095  0FEA                     	;# 
  1096  0FEB                     	;# 
  1097  0FED                     	;# 
  1098  0FEE                     	;# 
  1099  0FEF                     	;# 
  1100                           
  1101                           	psect	stringtext1
  1102  0481                     __pstringtext1:	
  1103  0481                     _dpowers:	
  1104  0481  3401               	retlw	1
  1105  0482  3400               	retlw	0
  1106  0483  340A               	retlw	10
  1107  0484  3400               	retlw	0
  1108  0485  3464               	retlw	100
  1109  0486  3400               	retlw	0
  1110  0487  34E8               	retlw	232
  1111  0488  3403               	retlw	3
  1112  0489  3410               	retlw	16
  1113  048A  3427               	retlw	39
  1114  048B                     __end_of_dpowers:	
  1115  0012                     _TRISBbits	set	18
  1116  0018                     _LATC	set	24
  1117  0017                     _LATB	set	23
  1118  0016                     _LATA	set	22
  1119  000E                     _PORTC	set	14
  1120  000D                     _PORTB	set	13
  1121  000C                     _PORTA	set	12
  1122  0013                     _TRISC	set	19
  1123  0012                     _TRISB	set	18
  1124  0011                     _TRISA	set	17
  1125  000B                     _INTCONbits	set	11
  1126  001D                     _TMR0H	set	29
  1127  001F                     _T0CON1	set	31
  1128  001E                     _T0CON0	set	30
  1129  001C                     _TMR0L	set	28
  1130  0016                     _LATAbits	set	22
  1131  001E                     _T0CON0bits	set	30
  1132  0018                     _LATCbits	set	24
  1133  0069                     _RB1	set	105
  1134  006A                     _RB2	set	106
  1135  006B                     _RB3	set	107
  1136  0068                     _RB0	set	104
  1137  0074                     _RC4	set	116
  1138  0073                     _RC3	set	115
  1139  0077                     _RC7	set	119
  1140  0072                     _RC2	set	114
  1141  0076                     _RC6	set	118
  1142  0075                     _RC5	set	117
  1143  0716                     _PIE0bits	set	1814
  1144  070C                     _PIR0bits	set	1804
  1145  0F4E                     _ANSELC	set	3918
  1146  0F43                     _ANSELB	set	3907
  1147  0F38                     _ANSELA	set	3896
  1148  048B                     STR_7:	
  1149  048B  3420               	retlw	32	;' '
  1150  048C  3420               	retlw	32	;' '
  1151  048D  3420               	retlw	32	;' '
  1152  048E  3420               	retlw	32	;' '
  1153  048F  3420               	retlw	32	;' '
  1154  0490  3400               	retlw	0
  1155                           
  1156                           	psect	stringtext2
  1157  04B5                     __pstringtext2:	
  1158  04B5                     STR_12:	
  1159  04B5  3453               	retlw	83	;'S'
  1160  04B6  3474               	retlw	116	;'t'
  1161  04B7  3461               	retlw	97	;'a'
  1162  04B8  3472               	retlw	114	;'r'
  1163  04B9  3474               	retlw	116	;'t'
  1164  04BA  3400               	retlw	0
  1165                           
  1166                           	psect	stringtext3
  1167  04C1                     __pstringtext3:	
  1168  04C1                     STR_1:	
  1169  04C1  3449               	retlw	73	;'I'
  1170  04C2  3464               	retlw	100	;'d'
  1171  04C3  346C               	retlw	108	;'l'
  1172  04C4  3465               	retlw	101	;'e'
  1173  04C5  3400               	retlw	0
  1174                           
  1175                           	psect	stringtext4
  1176  04C6                     __pstringtext4:	
  1177  04C6                     STR_10:	
  1178  04C6  3453               	retlw	83	;'S'
  1179  04C7  3474               	retlw	116	;'t'
  1180  04C8  346F               	retlw	111	;'o'
  1181  04C9  3470               	retlw	112	;'p'
  1182  04CA  3400               	retlw	0
  1183                           
  1184                           	psect	stringtext5
  1185  04CB                     __pstringtext5:	
  1186  04CB                     STR_2:	
  1187  04CB  3425               	retlw	37	;'%'
  1188  04CC  3432               	retlw	50	;'2'
  1189  04CD  3464               	retlw	100	;'d'
  1190  04CE  3400               	retlw	0
  1191                           
  1192                           	psect	stringtext6
  1193  04CF                     __pstringtext6:	
  1194  04CF                     STR_5:	
  1195  04CF  343A               	retlw	58	;':'
  1196  04D0  3400               	retlw	0
  1197                           
  1198                           	psect	stringtext7
  1199  0000                     __pstringtext7:	
  1200  048E                     
  1201                           ; #config settings
  1202  0000                     
  1203                           	psect	cinit
  1204  0048                     start_initialization:	
  1205  0048                     __initialization:	
  1206                           
  1207                           ; Clear objects allocated to BANK0
  1208  0048  3037               	movlw	low __pbssBANK0
  1209  0049  0084               	movwf	4
  1210  004A  3000               	movlw	high __pbssBANK0
  1211  004B  0085               	movwf	5
  1212  004C  300E               	movlw	14
  1213  004D  3184  24BB         	fcall	clear_ram0
  1214  004F                     end_of_initialization:	
  1215                           ;End of C runtime variable initialization code
  1216                           
  1217  004F                     __end_of__initialization:	
  1218  004F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1219  0050  0020               	movlb	0
  1220  0051  3180  2853         	ljmp	_main	;jump to C main() function
  1221                           
  1222                           	psect	bssBANK0
  1223  0037                     __pbssBANK0:	
  1224  0037                     _sec:	
  1225  0037                     	ds	2
  1226  0039                     _min:	
  1227  0039                     	ds	2
  1228  003B                     _idle:	
  1229  003B                     	ds	2
  1230  003D                     _flag:	
  1231  003D                     	ds	2
  1232  003F                     _buffer_min:	
  1233  003F                     	ds	3
  1234  0042                     _buffer_sec:	
  1235  0042                     	ds	3
  1236                           
  1237                           	psect	clrtext
  1238  04BB                     clear_ram0:	
  1239                           ;	Called with FSR0 containing the base address, and
  1240                           ;	WREG with the size to clear
  1241                           
  1242  04BB  0064               	clrwdt	;clear the watchdog before getting into this loop
  1243  04BC                     clrloop0:	
  1244  04BC  0180               	clrf	0	;clear RAM location pointed to by FSR
  1245  04BD  3101               	addfsr 0,1
  1246  04BE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1247  04BF  2CBC               	goto	clrloop0	;have we reached the end yet?
  1248  04C0  3400               	retlw	0	;all done for this memory range, return
  1249                           
  1250                           	psect	cstackCOMMON
  1251  0070                     __pcstackCOMMON:	
  1252  0070                     ?_isdigit:	
  1253  0070                     ?_initial_config:	
  1254                           ; 1 bit 
  1255                           
  1256  0070                     ?_init_int:	
  1257                           ; 1 bytes @ 0x0
  1258                           
  1259  0070                     ?_Lcd_Port:	
  1260                           ; 1 bytes @ 0x0
  1261                           
  1262  0070                     ?_Lcd_Cmd:	
  1263                           ; 1 bytes @ 0x0
  1264                           
  1265  0070                     ?_Lcd_Init:	
  1266                           ; 1 bytes @ 0x0
  1267                           
  1268  0070                     ?_Lcd_Write_Char:	
  1269                           ; 1 bytes @ 0x0
  1270                           
  1271  0070                     ?_main:	
  1272                           ; 1 bytes @ 0x0
  1273                           
  1274  0070                     ?_timer:	
  1275                           ; 1 bytes @ 0x0
  1276                           
  1277  0070                     ??_timer:	
  1278                           ; 1 bytes @ 0x0
  1279                           
  1280  0070                     ?_Lcd_Clear:	
  1281                           ; 1 bytes @ 0x0
  1282                           
  1283                           
  1284                           ; 2 bytes @ 0x0
  1285  0070                     	ds	1
  1286  0071                     ??_initial_config:	
  1287  0071                     ??_init_int:	
  1288                           ; 1 bytes @ 0x1
  1289                           
  1290  0071                     ??_isdigit:	
  1291                           ; 1 bytes @ 0x1
  1292                           
  1293  0071                     ??_Lcd_Port:	
  1294                           ; 1 bytes @ 0x1
  1295                           
  1296  0071                     ?___wmul:	
  1297                           ; 1 bytes @ 0x1
  1298                           
  1299  0071                     ?___lwdiv:	
  1300                           ; 2 bytes @ 0x1
  1301                           
  1302  0071                     Lcd_Port@a:	
  1303                           ; 2 bytes @ 0x1
  1304                           
  1305  0071                     _isdigit$584:	
  1306                           ; 1 bytes @ 0x1
  1307                           
  1308  0071                     ___wmul@multiplier:	
  1309                           ; 1 bytes @ 0x1
  1310                           
  1311  0071                     ___lwdiv@divisor:	
  1312                           ; 2 bytes @ 0x1
  1313                           
  1314                           
  1315                           ; 2 bytes @ 0x1
  1316  0071                     	ds	1
  1317  0072                     ??_Lcd_Cmd:	
  1318  0072                     ??_Lcd_Write_Char:	
  1319                           ; 1 bytes @ 0x2
  1320                           
  1321  0072                     isdigit@c:	
  1322                           ; 1 bytes @ 0x2
  1323                           
  1324                           
  1325                           ; 1 bytes @ 0x2
  1326  0072                     	ds	1
  1327  0073                     Lcd_Cmd@a:	
  1328  0073                     Lcd_Write_Char@temp:	
  1329                           ; 1 bytes @ 0x3
  1330                           
  1331  0073                     ___wmul@multiplicand:	
  1332                           ; 1 bytes @ 0x3
  1333                           
  1334  0073                     ___lwdiv@dividend:	
  1335                           ; 2 bytes @ 0x3
  1336                           
  1337                           
  1338                           ; 2 bytes @ 0x3
  1339  0073                     	ds	1
  1340  0074                     ??_Lcd_Clear:	
  1341  0074                     ?_Lcd_Set_Cursor:	
  1342                           ; 1 bytes @ 0x4
  1343                           
  1344  0074                     ??_Lcd_Init:	
  1345                           ; 1 bytes @ 0x4
  1346                           
  1347  0074                     Lcd_Set_Cursor@b:	
  1348                           ; 1 bytes @ 0x4
  1349                           
  1350  0074                     Lcd_Write_Char@y:	
  1351                           ; 1 bytes @ 0x4
  1352                           
  1353                           
  1354                           ; 1 bytes @ 0x4
  1355  0074                     	ds	1
  1356  0075                     ??_Lcd_Set_Cursor:	
  1357  0075                     ??___wmul:	
  1358                           ; 1 bytes @ 0x5
  1359                           
  1360  0075                     ??___lwdiv:	
  1361                           ; 1 bytes @ 0x5
  1362                           
  1363  0075                     Lcd_Write_Char@a:	
  1364                           ; 1 bytes @ 0x5
  1365                           
  1366  0075                     ___wmul@product:	
  1367                           ; 1 bytes @ 0x5
  1368                           
  1369                           
  1370                           ; 2 bytes @ 0x5
  1371  0075                     	ds	1
  1372  0076                     ?_Lcd_Write_String:	
  1373  0076                     Lcd_Write_String@a:	
  1374                           ; 1 bytes @ 0x6
  1375                           
  1376  0076                     ___lwdiv@quotient:	
  1377                           ; 2 bytes @ 0x6
  1378                           
  1379                           
  1380                           ; 2 bytes @ 0x6
  1381  0076                     	ds	1
  1382  0077                     Lcd_Set_Cursor@a:	
  1383                           
  1384                           ; 1 bytes @ 0x7
  1385  0077                     	ds	1
  1386  0078                     ??_Lcd_Write_String:	
  1387  0078                     Lcd_Set_Cursor@z:	
  1388                           ; 1 bytes @ 0x8
  1389                           
  1390  0078                     ___lwdiv@counter:	
  1391                           ; 1 bytes @ 0x8
  1392                           
  1393                           
  1394                           ; 1 bytes @ 0x8
  1395  0078                     	ds	1
  1396  0079                     ?___lwmod:	
  1397  0079                     Lcd_Set_Cursor@y:	
  1398                           ; 2 bytes @ 0x9
  1399                           
  1400  0079                     Lcd_Write_String@i:	
  1401                           ; 1 bytes @ 0x9
  1402                           
  1403  0079                     ___lwmod@divisor:	
  1404                           ; 2 bytes @ 0x9
  1405                           
  1406                           
  1407                           ; 2 bytes @ 0x9
  1408  0079                     	ds	1
  1409  007A                     Lcd_Set_Cursor@temp:	
  1410                           
  1411                           ; 1 bytes @ 0xA
  1412  007A                     	ds	1
  1413  007B                     ___lwmod@dividend:	
  1414                           
  1415                           ; 2 bytes @ 0xB
  1416  007B                     	ds	2
  1417                           
  1418                           	psect	cstackBANK0
  1419  0020                     __pcstackBANK0:	
  1420  0020                     ??___lwmod:	
  1421                           
  1422                           ; 1 bytes @ 0x0
  1423  0020                     	ds	1
  1424  0021                     ___lwmod@counter:	
  1425                           
  1426                           ; 1 bytes @ 0x1
  1427  0021                     	ds	1
  1428  0022                     ?_sprintf:	
  1429  0022                     sprintf@f:	
  1430                           ; 2 bytes @ 0x2
  1431                           
  1432                           
  1433                           ; 2 bytes @ 0x2
  1434  0022                     	ds	4
  1435  0026                     ??_sprintf:	
  1436                           
  1437                           ; 1 bytes @ 0x6
  1438  0026                     	ds	4
  1439  002A                     sprintf@ap:	
  1440                           
  1441                           ; 1 bytes @ 0xA
  1442  002A                     	ds	1
  1443  002B                     sprintf@prec:	
  1444                           
  1445                           ; 1 bytes @ 0xB
  1446  002B                     	ds	1
  1447  002C                     sprintf@flag:	
  1448                           
  1449                           ; 1 bytes @ 0xC
  1450  002C                     	ds	1
  1451  002D                     sprintf@val:	
  1452                           
  1453                           ; 2 bytes @ 0xD
  1454  002D                     	ds	2
  1455  002F                     sprintf@width:	
  1456                           
  1457                           ; 2 bytes @ 0xF
  1458  002F                     	ds	2
  1459  0031                     sprintf@sp:	
  1460                           
  1461                           ; 1 bytes @ 0x11
  1462  0031                     	ds	1
  1463  0032                     sprintf@c:	
  1464                           
  1465                           ; 1 bytes @ 0x12
  1466  0032                     	ds	1
  1467  0033                     ??_main:	
  1468                           
  1469                           ; 1 bytes @ 0x13
  1470  0033                     	ds	2
  1471  0035                     main@counter:	
  1472                           
  1473                           ; 2 bytes @ 0x15
  1474  0035                     	ds	2
  1475                           
  1476                           	psect	maintext
  1477  0053                     __pmaintext:	
  1478 ;;
  1479 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1480 ;;
  1481 ;; *************** function _main *****************
  1482 ;; Defined at:
  1483 ;;		line 31 in file "main.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;		None
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;  counter         2   21[BANK0 ] int 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1492 ;; Tracked objects:
  1493 ;;		On entry : B1F/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1498 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1499 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1500 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1501 ;;Total ram usage:        4 bytes
  1502 ;; Hardware stack levels required when called:    4
  1503 ;; This function calls:
  1504 ;;		_Lcd_Clear
  1505 ;;		_Lcd_Init
  1506 ;;		_Lcd_Set_Cursor
  1507 ;;		_Lcd_Write_String
  1508 ;;		_init_int
  1509 ;;		_initial_config
  1510 ;;		_sprintf
  1511 ;; This function is called by:
  1512 ;;		Startup code after reset
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           
  1517                           ;psect for function _main
  1518  0053                     _main:	
  1519                           
  1520                           ;main.c: 33: sec=0;
  1521                           
  1522                           ;incstack = 0
  1523                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1524  0053  0020               	movlb	0	; select bank0
  1525  0054  01B7               	clrf	_sec
  1526  0055  01B8               	clrf	_sec+1
  1527                           
  1528                           ;main.c: 34: min=0;
  1529  0056  01B9               	clrf	_min
  1530  0057  01BA               	clrf	_min+1
  1531                           
  1532                           ;main.c: 35: int counter=0;
  1533  0058  01B5               	clrf	main@counter
  1534  0059  01B6               	clrf	main@counter+1
  1535                           
  1536                           ;main.c: 37: initial_config();
  1537  005A  3184  245A  3180   	fcall	_initial_config
  1538                           
  1539                           ;main.c: 38: init_int();
  1540  005D  3184  249F  3180   	fcall	_init_int
  1541                           
  1542                           ;main.c: 40: Lcd_Init();
  1543  0060  3182  22FF  3180   	fcall	_Lcd_Init
  1544                           
  1545                           ;main.c: 41: Lcd_Clear();
  1546  0063  3184  24AD  3180   	fcall	_Lcd_Clear
  1547                           
  1548                           ;main.c: 43: Lcd_Set_Cursor(2,7);
  1549  0066  3007               	movlw	7
  1550  0067  0020               	movlb	0	; select bank0
  1551  0068  00B3               	movwf	??_main
  1552  0069  0833               	movf	??_main,w
  1553  006A  00F4               	movwf	Lcd_Set_Cursor@b
  1554  006B  3002               	movlw	2
  1555  006C  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1556                           
  1557                           ;main.c: 44: Lcd_Write_String("Idle");
  1558  006F  30C1               	movlw	low (STR_1| (0+32768))
  1559  0070  00F6               	movwf	Lcd_Write_String@a
  1560  0071  3084               	movlw	high (STR_1| (0+32768))
  1561  0072  00F7               	movwf	Lcd_Write_String@a+1
  1562  0073  3184  2428  3180   	fcall	_Lcd_Write_String
  1563                           
  1564                           ;main.c: 47: LATCbits.LATC1=1;
  1565  0076  0020               	movlb	0	; select bank0
  1566  0077  1498               	bsf	24,1	;volatile
  1567  0078                     l1391:	
  1568                           ;main.c: 49: while(1)
  1569                           
  1570                           
  1571                           ;main.c: 50: {
  1572                           ;main.c: 51: if(min>=0)
  1573  0078  0020               	movlb	0	; select bank0
  1574  0079  1BBA               	btfsc	_min+1,7
  1575  007A  28DB               	goto	l1427
  1576                           
  1577                           ;main.c: 52: {
  1578                           ;main.c: 53: sprintf(buffer_sec, "%2d", sec);
  1579  007B  30CB               	movlw	low (STR_2| (0+32768))
  1580  007C  00A2               	movwf	sprintf@f
  1581  007D  3084               	movlw	high (STR_2| (0+32768))
  1582  007E  00A3               	movwf	sprintf@f+1
  1583  007F  0838               	movf	_sec+1,w
  1584  0080  00A5               	movwf	?_sprintf+3
  1585  0081  0837               	movf	_sec,w
  1586  0082  00A4               	movwf	?_sprintf+2
  1587  0083  3042               	movlw	(low (_buffer_sec| 0))& (0+255)
  1588  0084  3181  21AF  3180   	fcall	_sprintf
  1589                           
  1590                           ;main.c: 54: sprintf(buffer_min, "%2d", min);
  1591  0087  30CB               	movlw	low (STR_2| (0+32768))
  1592  0088  0020               	movlb	0	; select bank0
  1593  0089  00A2               	movwf	sprintf@f
  1594  008A  3084               	movlw	high (STR_2| (0+32768))
  1595  008B  00A3               	movwf	sprintf@f+1
  1596  008C  083A               	movf	_min+1,w
  1597  008D  00A5               	movwf	?_sprintf+3
  1598  008E  0839               	movf	_min,w
  1599  008F  00A4               	movwf	?_sprintf+2
  1600  0090  303F               	movlw	(low (_buffer_min| 0))& (0+255)
  1601  0091  3181  21AF  3180   	fcall	_sprintf
  1602                           
  1603                           ;main.c: 56: Lcd_Set_Cursor(1,6);
  1604  0094  3006               	movlw	6
  1605  0095  0020               	movlb	0	; select bank0
  1606  0096  00B3               	movwf	??_main
  1607  0097  0833               	movf	??_main,w
  1608  0098  00F4               	movwf	Lcd_Set_Cursor@b
  1609  0099  3001               	movlw	1
  1610  009A  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1611                           
  1612                           ;main.c: 57: Lcd_Write_String("  ");
  1613  009D  308E               	movlw	low ((STR_7+3)| (0+32768))
  1614  009E  00F6               	movwf	Lcd_Write_String@a
  1615  009F  3084               	movlw	high ((STR_7+3)| (0+32768))
  1616  00A0  00F7               	movwf	Lcd_Write_String@a+1
  1617  00A1  3184  2428  3180   	fcall	_Lcd_Write_String
  1618                           
  1619                           ;main.c: 58: Lcd_Set_Cursor(1,6);
  1620  00A4  3006               	movlw	6
  1621  00A5  0020               	movlb	0	; select bank0
  1622  00A6  00B3               	movwf	??_main
  1623  00A7  0833               	movf	??_main,w
  1624  00A8  00F4               	movwf	Lcd_Set_Cursor@b
  1625  00A9  3001               	movlw	1
  1626  00AA  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1627                           
  1628                           ;main.c: 59: Lcd_Write_String(buffer_min);
  1629  00AD  303F               	movlw	low _buffer_min
  1630  00AE  00F6               	movwf	Lcd_Write_String@a
  1631  00AF  3000               	movlw	high _buffer_min
  1632  00B0  00F7               	movwf	Lcd_Write_String@a+1
  1633  00B1  3184  2428  3180   	fcall	_Lcd_Write_String
  1634                           
  1635                           ;main.c: 61: Lcd_Write_String(":");
  1636  00B4  30CF               	movlw	low (STR_5| (0+32768))
  1637  00B5  00F6               	movwf	Lcd_Write_String@a
  1638  00B6  3084               	movlw	high (STR_5| (0+32768))
  1639  00B7  00F7               	movwf	Lcd_Write_String@a+1
  1640  00B8  3184  2428  3180   	fcall	_Lcd_Write_String
  1641                           
  1642                           ;main.c: 63: Lcd_Set_Cursor(1,9);
  1643  00BB  3009               	movlw	9
  1644  00BC  0020               	movlb	0	; select bank0
  1645  00BD  00B3               	movwf	??_main
  1646  00BE  0833               	movf	??_main,w
  1647  00BF  00F4               	movwf	Lcd_Set_Cursor@b
  1648  00C0  3001               	movlw	1
  1649  00C1  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1650                           
  1651                           ;main.c: 64: Lcd_Write_String("  ");
  1652  00C4  308E               	movlw	low ((STR_7+3)| (0+32768))
  1653  00C5  00F6               	movwf	Lcd_Write_String@a
  1654  00C6  3084               	movlw	high ((STR_7+3)| (0+32768))
  1655  00C7  00F7               	movwf	Lcd_Write_String@a+1
  1656  00C8  3184  2428  3180   	fcall	_Lcd_Write_String
  1657                           
  1658                           ;main.c: 65: Lcd_Set_Cursor(1,9);
  1659  00CB  3009               	movlw	9
  1660  00CC  0020               	movlb	0	; select bank0
  1661  00CD  00B3               	movwf	??_main
  1662  00CE  0833               	movf	??_main,w
  1663  00CF  00F4               	movwf	Lcd_Set_Cursor@b
  1664  00D0  3001               	movlw	1
  1665  00D1  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1666                           
  1667                           ;main.c: 66: Lcd_Write_String(buffer_sec);
  1668  00D4  3042               	movlw	low _buffer_sec
  1669  00D5  00F6               	movwf	Lcd_Write_String@a
  1670  00D6  3000               	movlw	high _buffer_sec
  1671  00D7  00F7               	movwf	Lcd_Write_String@a+1
  1672  00D8  3184  2428  3180   	fcall	_Lcd_Write_String
  1673  00DB                     l1427:	
  1674                           ;main.c: 67: }
  1675                           ;main.c: 70: while(idle==1)
  1676                           
  1677  00DB  0020               	movlb	0	; select bank0
  1678  00DC  033B               	decf	_idle,w
  1679  00DD  043C               	iorwf	_idle+1,w
  1680  00DE  1D03               	btfss	3,2
  1681  00DF  2913               	goto	l1429
  1682                           
  1683                           ;main.c: 71: {
  1684                           ;main.c: 73: Lcd_Set_Cursor(2,7);
  1685  00E0  3007               	movlw	7
  1686  00E1  0020               	movlb	0	; select bank0
  1687  00E2  00B3               	movwf	??_main
  1688  00E3  0833               	movf	??_main,w
  1689  00E4  00F4               	movwf	Lcd_Set_Cursor@b
  1690  00E5  3002               	movlw	2
  1691  00E6  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1692                           
  1693                           ;main.c: 74: Lcd_Write_String("     ");
  1694  00E9  308B               	movlw	low (STR_7| (0+32768))
  1695  00EA  00F6               	movwf	Lcd_Write_String@a
  1696  00EB  3084               	movlw	high (STR_7| (0+32768))
  1697  00EC  00F7               	movwf	Lcd_Write_String@a+1
  1698  00ED  3184  2428  3180   	fcall	_Lcd_Write_String
  1699                           
  1700                           ;main.c: 75: Lcd_Set_Cursor(2,7);
  1701  00F0  3007               	movlw	7
  1702  00F1  0020               	movlb	0	; select bank0
  1703  00F2  00B3               	movwf	??_main
  1704  00F3  0833               	movf	??_main,w
  1705  00F4  00F4               	movwf	Lcd_Set_Cursor@b
  1706  00F5  3002               	movlw	2
  1707  00F6  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1708                           
  1709                           ;main.c: 76: Lcd_Write_String("Idle");
  1710  00F9  30C1               	movlw	low (STR_1| (0+32768))
  1711  00FA  00F6               	movwf	Lcd_Write_String@a
  1712  00FB  3084               	movlw	high (STR_1| (0+32768))
  1713  00FC  00F7               	movwf	Lcd_Write_String@a+1
  1714  00FD  3184  2428  3180   	fcall	_Lcd_Write_String
  1715                           
  1716                           ;main.c: 77: T0CON0bits.T0EN=0;
  1717  0100  0020               	movlb	0	; select bank0
  1718  0101  139E               	bcf	30,7	;volatile
  1719                           
  1720                           ;main.c: 78: if(RB0==1)
  1721  0102  1C0D               	btfss	13,0	;volatile
  1722  0103  2906               	goto	l1425
  1723                           
  1724                           ;main.c: 79: idle=0;
  1725  0104  01BB               	clrf	_idle
  1726  0105  01BC               	clrf	_idle+1
  1727  0106                     l1425:	
  1728                           
  1729                           ;main.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
  1730  0106  3005               	movlw	5
  1731  0107  0020               	movlb	0	; select bank0
  1732  0108  00B4               	movwf	??_main+1
  1733  0109  300F               	movlw	15
  1734  010A  00B3               	movwf	??_main
  1735  010B  30F1               	movlw	241
  1736  010C                     u1117:	
  1737  010C  0B89               	decfsz	9,f
  1738  010D  290C               	goto	u1117
  1739  010E  0BB3               	decfsz	??_main,f
  1740  010F  290C               	goto	u1117
  1741  0110  0BB4               	decfsz	??_main+1,f
  1742  0111  290C               	goto	u1117
  1743  0112  28DB               	goto	l1427
  1744  0113                     l1429:	
  1745                           
  1746                           ;main.c: 81: }
  1747                           ;main.c: 88: _delay((unsigned long)((100)*(32000000/4000.0)));
  1748  0113  3005               	movlw	5
  1749  0114  0020               	movlb	0	; select bank0
  1750  0115  00B4               	movwf	??_main+1
  1751  0116  300F               	movlw	15
  1752  0117  00B3               	movwf	??_main
  1753  0118  30F1               	movlw	241
  1754  0119                     u1127:	
  1755  0119  0B89               	decfsz	9,f
  1756  011A  2919               	goto	u1127
  1757  011B  0BB3               	decfsz	??_main,f
  1758  011C  2919               	goto	u1127
  1759  011D  0BB4               	decfsz	??_main+1,f
  1760  011E  2919               	goto	u1127
  1761                           
  1762                           ;main.c: 92: if(RB3==1)
  1763  011F  0020               	movlb	0	; select bank0
  1764  0120  1D8D               	btfss	13,3	;volatile
  1765  0121  2951               	goto	l1445
  1766                           
  1767                           ;main.c: 93: {
  1768                           ;main.c: 94: T0CON0bits.T0EN=0;
  1769  0122  139E               	bcf	30,7	;volatile
  1770                           
  1771                           ;main.c: 95: Lcd_Set_Cursor(2,7);
  1772  0123  3007               	movlw	7
  1773  0124  00B3               	movwf	??_main
  1774  0125  0833               	movf	??_main,w
  1775  0126  00F4               	movwf	Lcd_Set_Cursor@b
  1776  0127  3002               	movlw	2
  1777  0128  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1778                           
  1779                           ;main.c: 96: Lcd_Write_String("     ");
  1780  012B  308B               	movlw	low (STR_7| (0+32768))
  1781  012C  00F6               	movwf	Lcd_Write_String@a
  1782  012D  3084               	movlw	high (STR_7| (0+32768))
  1783  012E  00F7               	movwf	Lcd_Write_String@a+1
  1784  012F  3184  2428  3180   	fcall	_Lcd_Write_String
  1785                           
  1786                           ;main.c: 97: Lcd_Set_Cursor(2,7);
  1787  0132  3007               	movlw	7
  1788  0133  0020               	movlb	0	; select bank0
  1789  0134  00B3               	movwf	??_main
  1790  0135  0833               	movf	??_main,w
  1791  0136  00F4               	movwf	Lcd_Set_Cursor@b
  1792  0137  3002               	movlw	2
  1793  0138  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1794                           
  1795                           ;main.c: 98: Lcd_Write_String("Stop");
  1796  013B  30C6               	movlw	low (STR_10| (0+32768))
  1797  013C  00F6               	movwf	Lcd_Write_String@a
  1798  013D  3084               	movlw	high (STR_10| (0+32768))
  1799  013E  00F7               	movwf	Lcd_Write_String@a+1
  1800  013F  3184  2428  3180   	fcall	_Lcd_Write_String
  1801                           
  1802                           ;main.c: 99: _delay((unsigned long)((500)*(32000000/4000.0)));
  1803  0142  3015               	movlw	21
  1804  0143  0020               	movlb	0	; select bank0
  1805  0144  00B4               	movwf	??_main+1
  1806  0145  304B               	movlw	75
  1807  0146  00B3               	movwf	??_main
  1808  0147  30BE               	movlw	190
  1809  0148                     u1137:	
  1810  0148  0B89               	decfsz	9,f
  1811  0149  2948               	goto	u1137
  1812  014A  0BB3               	decfsz	??_main,f
  1813  014B  2948               	goto	u1137
  1814  014C  0BB4               	decfsz	??_main+1,f
  1815  014D  2948               	goto	u1137
  1816  014E  0000               	nop
  1817                           
  1818                           ;main.c: 100: LATCbits.LATC1=1;
  1819  014F  0020               	movlb	0	; select bank0
  1820  0150  1498               	bsf	24,1	;volatile
  1821  0151                     l1445:	
  1822                           
  1823                           ;main.c: 101: }
  1824                           ;main.c: 103: if(RB2==1)
  1825  0151  1D0D               	btfss	13,2	;volatile
  1826  0152  2982               	goto	l1459
  1827                           
  1828                           ;main.c: 104: {
  1829                           ;main.c: 105: T0CON0bits.T0EN=1;
  1830  0153  179E               	bsf	30,7	;volatile
  1831                           
  1832                           ;main.c: 106: Lcd_Set_Cursor(2,7);
  1833  0154  3007               	movlw	7
  1834  0155  00B3               	movwf	??_main
  1835  0156  0833               	movf	??_main,w
  1836  0157  00F4               	movwf	Lcd_Set_Cursor@b
  1837  0158  3002               	movlw	2
  1838  0159  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1839                           
  1840                           ;main.c: 107: Lcd_Write_String("     ");
  1841  015C  308B               	movlw	low (STR_7| (0+32768))
  1842  015D  00F6               	movwf	Lcd_Write_String@a
  1843  015E  3084               	movlw	high (STR_7| (0+32768))
  1844  015F  00F7               	movwf	Lcd_Write_String@a+1
  1845  0160  3184  2428  3180   	fcall	_Lcd_Write_String
  1846                           
  1847                           ;main.c: 108: Lcd_Set_Cursor(2,7);
  1848  0163  3007               	movlw	7
  1849  0164  0020               	movlb	0	; select bank0
  1850  0165  00B3               	movwf	??_main
  1851  0166  0833               	movf	??_main,w
  1852  0167  00F4               	movwf	Lcd_Set_Cursor@b
  1853  0168  3002               	movlw	2
  1854  0169  3183  2340  3180   	fcall	_Lcd_Set_Cursor
  1855                           
  1856                           ;main.c: 109: Lcd_Write_String("Start");
  1857  016C  30B5               	movlw	low (STR_12| (0+32768))
  1858  016D  00F6               	movwf	Lcd_Write_String@a
  1859  016E  3084               	movlw	high (STR_12| (0+32768))
  1860  016F  00F7               	movwf	Lcd_Write_String@a+1
  1861  0170  3184  2428  3180   	fcall	_Lcd_Write_String
  1862                           
  1863                           ;main.c: 110: LATCbits.LATC1=0;
  1864  0173  0020               	movlb	0	; select bank0
  1865  0174  1098               	bcf	24,1	;volatile
  1866                           
  1867                           ;main.c: 111: _delay((unsigned long)((500)*(32000000/4000.0)));
  1868  0175  3015               	movlw	21
  1869  0176  0020               	movlb	0	; select bank0
  1870  0177  00B4               	movwf	??_main+1
  1871  0178  304B               	movlw	75
  1872  0179  00B3               	movwf	??_main
  1873  017A  30BE               	movlw	190
  1874  017B                     u1147:	
  1875  017B  0B89               	decfsz	9,f
  1876  017C  297B               	goto	u1147
  1877  017D  0BB3               	decfsz	??_main,f
  1878  017E  297B               	goto	u1147
  1879  017F  0BB4               	decfsz	??_main+1,f
  1880  0180  297B               	goto	u1147
  1881  0181  0000               	nop
  1882  0182                     l1459:	
  1883                           
  1884                           ;main.c: 113: }
  1885                           ;main.c: 115: if(RB0==1)
  1886  0182  0020               	movlb	0	; select bank0
  1887  0183  1C0D               	btfss	13,0	;volatile
  1888  0184  2995               	goto	l1463
  1889                           
  1890                           ;main.c: 116: {
  1891                           ;main.c: 117: min++;
  1892  0185  3001               	movlw	1
  1893  0186  07B9               	addwf	_min,f
  1894  0187  3000               	movlw	0
  1895  0188  3DBA               	addwfc	_min+1,f
  1896                           
  1897                           ;main.c: 118: _delay((unsigned long)((100)*(32000000/4000.0)));
  1898  0189  3005               	movlw	5
  1899  018A  0020               	movlb	0	; select bank0
  1900  018B  00B4               	movwf	??_main+1
  1901  018C  300F               	movlw	15
  1902  018D  00B3               	movwf	??_main
  1903  018E  30F1               	movlw	241
  1904  018F                     u1157:	
  1905  018F  0B89               	decfsz	9,f
  1906  0190  298F               	goto	u1157
  1907  0191  0BB3               	decfsz	??_main,f
  1908  0192  298F               	goto	u1157
  1909  0193  0BB4               	decfsz	??_main+1,f
  1910  0194  298F               	goto	u1157
  1911  0195                     l1463:	
  1912                           
  1913                           ;main.c: 119: }
  1914                           ;main.c: 121: if(RB1==1)
  1915  0195  0020               	movlb	0	; select bank0
  1916  0196  1C8D               	btfss	13,1	;volatile
  1917  0197  2878               	goto	l1391
  1918                           
  1919                           ;main.c: 122: {
  1920                           ;main.c: 123: min--;
  1921  0198  30FF               	movlw	255
  1922  0199  07B9               	addwf	_min,f
  1923  019A  30FF               	movlw	255
  1924  019B  3DBA               	addwfc	_min+1,f
  1925                           
  1926                           ;main.c: 124: if(min<0)
  1927  019C  1FBA               	btfss	_min+1,7
  1928  019D  29A2               	goto	l1471
  1929                           
  1930                           ;main.c: 125: {
  1931                           ;main.c: 126: min=0;
  1932  019E  01B9               	clrf	_min
  1933  019F  01BA               	clrf	_min+1
  1934                           
  1935                           ;main.c: 127: sec=0;
  1936  01A0  01B7               	clrf	_sec
  1937  01A1  01B8               	clrf	_sec+1
  1938  01A2                     l1471:	
  1939                           
  1940                           ;main.c: 128: }
  1941                           ;main.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
  1942  01A2  3005               	movlw	5
  1943  01A3  0020               	movlb	0	; select bank0
  1944  01A4  00B4               	movwf	??_main+1
  1945  01A5  300F               	movlw	15
  1946  01A6  00B3               	movwf	??_main
  1947  01A7  30F1               	movlw	241
  1948  01A8                     u1167:	
  1949  01A8  0B89               	decfsz	9,f
  1950  01A9  29A8               	goto	u1167
  1951  01AA  0BB3               	decfsz	??_main,f
  1952  01AB  29A8               	goto	u1167
  1953  01AC  0BB4               	decfsz	??_main+1,f
  1954  01AD  29A8               	goto	u1167
  1955  01AE  2878               	goto	l1391
  1956  01AF                     __end_of_main:	
  1957                           
  1958                           	psect	text1
  1959  01AF                     __ptext1:	
  1960 ;; *************** function _sprintf *****************
  1961 ;; Defined at:
  1962 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  sp              1    wreg     PTR unsigned char 
  1965 ;;		 -> buffer_min(3), buffer_sec(3), 
  1966 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  1967 ;;		 -> STR_3(4), STR_2(4), 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  sp              1   17[BANK0 ] PTR unsigned char 
  1970 ;;		 -> buffer_min(3), buffer_sec(3), 
  1971 ;;  tmpval          4    0        struct .
  1972 ;;  width           2   15[BANK0 ] int 
  1973 ;;  val             2   13[BANK0 ] unsigned int 
  1974 ;;  cp              2    0        PTR const unsigned char 
  1975 ;;  len             2    0        unsigned int 
  1976 ;;  c               1   18[BANK0 ] char 
  1977 ;;  flag            1   12[BANK0 ] unsigned char 
  1978 ;;  prec            1   11[BANK0 ] char 
  1979 ;;  ap              1   10[BANK0 ] PTR void [1]
  1980 ;;		 -> ?_sprintf(2), 
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  2    2[BANK0 ] int 
  1983 ;; Registers used:
  1984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1990 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1991 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1992 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1993 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1994 ;;Total ram usage:       17 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    2
  1997 ;; This function calls:
  1998 ;;		___lwdiv
  1999 ;;		___lwmod
  2000 ;;		___wmul
  2001 ;;		_isdigit
  2002 ;; This function is called by:
  2003 ;;		_main
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           
  2008                           ;psect for function _sprintf
  2009  01AF                     _sprintf:	
  2010                           
  2011                           ;incstack = 0
  2012                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2013                           ;sprintf@sp stored from wreg
  2014  01AF  0020               	movlb	0	; select bank0
  2015  01B0  00B1               	movwf	sprintf@sp
  2016                           
  2017                           ;doprnt.c: 494: va_list ap;
  2018                           ;doprnt.c: 499: signed char c;
  2019                           ;doprnt.c: 501: int width;
  2020                           ;doprnt.c: 506: signed char prec;
  2021                           ;doprnt.c: 508: unsigned char flag;
  2022                           ;doprnt.c: 523: union {
  2023                           ;doprnt.c: 524: unsigned long vd;
  2024                           ;doprnt.c: 525: double integ;
  2025                           ;doprnt.c: 526: } tmpval;
  2026                           ;doprnt.c: 528: unsigned int val;
  2027                           ;doprnt.c: 529: unsigned len;
  2028                           ;doprnt.c: 530: const char * cp;
  2029                           ;doprnt.c: 533: *ap = __va_start();
  2030  01B1  3024               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2031  01B2  00A6               	movwf	??_sprintf
  2032  01B3  0826               	movf	??_sprintf,w
  2033  01B4  00AA               	movwf	sprintf@ap
  2034  01B5                     l1365:	
  2035                           ;doprnt.c: 536: while(c = *f++) {
  2036                           
  2037  01B5  0020               	movlb	0	; select bank0
  2038  01B6  0823               	movf	sprintf@f+1,w
  2039  01B7  00A7               	movwf	??_sprintf+1
  2040  01B8  0822               	movf	sprintf@f,w
  2041  01B9  00A6               	movwf	??_sprintf
  2042  01BA  0AA2               	incf	sprintf@f,f
  2043  01BB  1903               	skipnz
  2044  01BC  0AA3               	incf	sprintf@f+1,f
  2045  01BD  0826               	movf	??_sprintf,w
  2046  01BE  0084               	movwf	4
  2047  01BF  0827               	movf	??_sprintf+1,w
  2048  01C0  0085               	movwf	5
  2049  01C1  0800               	movf	0,w	;code access
  2050  01C2  00A8               	movwf	??_sprintf+2
  2051  01C3  0828               	movf	??_sprintf+2,w
  2052  01C4  00B2               	movwf	sprintf@c
  2053  01C5  0832               	movf	sprintf@c,w
  2054  01C6  1903               	btfsc	3,2
  2055  01C7  2AF9               	goto	l1367
  2056                           
  2057                           ;doprnt.c: 538: if(c != '%')
  2058  01C8  3025               	movlw	37
  2059  01C9  0632               	xorwf	sprintf@c,w
  2060  01CA  1903               	btfsc	3,2
  2061  01CB  29D8               	goto	l1291
  2062                           
  2063                           ;doprnt.c: 540: {
  2064                           ;doprnt.c: 541: ((*sp++ = (c)));
  2065  01CC  0832               	movf	sprintf@c,w
  2066  01CD  00A6               	movwf	??_sprintf
  2067  01CE  0831               	movf	sprintf@sp,w
  2068  01CF  0086               	movwf	6
  2069  01D0  0187               	clrf	7
  2070  01D1  0826               	movf	??_sprintf,w
  2071  01D2  0081               	movwf	1
  2072  01D3  3001               	movlw	1
  2073  01D4  00A6               	movwf	??_sprintf
  2074  01D5  0826               	movf	??_sprintf,w
  2075  01D6  07B1               	addwf	sprintf@sp,f
  2076                           
  2077                           ;doprnt.c: 542: continue;
  2078  01D7  29B5               	goto	l1365
  2079  01D8                     l1291:	
  2080                           
  2081                           ;doprnt.c: 543: }
  2082                           ;doprnt.c: 546: width = 0;
  2083  01D8  01AF               	clrf	sprintf@width
  2084  01D9  01B0               	clrf	sprintf@width+1
  2085                           
  2086                           ;doprnt.c: 548: flag = 0;
  2087  01DA  01AC               	clrf	sprintf@flag
  2088                           
  2089                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2090  01DB  0822               	movf	sprintf@f,w
  2091  01DC  0084               	movwf	4
  2092  01DD  0823               	movf	sprintf@f+1,w
  2093  01DE  0085               	movwf	5
  2094  01DF  0800               	movf	0,w	;code access
  2095  01E0  3184  2491  3181   	fcall	_isdigit
  2096  01E3  1C03               	btfss	3,0
  2097  01E4  2A16               	goto	l1307
  2098                           
  2099                           ;doprnt.c: 598: width = 0;
  2100  01E5  0020               	movlb	0	; select bank0
  2101  01E6  01AF               	clrf	sprintf@width
  2102  01E7  01B0               	clrf	sprintf@width+1
  2103  01E8                     l1297:	
  2104                           ;doprnt.c: 599: do {
  2105                           
  2106                           
  2107                           ;doprnt.c: 600: width *= 10;
  2108  01E8  300A               	movlw	10
  2109  01E9  00F1               	movwf	___wmul@multiplier
  2110  01EA  3000               	movlw	0
  2111  01EB  00F2               	movwf	___wmul@multiplier+1
  2112  01EC  0020               	movlb	0	; select bank0
  2113  01ED  0830               	movf	sprintf@width+1,w
  2114  01EE  00F4               	movwf	___wmul@multiplicand+1
  2115  01EF  082F               	movf	sprintf@width,w
  2116  01F0  00F3               	movwf	___wmul@multiplicand
  2117  01F1  3184  240D  3181   	fcall	___wmul
  2118  01F4  0872               	movf	?___wmul+1,w
  2119  01F5  0020               	movlb	0	; select bank0
  2120  01F6  00B0               	movwf	sprintf@width+1
  2121  01F7  0871               	movf	?___wmul,w
  2122  01F8  00AF               	movwf	sprintf@width
  2123                           
  2124                           ;doprnt.c: 601: width += *f++ - '0';
  2125  01F9  0822               	movf	sprintf@f,w
  2126  01FA  0084               	movwf	4
  2127  01FB  0823               	movf	sprintf@f+1,w
  2128  01FC  0085               	movwf	5
  2129  01FD  0800               	movf	0,w	;code access
  2130  01FE  3ED0               	addlw	208
  2131  01FF  00A6               	movwf	??_sprintf
  2132  0200  30FF               	movlw	255
  2133  0201  1803               	skipnc
  2134  0202  3000               	movlw	0
  2135  0203  00A7               	movwf	??_sprintf+1
  2136  0204  0826               	movf	??_sprintf,w
  2137  0205  07AF               	addwf	sprintf@width,f
  2138  0206  0827               	movf	??_sprintf+1,w
  2139  0207  3DB0               	addwfc	sprintf@width+1,f
  2140  0208  3001               	movlw	1
  2141  0209  07A2               	addwf	sprintf@f,f
  2142  020A  3000               	movlw	0
  2143  020B  3DA3               	addwfc	sprintf@f+1,f
  2144                           
  2145                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2146  020C  0822               	movf	sprintf@f,w
  2147  020D  0084               	movwf	4
  2148  020E  0823               	movf	sprintf@f+1,w
  2149  020F  0085               	movwf	5
  2150  0210  0800               	movf	0,w	;code access
  2151  0211  3184  2491  3181   	fcall	_isdigit
  2152  0214  1803               	btfsc	3,0
  2153  0215  29E8               	goto	l1297
  2154  0216                     l1307:	
  2155                           ;doprnt.c: 822: }
  2156                           
  2157                           ;doprnt.c: 813: continue;
  2158                           
  2159                           ;doprnt.c: 802: default:
  2160                           
  2161                           ;doprnt.c: 698: case 'i':
  2162                           ;doprnt.c: 699: break;
  2163                           
  2164                           ;doprnt.c: 697: case 'd':
  2165                           
  2166                           ;doprnt.c: 638: goto alldone;
  2167                           
  2168                           ;doprnt.c: 637: case 0:
  2169                           
  2170                           ;doprnt.c: 608: }
  2171                           ;doprnt.c: 635: switch(c = *f++) {
  2172                           
  2173  0216  0020               	movlb	0	; select bank0
  2174  0217  0823               	movf	sprintf@f+1,w
  2175  0218  00A7               	movwf	??_sprintf+1
  2176  0219  0822               	movf	sprintf@f,w
  2177  021A  00A6               	movwf	??_sprintf
  2178  021B  0AA2               	incf	sprintf@f,f
  2179  021C  1903               	skipnz
  2180  021D  0AA3               	incf	sprintf@f+1,f
  2181  021E  0826               	movf	??_sprintf,w
  2182  021F  0084               	movwf	4
  2183  0220  0827               	movf	??_sprintf+1,w
  2184  0221  0085               	movwf	5
  2185  0222  0800               	movf	0,w	;code access
  2186  0223  00B2               	movwf	sprintf@c
  2187                           
  2188                           ; Switch size 1, requested type "space"
  2189                           ; Number of cases is 3, Range of values is 0 to 105
  2190                           ; switch strategies available:
  2191                           ; Name         Instructions Cycles
  2192                           ; simple_byte           10     6 (average)
  2193                           ; direct_byte          218     6 (fixed)
  2194                           ; jumptable            260     6 (fixed)
  2195                           ;	Chosen strategy is simple_byte
  2196  0224  3A00               	xorlw	0	; case 0
  2197  0225  1903               	skipnz
  2198  0226  2AF9               	goto	l1367
  2199  0227  3A64               	xorlw	100	; case 100
  2200  0228  1903               	skipnz
  2201  0229  2A2E               	goto	l1309
  2202  022A  3A0D               	xorlw	13	; case 105
  2203  022B  1903               	skipnz
  2204  022C  2A2E               	goto	l1309
  2205  022D  29B5               	goto	l1365
  2206  022E                     l1309:	
  2207                           
  2208                           ;doprnt.c: 1253: {
  2209                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2210  022E  0020               	movlb	0	; select bank0
  2211  022F  082A               	movf	sprintf@ap,w
  2212  0230  0086               	movwf	6
  2213  0231  0187               	clrf	7
  2214  0232  3F40               	moviw [0]fsr1
  2215  0233  00AD               	movwf	sprintf@val
  2216  0234  3F41               	moviw [1]fsr1
  2217  0235  00AE               	movwf	sprintf@val+1
  2218  0236  3002               	movlw	2
  2219  0237  00A6               	movwf	??_sprintf
  2220  0238  0826               	movf	??_sprintf,w
  2221  0239  07AA               	addwf	sprintf@ap,f
  2222                           
  2223                           ;doprnt.c: 1261: if((int)val < 0) {
  2224  023A  1FAE               	btfss	sprintf@val+1,7
  2225  023B  2A45               	goto	l1319
  2226                           
  2227                           ;doprnt.c: 1262: flag |= 0x03;
  2228  023C  3003               	movlw	3
  2229  023D  00A6               	movwf	??_sprintf
  2230  023E  0826               	movf	??_sprintf,w
  2231  023F  04AC               	iorwf	sprintf@flag,f
  2232                           
  2233                           ;doprnt.c: 1263: val = -val;
  2234  0240  09AD               	comf	sprintf@val,f
  2235  0241  09AE               	comf	sprintf@val+1,f
  2236  0242  0AAD               	incf	sprintf@val,f
  2237  0243  1903               	skipnz
  2238  0244  0AAE               	incf	sprintf@val+1,f
  2239  0245                     l1319:	
  2240                           
  2241                           ;doprnt.c: 1264: }
  2242                           ;doprnt.c: 1266: }
  2243                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2244  0245  01B2               	clrf	sprintf@c
  2245  0246  0AB2               	incf	sprintf@c,f
  2246  0247  3005               	movlw	5
  2247  0248  0632               	xorwf	sprintf@c,w
  2248  0249  1903               	btfsc	3,2
  2249  024A  2A6A               	goto	l1331
  2250  024B                     l1325:	
  2251                           
  2252                           ;doprnt.c: 1306: if(val < dpowers[c])
  2253  024B  0832               	movf	sprintf@c,w
  2254  024C  00A6               	movwf	??_sprintf
  2255  024D  01A7               	clrf	??_sprintf+1
  2256  024E  35A6               	lslf	??_sprintf,f
  2257  024F  0DA7               	rlf	??_sprintf+1,f
  2258  0250  3081               	movlw	low (_dpowers| (0+32768))
  2259  0251  0726               	addwf	??_sprintf,w
  2260  0252  0084               	movwf	4
  2261  0253  3084               	movlw	high (_dpowers| (0+32768))
  2262  0254  3D27               	addwfc	??_sprintf+1,w
  2263  0255  0085               	movwf	5
  2264  0256  3F00               	moviw [0]fsr0
  2265  0257  00A8               	movwf	??_sprintf+2
  2266  0258  3F01               	moviw [1]fsr0
  2267  0259  00A9               	movwf	??_sprintf+3
  2268  025A  0829               	movf	??_sprintf+3,w
  2269  025B  022E               	subwf	sprintf@val+1,w
  2270  025C  1D03               	skipz
  2271  025D  2A60               	goto	u905
  2272  025E  0828               	movf	??_sprintf+2,w
  2273  025F  022D               	subwf	sprintf@val,w
  2274  0260                     u905:	
  2275  0260  1C03               	btfss	3,0
  2276  0261  2A6A               	goto	l1331
  2277                           
  2278                           ;doprnt.c: 1307: break;
  2279  0262  3001               	movlw	1
  2280  0263  00A6               	movwf	??_sprintf
  2281  0264  0826               	movf	??_sprintf,w
  2282  0265  07B2               	addwf	sprintf@c,f
  2283  0266  3005               	movlw	5
  2284  0267  0632               	xorwf	sprintf@c,w
  2285  0268  1D03               	btfss	3,2
  2286  0269  2A4B               	goto	l1325
  2287  026A                     l1331:	
  2288                           
  2289                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2290  026A  082F               	movf	sprintf@width,w
  2291  026B  0430               	iorwf	sprintf@width+1,w
  2292  026C  1903               	btfsc	3,2
  2293  026D  2A76               	goto	l195
  2294  026E  082C               	movf	sprintf@flag,w
  2295  026F  3903               	andlw	3
  2296  0270  1903               	btfsc	3,2
  2297  0271  2A76               	goto	l195
  2298                           
  2299                           ;doprnt.c: 1346: width--;
  2300  0272  30FF               	movlw	255
  2301  0273  07AF               	addwf	sprintf@width,f
  2302  0274  30FF               	movlw	255
  2303  0275  3DB0               	addwfc	sprintf@width+1,f
  2304  0276                     l195:	
  2305                           
  2306                           ;doprnt.c: 1381: if(width > c)
  2307  0276  0832               	movf	sprintf@c,w
  2308  0277  00A6               	movwf	??_sprintf
  2309  0278  01A7               	clrf	??_sprintf+1
  2310  0279  1BA6               	btfsc	??_sprintf,7
  2311  027A  03A7               	decf	??_sprintf+1,f
  2312  027B  0827               	movf	??_sprintf+1,w
  2313  027C  3A80               	xorlw	128
  2314  027D  00A8               	movwf	??_sprintf+2
  2315  027E  0830               	movf	sprintf@width+1,w
  2316  027F  3A80               	xorlw	128
  2317  0280  0228               	subwf	??_sprintf+2,w
  2318  0281  1D03               	skipz
  2319  0282  2A85               	goto	u945
  2320  0283  082F               	movf	sprintf@width,w
  2321  0284  0226               	subwf	??_sprintf,w
  2322  0285                     u945:	
  2323  0285  1803               	skipnc
  2324  0286  2A92               	goto	l1339
  2325                           
  2326                           ;doprnt.c: 1382: width -= c;
  2327  0287  0020               	movlb	0	; select bank0
  2328  0288  0832               	movf	sprintf@c,w
  2329  0289  00A6               	movwf	??_sprintf
  2330  028A  01A7               	clrf	??_sprintf+1
  2331  028B  1BA6               	btfsc	??_sprintf,7
  2332  028C  03A7               	decf	??_sprintf+1,f
  2333  028D  0826               	movf	??_sprintf,w
  2334  028E  02AF               	subwf	sprintf@width,f
  2335  028F  0827               	movf	??_sprintf+1,w
  2336  0290  3BB0               	subwfb	sprintf@width+1,f
  2337  0291  2A95               	goto	l1341
  2338  0292                     l1339:	
  2339                           
  2340                           ;doprnt.c: 1383: else
  2341                           ;doprnt.c: 1384: width = 0;
  2342  0292  0020               	movlb	0	; select bank0
  2343  0293  01AF               	clrf	sprintf@width
  2344  0294  01B0               	clrf	sprintf@width+1
  2345  0295                     l1341:	
  2346                           
  2347                           ;doprnt.c: 1422: {
  2348                           ;doprnt.c: 1424: if(width
  2349                           ;doprnt.c: 1428: )
  2350  0295  082F               	movf	sprintf@width,w
  2351  0296  0430               	iorwf	sprintf@width+1,w
  2352  0297  1903               	btfsc	3,2
  2353  0298  2AAC               	goto	l1349
  2354  0299                     l1343:	
  2355                           ;doprnt.c: 1429: do
  2356                           
  2357                           
  2358                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2359  0299  3020               	movlw	32
  2360  029A  00A6               	movwf	??_sprintf
  2361  029B  0831               	movf	sprintf@sp,w
  2362  029C  0086               	movwf	6
  2363  029D  0187               	clrf	7
  2364  029E  0826               	movf	??_sprintf,w
  2365  029F  0081               	movwf	1
  2366  02A0  3001               	movlw	1
  2367  02A1  00A6               	movwf	??_sprintf
  2368  02A2  0826               	movf	??_sprintf,w
  2369  02A3  07B1               	addwf	sprintf@sp,f
  2370                           
  2371                           ;doprnt.c: 1431: while(--width);
  2372  02A4  30FF               	movlw	255
  2373  02A5  07AF               	addwf	sprintf@width,f
  2374  02A6  30FF               	movlw	255
  2375  02A7  3DB0               	addwfc	sprintf@width+1,f
  2376  02A8  082F               	movf	sprintf@width,w
  2377  02A9  0430               	iorwf	sprintf@width+1,w
  2378  02AA  1D03               	btfss	3,2
  2379  02AB  2A99               	goto	l1343
  2380  02AC                     l1349:	
  2381                           
  2382                           ;doprnt.c: 1438: if(flag & 0x03)
  2383  02AC  082C               	movf	sprintf@flag,w
  2384  02AD  3903               	andlw	3
  2385  02AE  1903               	btfsc	3,2
  2386  02AF  2ABB               	goto	l1355
  2387                           
  2388                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2389  02B0  302D               	movlw	45
  2390  02B1  00A6               	movwf	??_sprintf
  2391  02B2  0831               	movf	sprintf@sp,w
  2392  02B3  0086               	movwf	6
  2393  02B4  0187               	clrf	7
  2394  02B5  0826               	movf	??_sprintf,w
  2395  02B6  0081               	movwf	1
  2396  02B7  3001               	movlw	1
  2397  02B8  00A6               	movwf	??_sprintf
  2398  02B9  0826               	movf	??_sprintf,w
  2399  02BA  07B1               	addwf	sprintf@sp,f
  2400  02BB                     l1355:	
  2401                           
  2402                           ;doprnt.c: 1469: }
  2403                           ;doprnt.c: 1472: prec = c;
  2404  02BB  0832               	movf	sprintf@c,w
  2405  02BC  00A6               	movwf	??_sprintf
  2406  02BD  0826               	movf	??_sprintf,w
  2407  02BE  00AB               	movwf	sprintf@prec
  2408  02BF                     l1363:	
  2409                           ;doprnt.c: 1474: while(prec--) {
  2410                           
  2411  02BF  30FF               	movlw	255
  2412  02C0  00A6               	movwf	??_sprintf
  2413  02C1  0826               	movf	??_sprintf,w
  2414  02C2  07AB               	addwf	sprintf@prec,f
  2415  02C3  0A2B               	incf	sprintf@prec,w
  2416  02C4  1903               	btfsc	3,2
  2417  02C5  29B5               	goto	l1365
  2418                           
  2419                           ;doprnt.c: 1478: {
  2420                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2421  02C6  300A               	movlw	10
  2422  02C7  00F9               	movwf	___lwmod@divisor
  2423  02C8  3000               	movlw	0
  2424  02C9  00FA               	movwf	___lwmod@divisor+1
  2425  02CA  082B               	movf	sprintf@prec,w
  2426  02CB  00A6               	movwf	??_sprintf
  2427  02CC  01A7               	clrf	??_sprintf+1
  2428  02CD  35A6               	lslf	??_sprintf,f
  2429  02CE  0DA7               	rlf	??_sprintf+1,f
  2430  02CF  3081               	movlw	low (_dpowers| (0+32768))
  2431  02D0  0726               	addwf	??_sprintf,w
  2432  02D1  0084               	movwf	4
  2433  02D2  3084               	movlw	high (_dpowers| (0+32768))
  2434  02D3  3D27               	addwfc	??_sprintf+1,w
  2435  02D4  0085               	movwf	5
  2436  02D5  3F00               	moviw [0]fsr0
  2437  02D6  00F1               	movwf	___lwdiv@divisor
  2438  02D7  3F01               	moviw [1]fsr0
  2439  02D8  00F2               	movwf	___lwdiv@divisor+1
  2440  02D9  082E               	movf	sprintf@val+1,w
  2441  02DA  00F4               	movwf	___lwdiv@dividend+1
  2442  02DB  082D               	movf	sprintf@val,w
  2443  02DC  00F3               	movwf	___lwdiv@dividend
  2444  02DD  3183  2380  3181   	fcall	___lwdiv
  2445  02E0  0872               	movf	?___lwdiv+1,w
  2446  02E1  00FC               	movwf	___lwmod@dividend+1
  2447  02E2  0871               	movf	?___lwdiv,w
  2448  02E3  00FB               	movwf	___lwmod@dividend
  2449  02E4  3183  23B4  3181   	fcall	___lwmod
  2450  02E7  0879               	movf	?___lwmod,w
  2451  02E8  3E30               	addlw	48
  2452  02E9  0020               	movlb	0	; select bank0
  2453  02EA  00A8               	movwf	??_sprintf+2
  2454  02EB  0828               	movf	??_sprintf+2,w
  2455  02EC  00B2               	movwf	sprintf@c
  2456                           
  2457                           ;doprnt.c: 1523: }
  2458                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2459  02ED  0832               	movf	sprintf@c,w
  2460  02EE  00A6               	movwf	??_sprintf
  2461  02EF  0831               	movf	sprintf@sp,w
  2462  02F0  0086               	movwf	6
  2463  02F1  0187               	clrf	7
  2464  02F2  0826               	movf	??_sprintf,w
  2465  02F3  0081               	movwf	1
  2466  02F4  3001               	movlw	1
  2467  02F5  00A6               	movwf	??_sprintf
  2468  02F6  0826               	movf	??_sprintf,w
  2469  02F7  07B1               	addwf	sprintf@sp,f
  2470  02F8  2ABF               	goto	l1363
  2471  02F9                     l1367:	
  2472                           ;doprnt.c: 1525: }
  2473                           ;doprnt.c: 1533: }
  2474                           ;doprnt.c: 1535: alldone:
  2475                           
  2476                           
  2477                           ;doprnt.c: 1538: *sp = 0;
  2478  02F9  0020               	movlb	0	; select bank0
  2479  02FA  0831               	movf	sprintf@sp,w
  2480  02FB  0086               	movwf	6
  2481  02FC  0187               	clrf	7
  2482  02FD  0181               	clrf	1
  2483  02FE  0008               	return
  2484  02FF                     __end_of_sprintf:	
  2485                           ;doprnt.c: 1540: return 0;
  2486                           ;	Return value of _sprintf is never used
  2487                           
  2488                           
  2489                           	psect	text2
  2490  0491                     __ptext2:	
  2491 ;; *************** function _isdigit *****************
  2492 ;; Defined at:
  2493 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;  c               1    wreg     unsigned char 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  c               1    2[COMMON] unsigned char 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;		None               void
  2500 ;; Registers used:
  2501 ;;		wreg, status,2, status,0
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2510 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2511 ;;Total ram usage:        2 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    1
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_sprintf
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           
  2522                           ;psect for function _isdigit
  2523  0491                     _isdigit:	
  2524                           
  2525                           ;incstack = 0
  2526                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2527                           ;isdigit@c stored from wreg
  2528  0491  00F2               	movwf	isdigit@c
  2529  0492  01F1               	clrf	_isdigit$584
  2530  0493  303A               	movlw	58
  2531  0494  0272               	subwf	isdigit@c,w
  2532  0495  1803               	skipnc
  2533  0496  2C9D               	goto	l1153
  2534  0497  3030               	movlw	48
  2535  0498  0272               	subwf	isdigit@c,w
  2536  0499  1C03               	skipc
  2537  049A  2C9D               	goto	l1153
  2538  049B  01F1               	clrf	_isdigit$584
  2539  049C  0AF1               	incf	_isdigit$584,f
  2540  049D                     l1153:	
  2541  049D  0C71               	rrf	_isdigit$584,w
  2542  049E  0008               	return
  2543  049F                     __end_of_isdigit:	
  2544                           
  2545                           	psect	text3
  2546  040D                     __ptext3:	
  2547 ;; *************** function ___wmul *****************
  2548 ;; Defined at:
  2549 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;  multiplier      2    1[COMMON] unsigned int 
  2552 ;;  multiplicand    2    3[COMMON] unsigned int 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  product         2    5[COMMON] unsigned int 
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  2    1[COMMON] unsigned int 
  2557 ;; Registers used:
  2558 ;;		wreg, status,2, status,0
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2564 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2565 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2567 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2568 ;;Total ram usage:        6 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    1
  2571 ;; This function calls:
  2572 ;;		Nothing
  2573 ;; This function is called by:
  2574 ;;		_sprintf
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           
  2579                           ;psect for function ___wmul
  2580  040D                     ___wmul:	
  2581                           
  2582                           ;incstack = 0
  2583                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2584  040D  01F5               	clrf	___wmul@product
  2585  040E  01F6               	clrf	___wmul@product+1
  2586  040F                     l1159:	
  2587  040F  1C71               	btfss	___wmul@multiplier,0
  2588  0410  2C15               	goto	l288
  2589  0411  0873               	movf	___wmul@multiplicand,w
  2590  0412  07F5               	addwf	___wmul@product,f
  2591  0413  0874               	movf	___wmul@multiplicand+1,w
  2592  0414  3DF6               	addwfc	___wmul@product+1,f
  2593  0415                     l288:	
  2594  0415  3001               	movlw	1
  2595  0416                     u645:	
  2596  0416  35F3               	lslf	___wmul@multiplicand,f
  2597  0417  0DF4               	rlf	___wmul@multiplicand+1,f
  2598  0418  0B89               	decfsz	9,f
  2599  0419  2C16               	goto	u645
  2600  041A  3001               	movlw	1
  2601  041B                     u655:	
  2602  041B  36F2               	lsrf	___wmul@multiplier+1,f
  2603  041C  0CF1               	rrf	___wmul@multiplier,f
  2604  041D  0B89               	decfsz	9,f
  2605  041E  2C1B               	goto	u655
  2606  041F  0871               	movf	___wmul@multiplier,w
  2607  0420  0472               	iorwf	___wmul@multiplier+1,w
  2608  0421  1D03               	btfss	3,2
  2609  0422  2C0F               	goto	l1159
  2610  0423  0876               	movf	___wmul@product+1,w
  2611  0424  00F2               	movwf	?___wmul+1
  2612  0425  0875               	movf	___wmul@product,w
  2613  0426  00F1               	movwf	?___wmul
  2614  0427  0008               	return
  2615  0428                     __end_of___wmul:	
  2616                           
  2617                           	psect	text4
  2618  03B4                     __ptext4:	
  2619 ;; *************** function ___lwmod *****************
  2620 ;; Defined at:
  2621 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  divisor         2    9[COMMON] unsigned int 
  2624 ;;  dividend        2   11[COMMON] unsigned int 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  counter         1    1[BANK0 ] unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  2    9[COMMON] unsigned int 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2636 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2637 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2639 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2640 ;;Total ram usage:        6 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    1
  2643 ;; This function calls:
  2644 ;;		Nothing
  2645 ;; This function is called by:
  2646 ;;		_sprintf
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           
  2651                           ;psect for function ___lwmod
  2652  03B4                     ___lwmod:	
  2653                           
  2654                           ;incstack = 0
  2655                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2656  03B4  0879               	movf	___lwmod@divisor,w
  2657  03B5  047A               	iorwf	___lwmod@divisor+1,w
  2658  03B6  1903               	btfsc	3,2
  2659  03B7  2BDC               	goto	l1215
  2660  03B8  0020               	movlb	0	; select bank0
  2661  03B9  01A1               	clrf	___lwmod@counter
  2662  03BA  0AA1               	incf	___lwmod@counter,f
  2663  03BB                     l1205:	
  2664  03BB  1BFA               	btfsc	___lwmod@divisor+1,7
  2665  03BC  2BC7               	goto	l1207
  2666  03BD  3001               	movlw	1
  2667  03BE                     u755:	
  2668  03BE  35F9               	lslf	___lwmod@divisor,f
  2669  03BF  0DFA               	rlf	___lwmod@divisor+1,f
  2670  03C0  0B89               	decfsz	9,f
  2671  03C1  2BBE               	goto	u755
  2672  03C2  3001               	movlw	1
  2673  03C3  00A0               	movwf	??___lwmod
  2674  03C4  0820               	movf	??___lwmod,w
  2675  03C5  07A1               	addwf	___lwmod@counter,f
  2676  03C6  2BBB               	goto	l1205
  2677  03C7                     l1207:	
  2678  03C7  087A               	movf	___lwmod@divisor+1,w
  2679  03C8  027C               	subwf	___lwmod@dividend+1,w
  2680  03C9  1D03               	skipz
  2681  03CA  2BCD               	goto	u775
  2682  03CB  0879               	movf	___lwmod@divisor,w
  2683  03CC  027B               	subwf	___lwmod@dividend,w
  2684  03CD                     u775:	
  2685  03CD  1C03               	skipc
  2686  03CE  2BD3               	goto	l1211
  2687  03CF  0879               	movf	___lwmod@divisor,w
  2688  03D0  02FB               	subwf	___lwmod@dividend,f
  2689  03D1  087A               	movf	___lwmod@divisor+1,w
  2690  03D2  3BFC               	subwfb	___lwmod@dividend+1,f
  2691  03D3                     l1211:	
  2692  03D3  3001               	movlw	1
  2693  03D4                     u785:	
  2694  03D4  36FA               	lsrf	___lwmod@divisor+1,f
  2695  03D5  0CF9               	rrf	___lwmod@divisor,f
  2696  03D6  0B89               	decfsz	9,f
  2697  03D7  2BD4               	goto	u785
  2698  03D8  3001               	movlw	1
  2699  03D9  02A1               	subwf	___lwmod@counter,f
  2700  03DA  1D03               	btfss	3,2
  2701  03DB  2BC7               	goto	l1207
  2702  03DC                     l1215:	
  2703  03DC  087C               	movf	___lwmod@dividend+1,w
  2704  03DD  00FA               	movwf	?___lwmod+1
  2705  03DE  087B               	movf	___lwmod@dividend,w
  2706  03DF  00F9               	movwf	?___lwmod
  2707  03E0  0008               	return
  2708  03E1                     __end_of___lwmod:	
  2709                           
  2710                           	psect	text5
  2711  0380                     __ptext5:	
  2712 ;; *************** function ___lwdiv *****************
  2713 ;; Defined at:
  2714 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;  divisor         2    1[COMMON] unsigned int 
  2717 ;;  dividend        2    3[COMMON] unsigned int 
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  quotient        2    6[COMMON] unsigned int 
  2720 ;;  counter         1    8[COMMON] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  2    1[COMMON] unsigned int 
  2723 ;; Registers used:
  2724 ;;		wreg, status,2, status,0
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2730 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2731 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2732 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2733 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2734 ;;Total ram usage:        8 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    1
  2737 ;; This function calls:
  2738 ;;		Nothing
  2739 ;; This function is called by:
  2740 ;;		_sprintf
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           
  2745                           ;psect for function ___lwdiv
  2746  0380                     ___lwdiv:	
  2747                           
  2748                           ;incstack = 0
  2749                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2750  0380  01F6               	clrf	___lwdiv@quotient
  2751  0381  01F7               	clrf	___lwdiv@quotient+1
  2752  0382  0871               	movf	___lwdiv@divisor,w
  2753  0383  0472               	iorwf	___lwdiv@divisor+1,w
  2754  0384  1903               	btfsc	3,2
  2755  0385  2BAF               	goto	l1193
  2756  0386  01F8               	clrf	___lwdiv@counter
  2757  0387  0AF8               	incf	___lwdiv@counter,f
  2758  0388                     l1181:	
  2759  0388  1BF2               	btfsc	___lwdiv@divisor+1,7
  2760  0389  2B94               	goto	l1183
  2761  038A  3001               	movlw	1
  2762  038B                     u685:	
  2763  038B  35F1               	lslf	___lwdiv@divisor,f
  2764  038C  0DF2               	rlf	___lwdiv@divisor+1,f
  2765  038D  0B89               	decfsz	9,f
  2766  038E  2B8B               	goto	u685
  2767  038F  3001               	movlw	1
  2768  0390  00F5               	movwf	??___lwdiv
  2769  0391  0875               	movf	??___lwdiv,w
  2770  0392  07F8               	addwf	___lwdiv@counter,f
  2771  0393  2B88               	goto	l1181
  2772  0394                     l1183:	
  2773  0394  3001               	movlw	1
  2774  0395                     u705:	
  2775  0395  35F6               	lslf	___lwdiv@quotient,f
  2776  0396  0DF7               	rlf	___lwdiv@quotient+1,f
  2777  0397  0B89               	decfsz	9,f
  2778  0398  2B95               	goto	u705
  2779  0399  0872               	movf	___lwdiv@divisor+1,w
  2780  039A  0274               	subwf	___lwdiv@dividend+1,w
  2781  039B  1D03               	skipz
  2782  039C  2B9F               	goto	u715
  2783  039D  0871               	movf	___lwdiv@divisor,w
  2784  039E  0273               	subwf	___lwdiv@dividend,w
  2785  039F                     u715:	
  2786  039F  1C03               	skipc
  2787  03A0  2BA6               	goto	l1189
  2788  03A1  0871               	movf	___lwdiv@divisor,w
  2789  03A2  02F3               	subwf	___lwdiv@dividend,f
  2790  03A3  0872               	movf	___lwdiv@divisor+1,w
  2791  03A4  3BF4               	subwfb	___lwdiv@dividend+1,f
  2792  03A5  1476               	bsf	___lwdiv@quotient,0
  2793  03A6                     l1189:	
  2794  03A6  3001               	movlw	1
  2795  03A7                     u725:	
  2796  03A7  36F2               	lsrf	___lwdiv@divisor+1,f
  2797  03A8  0CF1               	rrf	___lwdiv@divisor,f
  2798  03A9  0B89               	decfsz	9,f
  2799  03AA  2BA7               	goto	u725
  2800  03AB  3001               	movlw	1
  2801  03AC  02F8               	subwf	___lwdiv@counter,f
  2802  03AD  1D03               	btfss	3,2
  2803  03AE  2B94               	goto	l1183
  2804  03AF                     l1193:	
  2805  03AF  0877               	movf	___lwdiv@quotient+1,w
  2806  03B0  00F2               	movwf	?___lwdiv+1
  2807  03B1  0876               	movf	___lwdiv@quotient,w
  2808  03B2  00F1               	movwf	?___lwdiv
  2809  03B3  0008               	return
  2810  03B4                     __end_of___lwdiv:	
  2811                           
  2812                           	psect	text6
  2813  045A                     __ptext6:	
  2814 ;; *************** function _initial_config *****************
  2815 ;; Defined at:
  2816 ;;		line 31 in file "config.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;		None
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;		None
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		status,2
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2834 ;;Total ram usage:        0 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    1
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_main
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           
  2845                           ;psect for function _initial_config
  2846  045A                     _initial_config:	
  2847                           
  2848                           ;config.c: 33: TRISA=0X00;
  2849                           
  2850                           ;incstack = 0
  2851                           ; Regs used in _initial_config: [status,2]
  2852  045A  0020               	movlb	0	; select bank0
  2853  045B  0191               	clrf	17	;volatile
  2854                           
  2855                           ;config.c: 34: TRISB=0X00;
  2856  045C  0192               	clrf	18	;volatile
  2857                           
  2858                           ;config.c: 35: TRISC=0X00;
  2859  045D  0193               	clrf	19	;volatile
  2860                           
  2861                           ;config.c: 37: PORTA=0X00;
  2862  045E  018C               	clrf	12	;volatile
  2863                           
  2864                           ;config.c: 38: PORTB=0X00;
  2865  045F  018D               	clrf	13	;volatile
  2866                           
  2867                           ;config.c: 39: PORTC=0X00;
  2868  0460  018E               	clrf	14	;volatile
  2869                           
  2870                           ;config.c: 41: LATA=0X00;
  2871  0461  0196               	clrf	22	;volatile
  2872                           
  2873                           ;config.c: 42: LATB=0X00;
  2874  0462  0197               	clrf	23	;volatile
  2875                           
  2876                           ;config.c: 43: LATC=0X00;
  2877  0463  0198               	clrf	24	;volatile
  2878                           
  2879                           ;config.c: 45: ANSELA=0X00;
  2880  0464  003E               	movlb	30	; select bank30
  2881  0465  01B8               	clrf	56	;volatile
  2882                           
  2883                           ;config.c: 46: ANSELB=0X00;
  2884  0466  01C3               	clrf	67	;volatile
  2885                           
  2886                           ;config.c: 47: ANSELC=0X00;
  2887  0467  01CE               	clrf	78	;volatile
  2888                           
  2889                           ;config.c: 52: TRISBbits.TRISB0=1;
  2890  0468  0020               	movlb	0	; select bank0
  2891  0469  1412               	bsf	18,0	;volatile
  2892                           
  2893                           ;config.c: 53: TRISBbits.TRISB1=1;
  2894  046A  1492               	bsf	18,1	;volatile
  2895                           
  2896                           ;config.c: 54: TRISBbits.TRISB2=1;
  2897  046B  1512               	bsf	18,2	;volatile
  2898                           
  2899                           ;config.c: 55: TRISBbits.TRISB3=1;
  2900  046C  1592               	bsf	18,3	;volatile
  2901  046D  0008               	return
  2902  046E                     __end_of_initial_config:	
  2903                           
  2904                           	psect	text7
  2905  049F                     __ptext7:	
  2906 ;; *************** function _init_int *****************
  2907 ;; Defined at:
  2908 ;;		line 13 in file "config.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;		None
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;		None
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, status,2
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2926 ;;Total ram usage:        0 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    1
  2929 ;; This function calls:
  2930 ;;		Nothing
  2931 ;; This function is called by:
  2932 ;;		_main
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           
  2937                           ;psect for function _init_int
  2938  049F                     _init_int:	
  2939                           
  2940                           ;config.c: 18: T0CON0=0b00000000;
  2941                           
  2942                           ;incstack = 0
  2943                           ; Regs used in _init_int: [wreg+status,2]
  2944  049F  0020               	movlb	0	; select bank0
  2945  04A0  019E               	clrf	30	;volatile
  2946                           
  2947                           ;config.c: 19: T0CON1=0b01001111;
  2948  04A1  304F               	movlw	79
  2949  04A2  009F               	movwf	31	;volatile
  2950                           
  2951                           ;config.c: 21: T0CON0bits.T0EN=0;
  2952  04A3  139E               	bcf	30,7	;volatile
  2953                           
  2954                           ;config.c: 22: TMR0L=0X00;
  2955  04A4  019C               	clrf	28	;volatile
  2956                           
  2957                           ;config.c: 23: TMR0H=0Xf3;
  2958  04A5  30F3               	movlw	243
  2959  04A6  009D               	movwf	29	;volatile
  2960                           
  2961                           ;config.c: 25: INTCONbits.GIE=1;
  2962  04A7  178B               	bsf	11,7	;volatile
  2963                           
  2964                           ;config.c: 26: PIE0bits.TMR0IE=1;
  2965  04A8  002E               	movlb	14	; select bank14
  2966  04A9  1696               	bsf	22,5	;volatile
  2967                           
  2968                           ;config.c: 28: T0CON0bits.T0EN=0;
  2969  04AA  0020               	movlb	0	; select bank0
  2970  04AB  139E               	bcf	30,7	;volatile
  2971  04AC  0008               	return
  2972  04AD                     __end_of_init_int:	
  2973                           
  2974                           	psect	text8
  2975  0428                     __ptext8:	
  2976 ;; *************** function _Lcd_Write_String *****************
  2977 ;; Defined at:
  2978 ;;		line 102 in file "lcd.h"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  a               2    6[COMMON] PTR unsigned char 
  2981 ;;		 -> STR_12(6), STR_11(6), STR_10(5), STR_9(6), 
  2982 ;;		 -> STR_8(5), STR_7(6), STR_6(3), STR_5(2), 
  2983 ;;		 -> STR_4(3), buffer_min(3), buffer_sec(3), STR_1(5), 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  i               2    9[COMMON] int 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  1    wreg      void 
  2988 ;; Registers used:
  2989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2995 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2996 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2998 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2999 ;;Total ram usage:        5 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    3
  3002 ;; This function calls:
  3003 ;;		_Lcd_Write_Char
  3004 ;; This function is called by:
  3005 ;;		_main
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           
  3010                           ;psect for function _Lcd_Write_String
  3011  0428                     _Lcd_Write_String:	
  3012                           
  3013                           ;lcd.h: 104: int i;
  3014                           ;lcd.h: 105: for(i=0;a[i]!='\0';i++)
  3015                           
  3016                           ;incstack = 0
  3017                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3018  0428  01F9               	clrf	Lcd_Write_String@i
  3019  0429  01FA               	clrf	Lcd_Write_String@i+1
  3020  042A                     l1257:	
  3021  042A  0876               	movf	Lcd_Write_String@a,w
  3022  042B  0779               	addwf	Lcd_Write_String@i,w
  3023  042C  0084               	movwf	4
  3024  042D  0877               	movf	Lcd_Write_String@a+1,w
  3025  042E  3D7A               	addwfc	Lcd_Write_String@i+1,w
  3026  042F  0085               	movwf	5
  3027  0430  0012               	moviw fsr0++
  3028  0431  1903               	btfsc	3,2
  3029  0432  0008               	return
  3030                           
  3031                           ;lcd.h: 106: Lcd_Write_Char(a[i]);
  3032  0433  0876               	movf	Lcd_Write_String@a,w
  3033  0434  0779               	addwf	Lcd_Write_String@i,w
  3034  0435  0084               	movwf	4
  3035  0436  0877               	movf	Lcd_Write_String@a+1,w
  3036  0437  3D7A               	addwfc	Lcd_Write_String@i+1,w
  3037  0438  0085               	movwf	5
  3038  0439  0800               	movf	0,w	;code access
  3039  043A  3183  23E1  3184   	fcall	_Lcd_Write_Char
  3040  043D  3001               	movlw	1
  3041  043E  07F9               	addwf	Lcd_Write_String@i,f
  3042  043F  3000               	movlw	0
  3043  0440  3DFA               	addwfc	Lcd_Write_String@i+1,f
  3044  0441  2C2A               	goto	l1257
  3045  0442                     __end_of_Lcd_Write_String:	
  3046                           
  3047                           	psect	text9
  3048  03E1                     __ptext9:	
  3049 ;; *************** function _Lcd_Write_Char *****************
  3050 ;; Defined at:
  3051 ;;		line 86 in file "lcd.h"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  a               1    wreg     unsigned char 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  a               1    5[COMMON] unsigned char 
  3056 ;;  y               1    4[COMMON] unsigned char 
  3057 ;;  temp            1    3[COMMON] unsigned char 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0, pclath, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3068 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3069 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3070 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3071 ;;Total ram usage:        4 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    2
  3074 ;; This function calls:
  3075 ;;		_Lcd_Port
  3076 ;; This function is called by:
  3077 ;;		_Lcd_Write_String
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           
  3082                           ;psect for function _Lcd_Write_Char
  3083  03E1                     _Lcd_Write_Char:	
  3084                           
  3085                           ;incstack = 0
  3086                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3087                           ;Lcd_Write_Char@a stored from wreg
  3088  03E1  00F5               	movwf	Lcd_Write_Char@a
  3089                           
  3090                           ;lcd.h: 88: char temp,y;
  3091                           ;lcd.h: 89: temp = a&0x0F;
  3092  03E2  0875               	movf	Lcd_Write_Char@a,w
  3093  03E3  390F               	andlw	15
  3094  03E4  00F2               	movwf	??_Lcd_Write_Char
  3095  03E5  0872               	movf	??_Lcd_Write_Char,w
  3096  03E6  00F3               	movwf	Lcd_Write_Char@temp
  3097                           
  3098                           ;lcd.h: 90: y = a&0xF0;
  3099  03E7  0875               	movf	Lcd_Write_Char@a,w
  3100  03E8  39F0               	andlw	240
  3101  03E9  00F2               	movwf	??_Lcd_Write_Char
  3102  03EA  0872               	movf	??_Lcd_Write_Char,w
  3103  03EB  00F4               	movwf	Lcd_Write_Char@y
  3104                           
  3105                           ;lcd.h: 91: RC3 = 1;
  3106  03EC  0020               	movlb	0	; select bank0
  3107  03ED  158E               	bsf	14,3	;volatile
  3108                           
  3109                           ;lcd.h: 92: Lcd_Port(y>>4);
  3110  03EE  0874               	movf	Lcd_Write_Char@y,w
  3111  03EF  00F2               	movwf	??_Lcd_Write_Char
  3112  03F0  3004               	movlw	4
  3113  03F1                     u605:	
  3114  03F1  36F2               	lsrf	??_Lcd_Write_Char,f
  3115  03F2  0B89               	decfsz	9,f
  3116  03F3  2BF1               	goto	u605
  3117  03F4  0872               	movf	??_Lcd_Write_Char,w
  3118  03F5  3184  2442  3183   	fcall	_Lcd_Port
  3119                           
  3120                           ;lcd.h: 93: RC4 = 1;
  3121  03F8  0020               	movlb	0	; select bank0
  3122  03F9  160E               	bsf	14,4	;volatile
  3123                           
  3124                           ;lcd.h: 94: _delay((unsigned long)((40)*(32000000/4000000.0)));
  3125  03FA  306A               	movlw	106
  3126  03FB                     u1177:	
  3127  03FB  0B89               	decfsz	9,f
  3128  03FC  2BFB               	goto	u1177
  3129  03FD  3200               	nop2
  3130                           
  3131                           ;lcd.h: 95: RC4 = 0;
  3132  03FE  0020               	movlb	0	; select bank0
  3133  03FF  120E               	bcf	14,4	;volatile
  3134                           
  3135                           ;lcd.h: 96: Lcd_Port(temp);
  3136  0400  0873               	movf	Lcd_Write_Char@temp,w
  3137  0401  3184  2442  3183   	fcall	_Lcd_Port
  3138                           
  3139                           ;lcd.h: 97: RC4 = 1;
  3140  0404  0020               	movlb	0	; select bank0
  3141  0405  160E               	bsf	14,4	;volatile
  3142                           
  3143                           ;lcd.h: 98: _delay((unsigned long)((40)*(32000000/4000000.0)));
  3144  0406  306A               	movlw	106
  3145  0407                     u1187:	
  3146  0407  0B89               	decfsz	9,f
  3147  0408  2C07               	goto	u1187
  3148  0409  3200               	nop2
  3149                           
  3150                           ;lcd.h: 99: RC4 = 0;
  3151  040A  0020               	movlb	0	; select bank0
  3152  040B  120E               	bcf	14,4	;volatile
  3153  040C  0008               	return
  3154  040D                     __end_of_Lcd_Write_Char:	
  3155                           
  3156                           	psect	text10
  3157  0340                     __ptext10:	
  3158 ;; *************** function _Lcd_Set_Cursor *****************
  3159 ;; Defined at:
  3160 ;;		line 46 in file "lcd.h"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  a               1    wreg     unsigned char 
  3163 ;;  b               1    4[COMMON] unsigned char 
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  a               1    7[COMMON] unsigned char 
  3166 ;;  temp            1   10[COMMON] unsigned char 
  3167 ;;  y               1    9[COMMON] unsigned char 
  3168 ;;  z               1    8[COMMON] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0, pclath, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3178 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3179 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3182 ;;Total ram usage:        7 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    3
  3185 ;; This function calls:
  3186 ;;		_Lcd_Cmd
  3187 ;; This function is called by:
  3188 ;;		_main
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function _Lcd_Set_Cursor
  3194  0340                     _Lcd_Set_Cursor:	
  3195                           
  3196                           ;incstack = 0
  3197                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3198                           ;Lcd_Set_Cursor@a stored from wreg
  3199  0340  00F7               	movwf	Lcd_Set_Cursor@a
  3200                           
  3201                           ;lcd.h: 48: char temp,z,y;
  3202                           ;lcd.h: 49: if(a == 1)
  3203  0341  0377               	decf	Lcd_Set_Cursor@a,w
  3204  0342  1D03               	btfss	3,2
  3205  0343  2B60               	goto	l1231
  3206                           
  3207                           ;lcd.h: 50: {
  3208                           ;lcd.h: 51: temp = 0x80 + b - 1;
  3209  0344  0874               	movf	Lcd_Set_Cursor@b,w
  3210  0345  3E7F               	addlw	127
  3211  0346  00F5               	movwf	??_Lcd_Set_Cursor
  3212  0347  0875               	movf	??_Lcd_Set_Cursor,w
  3213  0348  00FA               	movwf	Lcd_Set_Cursor@temp
  3214                           
  3215                           ;lcd.h: 52: z = temp>>4;
  3216  0349  087A               	movf	Lcd_Set_Cursor@temp,w
  3217  034A  00F5               	movwf	??_Lcd_Set_Cursor
  3218  034B  3004               	movlw	4
  3219  034C                     u815:	
  3220  034C  36F5               	lsrf	??_Lcd_Set_Cursor,f
  3221  034D  0B89               	decfsz	9,f
  3222  034E  2B4C               	goto	u815
  3223  034F  0875               	movf	??_Lcd_Set_Cursor,w
  3224  0350  00F6               	movwf	??_Lcd_Set_Cursor+1
  3225  0351  0876               	movf	??_Lcd_Set_Cursor+1,w
  3226  0352  00F8               	movwf	Lcd_Set_Cursor@z
  3227                           
  3228                           ;lcd.h: 53: y = temp & 0x0F;
  3229  0353  087A               	movf	Lcd_Set_Cursor@temp,w
  3230  0354  390F               	andlw	15
  3231  0355  00F5               	movwf	??_Lcd_Set_Cursor
  3232  0356  0875               	movf	??_Lcd_Set_Cursor,w
  3233  0357  00F9               	movwf	Lcd_Set_Cursor@y
  3234                           
  3235                           ;lcd.h: 54: Lcd_Cmd(z);
  3236  0358  0878               	movf	Lcd_Set_Cursor@z,w
  3237  0359  3184  246E  3183   	fcall	_Lcd_Cmd
  3238                           
  3239                           ;lcd.h: 55: Lcd_Cmd(y);
  3240  035C  0879               	movf	Lcd_Set_Cursor@y,w
  3241  035D  3184  246E         	fcall	_Lcd_Cmd
  3242                           
  3243                           ;lcd.h: 56: }
  3244  035F  0008               	return
  3245  0360                     l1231:	
  3246                           
  3247                           ;lcd.h: 57: else if(a == 2)
  3248  0360  3002               	movlw	2
  3249  0361  0677               	xorwf	Lcd_Set_Cursor@a,w
  3250  0362  1D03               	btfss	3,2
  3251  0363  0008               	return
  3252                           
  3253                           ;lcd.h: 58: {
  3254                           ;lcd.h: 59: temp = 0xC0 + b - 1;
  3255  0364  0874               	movf	Lcd_Set_Cursor@b,w
  3256  0365  3EBF               	addlw	191
  3257  0366  00F5               	movwf	??_Lcd_Set_Cursor
  3258  0367  0875               	movf	??_Lcd_Set_Cursor,w
  3259  0368  00FA               	movwf	Lcd_Set_Cursor@temp
  3260                           
  3261                           ;lcd.h: 60: z = temp>>4;
  3262  0369  087A               	movf	Lcd_Set_Cursor@temp,w
  3263  036A  00F5               	movwf	??_Lcd_Set_Cursor
  3264  036B  3004               	movlw	4
  3265  036C                     u835:	
  3266  036C  36F5               	lsrf	??_Lcd_Set_Cursor,f
  3267  036D  0B89               	decfsz	9,f
  3268  036E  2B6C               	goto	u835
  3269  036F  0875               	movf	??_Lcd_Set_Cursor,w
  3270  0370  00F6               	movwf	??_Lcd_Set_Cursor+1
  3271  0371  0876               	movf	??_Lcd_Set_Cursor+1,w
  3272  0372  00F8               	movwf	Lcd_Set_Cursor@z
  3273                           
  3274                           ;lcd.h: 61: y = temp & 0x0F;
  3275  0373  087A               	movf	Lcd_Set_Cursor@temp,w
  3276  0374  390F               	andlw	15
  3277  0375  00F5               	movwf	??_Lcd_Set_Cursor
  3278  0376  0875               	movf	??_Lcd_Set_Cursor,w
  3279  0377  00F9               	movwf	Lcd_Set_Cursor@y
  3280                           
  3281                           ;lcd.h: 62: Lcd_Cmd(z);
  3282  0378  0878               	movf	Lcd_Set_Cursor@z,w
  3283  0379  3184  246E  3183   	fcall	_Lcd_Cmd
  3284                           
  3285                           ;lcd.h: 63: Lcd_Cmd(y);
  3286  037C  0879               	movf	Lcd_Set_Cursor@y,w
  3287  037D  3184  246E         	fcall	_Lcd_Cmd
  3288  037F  0008               	return
  3289  0380                     __end_of_Lcd_Set_Cursor:	
  3290                           
  3291                           	psect	text11
  3292  02FF                     __ptext11:	
  3293 ;; *************** function _Lcd_Init *****************
  3294 ;; Defined at:
  3295 ;;		line 67 in file "lcd.h"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;		None
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;		None
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      void 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0, pclath, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3311 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3313 ;;Total ram usage:        1 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    3
  3316 ;; This function calls:
  3317 ;;		_Lcd_Cmd
  3318 ;;		_Lcd_Port
  3319 ;; This function is called by:
  3320 ;;		_main
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           
  3325                           ;psect for function _Lcd_Init
  3326  02FF                     _Lcd_Init:	
  3327                           
  3328                           ;lcd.h: 69: Lcd_Port(0x00);
  3329                           
  3330                           ;incstack = 0
  3331                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3332  02FF  3000               	movlw	0
  3333  0300  3184  2442  3182   	fcall	_Lcd_Port
  3334                           
  3335                           ;lcd.h: 70: _delay((unsigned long)((20)*(32000000/4000.0)));
  3336  0303  30D0               	movlw	208
  3337  0304  00F4               	movwf	??_Lcd_Init
  3338  0305  30CA               	movlw	202
  3339  0306                     u1197:	
  3340  0306  0B89               	decfsz	9,f
  3341  0307  2B06               	goto	u1197
  3342  0308  0BF4               	decfsz	??_Lcd_Init,f
  3343  0309  2B06               	goto	u1197
  3344                           
  3345                           ;lcd.h: 71: Lcd_Cmd(0x03);
  3346  030A  3003               	movlw	3
  3347  030B  3184  246E  3182   	fcall	_Lcd_Cmd
  3348                           
  3349                           ;lcd.h: 72: _delay((unsigned long)((5)*(32000000/4000.0)));
  3350  030E  3034               	movlw	52
  3351  030F  00F4               	movwf	??_Lcd_Init
  3352  0310  30F2               	movlw	242
  3353  0311                     u1207:	
  3354  0311  0B89               	decfsz	9,f
  3355  0312  2B11               	goto	u1207
  3356  0313  0BF4               	decfsz	??_Lcd_Init,f
  3357  0314  2B11               	goto	u1207
  3358                           
  3359                           ;lcd.h: 73: Lcd_Cmd(0x03);
  3360  0315  3003               	movlw	3
  3361  0316  3184  246E  3182   	fcall	_Lcd_Cmd
  3362                           
  3363                           ;lcd.h: 74: _delay((unsigned long)((11)*(32000000/4000.0)));
  3364  0319  3073               	movlw	115
  3365  031A  00F4               	movwf	??_Lcd_Init
  3366  031B  3048               	movlw	72
  3367  031C                     u1217:	
  3368  031C  0B89               	decfsz	9,f
  3369  031D  2B1C               	goto	u1217
  3370  031E  0BF4               	decfsz	??_Lcd_Init,f
  3371  031F  2B1C               	goto	u1217
  3372                           
  3373                           ;lcd.h: 75: Lcd_Cmd(0x03);
  3374  0320  3003               	movlw	3
  3375  0321  3184  246E  3182   	fcall	_Lcd_Cmd
  3376                           
  3377                           ;lcd.h: 77: Lcd_Cmd(0x02);
  3378  0324  3002               	movlw	2
  3379  0325  3184  246E  3182   	fcall	_Lcd_Cmd
  3380                           
  3381                           ;lcd.h: 78: Lcd_Cmd(0x02);
  3382  0328  3002               	movlw	2
  3383  0329  3184  246E  3182   	fcall	_Lcd_Cmd
  3384                           
  3385                           ;lcd.h: 79: Lcd_Cmd(0x08);
  3386  032C  3008               	movlw	8
  3387  032D  3184  246E  3182   	fcall	_Lcd_Cmd
  3388                           
  3389                           ;lcd.h: 80: Lcd_Cmd(0x00);
  3390  0330  3000               	movlw	0
  3391  0331  3184  246E  3182   	fcall	_Lcd_Cmd
  3392                           
  3393                           ;lcd.h: 81: Lcd_Cmd(0x0C);
  3394  0334  300C               	movlw	12
  3395  0335  3184  246E  3182   	fcall	_Lcd_Cmd
  3396                           
  3397                           ;lcd.h: 82: Lcd_Cmd(0x00);
  3398  0338  3000               	movlw	0
  3399  0339  3184  246E  3182   	fcall	_Lcd_Cmd
  3400                           
  3401                           ;lcd.h: 83: Lcd_Cmd(0x06);
  3402  033C  3006               	movlw	6
  3403  033D  3184  246E         	fcall	_Lcd_Cmd
  3404  033F  0008               	return
  3405  0340                     __end_of_Lcd_Init:	
  3406                           
  3407                           	psect	text12
  3408  04AD                     __ptext12:	
  3409 ;; *************** function _Lcd_Clear *****************
  3410 ;; Defined at:
  3411 ;;		line 40 in file "lcd.h"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;		None
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  2   54[None  ] int 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0, pclath, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3429 ;;Total ram usage:        0 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    3
  3432 ;; This function calls:
  3433 ;;		_Lcd_Cmd
  3434 ;; This function is called by:
  3435 ;;		_main
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           
  3440                           ;psect for function _Lcd_Clear
  3441  04AD                     _Lcd_Clear:	
  3442                           
  3443                           ;lcd.h: 42: Lcd_Cmd(0);
  3444                           
  3445                           ;incstack = 0
  3446                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3447  04AD  3000               	movlw	0
  3448  04AE  3184  246E  3184   	fcall	_Lcd_Cmd
  3449                           
  3450                           ;lcd.h: 43: Lcd_Cmd(1);
  3451  04B1  3001               	movlw	1
  3452  04B2  3184  246E         	fcall	_Lcd_Cmd
  3453  04B4  0008               	return
  3454  04B5                     __end_of_Lcd_Clear:	
  3455                           
  3456                           	psect	text13
  3457  046E                     __ptext13:	
  3458 ;; *************** function _Lcd_Cmd *****************
  3459 ;; Defined at:
  3460 ;;		line 31 in file "lcd.h"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;  a               1    wreg     unsigned char 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  a               1    3[COMMON] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      void 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0, pclath, cstack
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3475 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3476 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3477 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3478 ;;Total ram usage:        2 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    2
  3481 ;; This function calls:
  3482 ;;		_Lcd_Port
  3483 ;; This function is called by:
  3484 ;;		_Lcd_Clear
  3485 ;;		_Lcd_Set_Cursor
  3486 ;;		_Lcd_Init
  3487 ;;		_Lcd_Shift_Right
  3488 ;;		_Lcd_Shift_Left
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           
  3493                           ;psect for function _Lcd_Cmd
  3494  046E                     _Lcd_Cmd:	
  3495                           
  3496                           ;incstack = 0
  3497                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3498                           ;Lcd_Cmd@a stored from wreg
  3499  046E  00F3               	movwf	Lcd_Cmd@a
  3500                           
  3501                           ;lcd.h: 33: RC3 = 0;
  3502  046F  0020               	movlb	0	; select bank0
  3503  0470  118E               	bcf	14,3	;volatile
  3504                           
  3505                           ;lcd.h: 34: Lcd_Port(a);
  3506  0471  0873               	movf	Lcd_Cmd@a,w
  3507  0472  3184  2442  3184   	fcall	_Lcd_Port
  3508                           
  3509                           ;lcd.h: 35: RC4 = 1;
  3510  0475  0020               	movlb	0	; select bank0
  3511  0476  160E               	bsf	14,4	;volatile
  3512                           
  3513                           ;lcd.h: 36: _delay((unsigned long)((4)*(32000000/4000.0)));
  3514  0477  302A               	movlw	42
  3515  0478  00F2               	movwf	??_Lcd_Cmd
  3516  0479  308E               	movlw	142
  3517  047A                     u1227:	
  3518  047A  0B89               	decfsz	9,f
  3519  047B  2C7A               	goto	u1227
  3520  047C  0BF2               	decfsz	??_Lcd_Cmd,f
  3521  047D  2C7A               	goto	u1227
  3522                           
  3523                           ;lcd.h: 37: RC4 = 0;
  3524  047E  0020               	movlb	0	; select bank0
  3525  047F  120E               	bcf	14,4	;volatile
  3526  0480  0008               	return
  3527  0481                     __end_of_Lcd_Cmd:	
  3528                           
  3529                           	psect	text14
  3530  0442                     __ptext14:	
  3531 ;; *************** function _Lcd_Port *****************
  3532 ;; Defined at:
  3533 ;;		line 9 in file "lcd.h"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  a               1    wreg     unsigned char 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  a               1    1[COMMON] unsigned char 
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  1    wreg      void 
  3540 ;; Registers used:
  3541 ;;		wreg
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3551 ;;Total ram usage:        1 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; Hardware stack levels required when called:    1
  3554 ;; This function calls:
  3555 ;;		Nothing
  3556 ;; This function is called by:
  3557 ;;		_Lcd_Cmd
  3558 ;;		_Lcd_Init
  3559 ;;		_Lcd_Write_Char
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           
  3564                           ;psect for function _Lcd_Port
  3565  0442                     _Lcd_Port:	
  3566                           
  3567                           ;incstack = 0
  3568                           ; Regs used in _Lcd_Port: [wreg]
  3569                           ;Lcd_Port@a stored from wreg
  3570  0442  00F1               	movwf	Lcd_Port@a
  3571                           
  3572                           ;lcd.h: 11: if(a & 1)
  3573  0443  1C71               	btfss	Lcd_Port@a,0
  3574  0444  2C48               	goto	l41
  3575                           
  3576                           ;lcd.h: 12: RC5 = 1;
  3577  0445  0020               	movlb	0	; select bank0
  3578  0446  168E               	bsf	14,5	;volatile
  3579  0447  2C4A               	goto	l1103
  3580  0448                     l41:	
  3581                           
  3582                           ;lcd.h: 13: else
  3583                           ;lcd.h: 14: RC5 = 0;
  3584  0448  0020               	movlb	0	; select bank0
  3585  0449  128E               	bcf	14,5	;volatile
  3586  044A                     l1103:	
  3587                           
  3588                           ;lcd.h: 16: if(a & 2)
  3589  044A  1CF1               	btfss	Lcd_Port@a,1
  3590  044B  2C4E               	goto	l43
  3591                           
  3592                           ;lcd.h: 17: RC6 = 1;
  3593  044C  170E               	bsf	14,6	;volatile
  3594  044D  2C4F               	goto	l1107
  3595  044E                     l43:	
  3596                           
  3597                           ;lcd.h: 18: else
  3598                           ;lcd.h: 19: RC6 = 0;
  3599  044E  130E               	bcf	14,6	;volatile
  3600  044F                     l1107:	
  3601                           
  3602                           ;lcd.h: 21: if(a & 4)
  3603  044F  1D71               	btfss	Lcd_Port@a,2
  3604  0450  2C53               	goto	l45
  3605                           
  3606                           ;lcd.h: 22: RC2 = 1;
  3607  0451  150E               	bsf	14,2	;volatile
  3608  0452  2C54               	goto	l1111
  3609  0453                     l45:	
  3610                           
  3611                           ;lcd.h: 23: else
  3612                           ;lcd.h: 24: RC2 = 0;
  3613  0453  110E               	bcf	14,2	;volatile
  3614  0454                     l1111:	
  3615                           
  3616                           ;lcd.h: 26: if(a & 8)
  3617  0454  1DF1               	btfss	Lcd_Port@a,3
  3618  0455  2C58               	goto	l47
  3619                           
  3620                           ;lcd.h: 27: RC7 = 1;
  3621  0456  178E               	bsf	14,7	;volatile
  3622  0457  0008               	return
  3623  0458                     l47:	
  3624                           
  3625                           ;lcd.h: 28: else
  3626                           ;lcd.h: 29: RC7 = 0;
  3627  0458  138E               	bcf	14,7	;volatile
  3628  0459  0008               	return
  3629  045A                     __end_of_Lcd_Port:	
  3630                           
  3631                           	psect	intentry
  3632  0004                     __pintentry:	
  3633 ;; *************** function _timer *****************
  3634 ;; Defined at:
  3635 ;;		line 136 in file "main.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;		None
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;		None
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      void 
  3642 ;; Registers used:
  3643 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3651 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3652 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3653 ;;Total ram usage:        1 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		Interrupt level 1
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662  0004                     _timer:	
  3663                           
  3664                           ;incstack = 0
  3665  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3666                           
  3667                           ; Regs used in _timer: [wreg-fsr0h+status,2+status,0]
  3668  0005  3180               	pagesel	$
  3669  0006  0020               	movlb	0	; select bank0
  3670  0007  087F               	movf	127,w
  3671  0008  00F0               	movwf	??_timer
  3672                           
  3673                           ;main.c: 138: PIR0bits.TMR0IF=0;
  3674  0009  002E               	movlb	14	; select bank14
  3675  000A  128C               	bcf	12,5	;volatile
  3676                           
  3677                           ;main.c: 139: T0CON0bits.T0EN=0;
  3678  000B  0020               	movlb	0	; select bank0
  3679  000C  139E               	bcf	30,7	;volatile
  3680                           
  3681                           ;main.c: 141: switch (flag)
  3682  000D  2818               	goto	i1l1481
  3683  000E                     i1l115:	
  3684                           ;main.c: 142: {
  3685                           ;main.c: 143: case 0:
  3686                           
  3687                           
  3688                           ;main.c: 144: LATAbits.LATA5=1;
  3689  000E  1696               	bsf	22,5	;volatile
  3690                           
  3691                           ;main.c: 145: flag=1;
  3692  000F  3001               	movlw	1
  3693  0010  00BD               	movwf	_flag
  3694  0011  3000               	movlw	0
  3695  0012  00BE               	movwf	_flag+1
  3696                           
  3697                           ;main.c: 146: break;
  3698  0013  2825               	goto	i1l1483
  3699  0014                     i1l117:	
  3700                           ;main.c: 147: case 1:
  3701                           
  3702                           
  3703                           ;main.c: 148: LATAbits.LATA5=0;
  3704  0014  1296               	bcf	22,5	;volatile
  3705                           
  3706                           ;main.c: 149: flag=0;
  3707  0015  01BD               	clrf	_flag
  3708  0016  01BE               	clrf	_flag+1
  3709                           
  3710                           ;main.c: 151: }
  3711                           
  3712                           ;main.c: 150: break;
  3713  0017  2825               	goto	i1l1483
  3714  0018                     i1l1481:	
  3715                           
  3716                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3717                           ; Switch size 1, requested type "space"
  3718                           ; Number of cases is 1, Range of values is 0 to 0
  3719                           ; switch strategies available:
  3720                           ; Name         Instructions Cycles
  3721                           ; simple_byte            4     3 (average)
  3722                           ; direct_byte            8     6 (fixed)
  3723                           ; jumptable            260     6 (fixed)
  3724                           ;	Chosen strategy is simple_byte
  3725  0018  083E               	movf	_flag+1,w
  3726  0019  3A00               	xorlw	0	; case 0
  3727  001A  1903               	skipnz
  3728  001B  281D               	goto	i1l1529
  3729  001C  2825               	goto	i1l1483
  3730  001D                     i1l1529:	
  3731                           
  3732                           ; Switch size 1, requested type "space"
  3733                           ; Number of cases is 2, Range of values is 0 to 1
  3734                           ; switch strategies available:
  3735                           ; Name         Instructions Cycles
  3736                           ; simple_byte            7     4 (average)
  3737                           ; direct_byte           10     6 (fixed)
  3738                           ; jumptable            260     6 (fixed)
  3739                           ;	Chosen strategy is simple_byte
  3740  001D  083D               	movf	_flag,w
  3741  001E  3A00               	xorlw	0	; case 0
  3742  001F  1903               	skipnz
  3743  0020  280E               	goto	i1l115
  3744  0021  3A01               	xorlw	1	; case 1
  3745  0022  1903               	skipnz
  3746  0023  2814               	goto	i1l117
  3747  0024  2825               	goto	i1l1483
  3748  0025                     i1l1483:	
  3749                           
  3750                           ;main.c: 152: sec--;
  3751  0025  30FF               	movlw	255
  3752  0026  07B7               	addwf	_sec,f
  3753  0027  30FF               	movlw	255
  3754  0028  3DB8               	addwfc	_sec+1,f
  3755                           
  3756                           ;main.c: 154: if(sec<0)
  3757  0029  1FB8               	btfss	_sec+1,7
  3758  002A  283F               	goto	i1l1499
  3759                           
  3760                           ;main.c: 155: {
  3761                           ;main.c: 156: sec=59;
  3762  002B  303B               	movlw	59
  3763  002C  00B7               	movwf	_sec
  3764  002D  3000               	movlw	0
  3765  002E  00B8               	movwf	_sec+1
  3766                           
  3767                           ;main.c: 157: min--;
  3768  002F  30FF               	movlw	255
  3769  0030  07B9               	addwf	_min,f
  3770  0031  30FF               	movlw	255
  3771  0032  3DBA               	addwfc	_min+1,f
  3772                           
  3773                           ;main.c: 158: if(min<0)
  3774  0033  1FBA               	btfss	_min+1,7
  3775  0034  283F               	goto	i1l1499
  3776                           
  3777                           ;main.c: 159: {
  3778                           ;main.c: 160: T0CON0bits.T0EN=0;
  3779  0035  139E               	bcf	30,7	;volatile
  3780                           
  3781                           ;main.c: 161: LATCbits.LATC1=1;
  3782  0036  1498               	bsf	24,1	;volatile
  3783                           
  3784                           ;main.c: 162: idle=1;
  3785  0037  3001               	movlw	1
  3786  0038  00BB               	movwf	_idle
  3787  0039  3000               	movlw	0
  3788  003A  00BC               	movwf	_idle+1
  3789                           
  3790                           ;main.c: 163: sec=0;
  3791  003B  01B7               	clrf	_sec
  3792  003C  01B8               	clrf	_sec+1
  3793                           
  3794                           ;main.c: 164: min=0;
  3795  003D  01B9               	clrf	_min
  3796  003E  01BA               	clrf	_min+1
  3797  003F                     i1l1499:	
  3798                           
  3799                           ;main.c: 165: }
  3800                           ;main.c: 166: }
  3801                           ;main.c: 168: TMR0L=0X00;
  3802  003F  019C               	clrf	28	;volatile
  3803                           
  3804                           ;main.c: 169: if(min>=0)
  3805  0040  1FBA               	btfss	_min+1,7
  3806                           
  3807                           ;main.c: 170: T0CON0bits.T0EN=1;
  3808  0041  179E               	bsf	30,7	;volatile
  3809  0042  0870               	movf	??_timer,w
  3810  0043  00FF               	movwf	127
  3811  0044  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3812  0045  0009               	retfie
  3813  0046                     __end_of_timer:	
  3814  007E                     btemp	set	126	;btemp
  3815  007E                     int$flags	set	126
  3816  007E                     wtemp0	set	126


Data Sizes:
    Strings     28
    Constant    10
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     23      37
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), STR_2(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 3
		 -> buffer_min(BANK0[3]), buffer_sec(BANK0[3]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 6
		 -> STR_12(CODE[6]), STR_11(CODE[6]), STR_10(CODE[5]), STR_9(CODE[6]), 
		 -> STR_8(CODE[5]), STR_7(CODE[6]), STR_6(CODE[3]), STR_5(CODE[2]), 
		 -> STR_4(CODE[3]), buffer_min(BANK0[3]), buffer_sec(BANK0[3]), STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _timer in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _timer in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _timer in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _timer in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _timer in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _timer in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _timer in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _timer in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _timer in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _timer in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    3885
                                             19 BANK0      4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           _init_int
                     _initial_config
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    21      4    1709
                                              2 BANK0     17    13      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     198
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _initial_config                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_int                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     5     3      2     904
                                              6 COMMON     5     3      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              2 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     963
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              4 COMMON     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              2 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _timer                                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _init_int
   _initial_config
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      25       5       46.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      32      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      32      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat May 26 15:20:56 2018

              __CFG_CP$OFF 0000                         l41 0448                         l43 044E  
                       l45 0453                         l47 0458        ___wmul@multiplicand 0073  
              __CFG_LVP$ON 0000                        l195 0276                        l288 0415  
                      _RB0 0068                        _RB1 0069                        _RB2 006A  
                      _RB3 006B                        _RC2 0072                        _RC3 0073  
                      _RC4 0074                        _RC5 0075                        _RC6 0076  
                      _RC7 0077               __CFG_CPD$OFF 0000                        u605 03F1  
                      u705 0395                        u715 039F                        u725 03A7  
                      u645 0416                        u815 034C                        u655 041B  
                      u905 0260                        u835 036C                        u755 03BE  
                      u685 038B                        u775 03CD                        u785 03D4  
                      u945 0285                        _min 0039                        _sec 0037  
             __CFG_BORV$LO 0000                        wreg 0009           ??_initial_config 0071  
             __CFG_ZCD$OFF 0000                       l1111 0454                       l1103 044A  
                     l1107 044F                       l1211 03D3                       l1205 03BB  
                     l1231 0360                       l1207 03C7                       l1215 03DC  
                     l1153 049D                       l1331 026A                       l1307 0216  
                     l1181 0388                       l1341 0295                       l1325 024B  
                     l1309 022E                       l1183 0394                       l1159 040F  
                     l1343 0299                       l1319 0245                       l1257 042A  
                     l1193 03AF                       l1425 0106                       l1363 02BF  
                     l1355 02BB                       l1339 0292                       l1291 01D8  
                     l1427 00DB                       l1189 03A6                       l1349 02AC  
                     l1365 01B5                       l1445 0151                       l1429 0113  
                     l1367 02F9                       l1471 01A2                       l1463 0195  
                     l1391 0078                       l1297 01E8                       l1459 0182  
                     STR_1 04C1                       STR_2 04CB                       STR_3 04CB  
                     STR_4 048E                       STR_5 04CF                       STR_6 048E  
                     STR_7 048B                       STR_8 04C1                       STR_9 048B  
                     u1117 010C                       u1207 0311                       u1127 0119  
                     u1217 031C                       u1137 0148                       u1227 047A  
                     u1147 017B                       u1157 018F                       _LATA 0016  
                     _LATB 0017                       u1167 01A8                       _LATC 0018  
                     u1177 03FB                       u1187 0407                       u1197 0306  
              main@counter 0035               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0076  
                     _flag 003D                       _idle 003B                       _main 0053  
                     fsr0h 0005                       fsr1h 0007                       indf0 0000  
                     fsr0l 0004                       indf1 0001                       fsr1l 0006  
                     btemp 007E                       start 0046         ??_Lcd_Write_String 0078  
          __end_of_Lcd_Cmd 0481              __CFG_MCLRE$ON 0000                      ?_main 0070  
                    STR_10 04C6                      STR_11 048B                      STR_12 04B5  
            __CFG_WDTE$OFF 0000            __end_of___lwdiv 03B4                      i1l115 000E  
                    i1l117 0014            __end_of___lwmod 03E1                      _TMR0H 001D  
                    _TMR0L 001C                      _PORTA 000C                      _PORTB 000D  
                    _PORTC 000E    __size_of_Lcd_Set_Cursor 0040                      _TRISA 0011  
                    _TRISB 0012                      _TRISC 0013             __CFG_FCMEN$OFF 0000  
          __end_of_dpowers 048B            __end_of_isdigit 049F                      _timer 0004  
           __CFG_BOREN$OFF 0000                      status 0003                      wtemp0 007E  
          __end_of_sprintf 02FF           __end_of_Lcd_Init 0340             __CFG_CSWEN$OFF 0000  
         __end_of_Lcd_Port 045A            __initialization 0048               __end_of_main 01AF  
                   ??_main 0033         __size_of_Lcd_Clear 0008                     ?_timer 0070  
                   _ANSELA 0F38                     _ANSELB 0F43                     _ANSELC 0F4E  
                   _T0CON0 001E                     _T0CON1 001F                     i1l1529 001D  
                   i1l1481 0018                     i1l1483 0025                     i1l1499 003F  
           __CFG_WDTCCS$SC 0000                  ??_Lcd_Cmd 0072    __size_of_Lcd_Write_Char 002C  
           __CFG_PWRTE$OFF 0000                     ___wmul 040D                  ??___lwdiv 0075  
                ??___lwmod 0020           __end_of_init_int 04AD                  ??_isdigit 0071  
                ??_sprintf 0026            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078    __end_of__initialization 004F  
        __end_of_Lcd_Clear 04B5             __pcstackCOMMON 0070              __end_of_timer 0046  
           _Lcd_Set_Cursor 0340                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
             sprintf@width 002F                    ??_timer 0070                 __pbssBANK0 0037  
               __pmaintext 0053                    ?___wmul 0071                 __pintentry 0004  
__size_of_Lcd_Write_String 001A     __end_of_Lcd_Set_Cursor 0380   __CFG_SCANE$not_available 0000  
               _buffer_min 003F                 _buffer_sec 0042                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0071             _Lcd_Write_Char 03E1                    _Lcd_Cmd 046E  
                ?_init_int 0070            __size_of___wmul 001B                    ___lwdiv 0380  
                  ___lwmod 03B4            __CFG_STVREN$OFF 0000            ?_Lcd_Set_Cursor 0074  
                  __ptext1 01AF                    __ptext2 0491                    __ptext3 040D  
                  __ptext4 03B4                    __ptext5 0380                    __ptext6 045A  
                  __ptext7 049F                    __ptext8 0428                    __ptext9 03E1  
                  _dpowers 0481                    _isdigit 0491                    _sprintf 01AF  
                  clrloop0 04BC     __end_of_Lcd_Write_Char 040D       end_of_initialization 004F  
               ??_init_int 0071    __size_of_initial_config 0014                  Lcd_Port@a 0071  
    __CFG_WDTCPS$WDTCPS_31 0000                  _TRISBbits 0012           __CFG_FEXTOSC$ECH 0000  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0076          Lcd_Write_String@i 0079  
                _Lcd_Clear 04AD             __end_of___wmul 0428           _Lcd_Write_String 0428  
      start_initialization 0048          __size_of_Lcd_Init 0041          __size_of_Lcd_Port 0018  
         __CFG_LPBOREN$OFF 0000                 ?_Lcd_Clear 0070                   ??___wmul 0075  
          Lcd_Write_Char@a 0075            Lcd_Write_Char@y 0074                  ___latbits 0002  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070                sprintf@flag 002C  
           _initial_config 045A                sprintf@prec 002B          __size_of_init_int 000E  
         ___lwdiv@dividend 0073           ??_Lcd_Set_Cursor 0075                   ?___lwdiv 0071  
                 ?___lwmod 0079           __CFG_PPS1WAY$OFF 0000                   ?_isdigit 0070  
         ___lwdiv@quotient 0076       __CFG_RSTOSC$HFINTPLL 0000                   ?_sprintf 0022  
           __size_of_timer 0042     __end_of_initial_config 046E             ___wmul@product 0075  
                 _LATAbits 0016                   _LATCbits 0018                  clear_ram0 04BB  
                 _PIE0bits 0716                   Lcd_Cmd@a 0073                   _PIR0bits 070C  
              ??_Lcd_Clear 0074          ___wmul@multiplier 0071           ??_Lcd_Write_Char 0072  
                 _Lcd_Init 02FF                   _Lcd_Port 0442            ?_initial_config 0070  
 __end_of_Lcd_Write_String 0442           __size_of_Lcd_Cmd 0013           __size_of___lwdiv 0034  
         __size_of___lwmod 002D                _isdigit$584 0071                 sprintf@val 002D  
               _T0CON0bits 001E           __size_of_isdigit 000E            ___lwdiv@divisor 0071  
          ___lwdiv@counter 0078                   __ptext10 0340                   __ptext11 02FF  
                 __ptext12 04AD                   __ptext13 046E                   __ptext14 0442  
         __size_of_sprintf 0150              __size_of_main 015C                   _init_int 049F  
     __CFG_WDTCWS$WDTCWS_7 0000                   int$flags 007E                 _INTCONbits 000B  
                 isdigit@c 0072         Lcd_Write_Char@temp 0073                   intlevel1 0000  
                sprintf@ap 002A                  sprintf@sp 0031           ___lwmod@dividend 007B  
        __CFG_CLKOUTEN$OFF 0000         Lcd_Set_Cursor@temp 007A              __pstringtext1 0481  
            __pstringtext2 04B5              __pstringtext3 04C1              __pstringtext4 04C6  
            __pstringtext5 04CB              __pstringtext6 04CF              __pstringtext7 0000  
                 sprintf@c 0032                   sprintf@f 0022            ___lwmod@divisor 0079  
          ___lwmod@counter 0021  
