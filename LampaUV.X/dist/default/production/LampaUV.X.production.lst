

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat May 26 14:44:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F18855 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  001C                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  008C                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0110                     	;# 
   127  0110                     	;# 
   128  0111                     	;# 
   129  0112                     	;# 
   130  0112                     	;# 
   131  0113                     	;# 
   132  0114                     	;# 
   133  0114                     	;# 
   134  0115                     	;# 
   135  0116                     	;# 
   136  0116                     	;# 
   137  0117                     	;# 
   138  0119                     	;# 
   139  0119                     	;# 
   140  0119                     	;# 
   141  011A                     	;# 
   142  011A                     	;# 
   143  011A                     	;# 
   144  011B                     	;# 
   145  011B                     	;# 
   146  011B                     	;# 
   147  011B                     	;# 
   148  011B                     	;# 
   149  011C                     	;# 
   150  011C                     	;# 
   151  011C                     	;# 
   152  011D                     	;# 
   153  011D                     	;# 
   154  011D                     	;# 
   155  011E                     	;# 
   156  011E                     	;# 
   157  011E                     	;# 
   158  011F                     	;# 
   159  011F                     	;# 
   160  011F                     	;# 
   161  011F                     	;# 
   162  011F                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  018E                     	;# 
   166  018F                     	;# 
   167  0190                     	;# 
   168  0191                     	;# 
   169  0192                     	;# 
   170  0196                     	;# 
   171  0197                     	;# 
   172  0198                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019C                     	;# 
   177  020C                     	;# 
   178  020C                     	;# 
   179  020D                     	;# 
   180  020E                     	;# 
   181  020F                     	;# 
   182  020F                     	;# 
   183  0210                     	;# 
   184  0210                     	;# 
   185  0211                     	;# 
   186  0211                     	;# 
   187  0212                     	;# 
   188  0212                     	;# 
   189  0213                     	;# 
   190  0214                     	;# 
   191  0215                     	;# 
   192  0215                     	;# 
   193  0216                     	;# 
   194  0216                     	;# 
   195  0217                     	;# 
   196  0217                     	;# 
   197  0218                     	;# 
   198  0218                     	;# 
   199  0219                     	;# 
   200  021A                     	;# 
   201  021B                     	;# 
   202  021B                     	;# 
   203  021C                     	;# 
   204  021C                     	;# 
   205  021D                     	;# 
   206  021D                     	;# 
   207  021E                     	;# 
   208  021F                     	;# 
   209  028C                     	;# 
   210  028C                     	;# 
   211  028D                     	;# 
   212  028D                     	;# 
   213  028E                     	;# 
   214  028F                     	;# 
   215  0290                     	;# 
   216  0290                     	;# 
   217  0291                     	;# 
   218  0292                     	;# 
   219  0292                     	;# 
   220  0293                     	;# 
   221  0293                     	;# 
   222  0294                     	;# 
   223  0295                     	;# 
   224  0296                     	;# 
   225  0296                     	;# 
   226  0297                     	;# 
   227  0298                     	;# 
   228  0298                     	;# 
   229  0299                     	;# 
   230  0299                     	;# 
   231  029A                     	;# 
   232  029B                     	;# 
   233  029C                     	;# 
   234  029C                     	;# 
   235  029D                     	;# 
   236  030C                     	;# 
   237  030C                     	;# 
   238  030D                     	;# 
   239  030E                     	;# 
   240  030F                     	;# 
   241  0310                     	;# 
   242  0310                     	;# 
   243  0311                     	;# 
   244  0312                     	;# 
   245  0313                     	;# 
   246  0314                     	;# 
   247  0314                     	;# 
   248  0315                     	;# 
   249  0316                     	;# 
   250  0317                     	;# 
   251  0318                     	;# 
   252  0318                     	;# 
   253  0319                     	;# 
   254  031A                     	;# 
   255  031B                     	;# 
   256  031C                     	;# 
   257  031C                     	;# 
   258  031D                     	;# 
   259  031E                     	;# 
   260  031F                     	;# 
   261  038C                     	;# 
   262  038D                     	;# 
   263  038E                     	;# 
   264  0390                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  040C                     	;# 
   268  040D                     	;# 
   269  040E                     	;# 
   270  040F                     	;# 
   271  0410                     	;# 
   272  0411                     	;# 
   273  0416                     	;# 
   274  0416                     	;# 
   275  0417                     	;# 
   276  0418                     	;# 
   277  0418                     	;# 
   278  0419                     	;# 
   279  041A                     	;# 
   280  041A                     	;# 
   281  041B                     	;# 
   282  041C                     	;# 
   283  041C                     	;# 
   284  041D                     	;# 
   285  041E                     	;# 
   286  041F                     	;# 
   287  048C                     	;# 
   288  048C                     	;# 
   289  048D                     	;# 
   290  048E                     	;# 
   291  048F                     	;# 
   292  048F                     	;# 
   293  0490                     	;# 
   294  0491                     	;# 
   295  0492                     	;# 
   296  0492                     	;# 
   297  0493                     	;# 
   298  0494                     	;# 
   299  0495                     	;# 
   300  0495                     	;# 
   301  0496                     	;# 
   302  0497                     	;# 
   303  0498                     	;# 
   304  0499                     	;# 
   305  049A                     	;# 
   306  049B                     	;# 
   307  049C                     	;# 
   308  049D                     	;# 
   309  050C                     	;# 
   310  050C                     	;# 
   311  050D                     	;# 
   312  050E                     	;# 
   313  050F                     	;# 
   314  050F                     	;# 
   315  0510                     	;# 
   316  0511                     	;# 
   317  0512                     	;# 
   318  0512                     	;# 
   319  0513                     	;# 
   320  0514                     	;# 
   321  0515                     	;# 
   322  0515                     	;# 
   323  0516                     	;# 
   324  0517                     	;# 
   325  0518                     	;# 
   326  0519                     	;# 
   327  051A                     	;# 
   328  051B                     	;# 
   329  051C                     	;# 
   330  051D                     	;# 
   331  058C                     	;# 
   332  058C                     	;# 
   333  058D                     	;# 
   334  058E                     	;# 
   335  058F                     	;# 
   336  058F                     	;# 
   337  0590                     	;# 
   338  0591                     	;# 
   339  0592                     	;# 
   340  0593                     	;# 
   341  060C                     	;# 
   342  060D                     	;# 
   343  060E                     	;# 
   344  060F                     	;# 
   345  0610                     	;# 
   346  0611                     	;# 
   347  0612                     	;# 
   348  0613                     	;# 
   349  0614                     	;# 
   350  0616                     	;# 
   351  0617                     	;# 
   352  0618                     	;# 
   353  0619                     	;# 
   354  061A                     	;# 
   355  061B                     	;# 
   356  061C                     	;# 
   357  061D                     	;# 
   358  061E                     	;# 
   359  068C                     	;# 
   360  068D                     	;# 
   361  068E                     	;# 
   362  068F                     	;# 
   363  0690                     	;# 
   364  0691                     	;# 
   365  0692                     	;# 
   366  0693                     	;# 
   367  0694                     	;# 
   368  070C                     	;# 
   369  070D                     	;# 
   370  070E                     	;# 
   371  070F                     	;# 
   372  0710                     	;# 
   373  0711                     	;# 
   374  0712                     	;# 
   375  0713                     	;# 
   376  0714                     	;# 
   377  0716                     	;# 
   378  0717                     	;# 
   379  0718                     	;# 
   380  0719                     	;# 
   381  071A                     	;# 
   382  071B                     	;# 
   383  071C                     	;# 
   384  071D                     	;# 
   385  071E                     	;# 
   386  0796                     	;# 
   387  0797                     	;# 
   388  0798                     	;# 
   389  0799                     	;# 
   390  079A                     	;# 
   391  079B                     	;# 
   392  080C                     	;# 
   393  080D                     	;# 
   394  080E                     	;# 
   395  080F                     	;# 
   396  0810                     	;# 
   397  0811                     	;# 
   398  0812                     	;# 
   399  0813                     	;# 
   400  0814                     	;# 
   401  081A                     	;# 
   402  081B                     	;# 
   403  081C                     	;# 
   404  081D                     	;# 
   405  081E                     	;# 
   406  081F                     	;# 
   407  088C                     	;# 
   408  088D                     	;# 
   409  088E                     	;# 
   410  088F                     	;# 
   411  0890                     	;# 
   412  0891                     	;# 
   413  0892                     	;# 
   414  0893                     	;# 
   415  0895                     	;# 
   416  0896                     	;# 
   417  0897                     	;# 
   418  0898                     	;# 
   419  0899                     	;# 
   420  089A                     	;# 
   421  089B                     	;# 
   422  090C                     	;# 
   423  090E                     	;# 
   424  090F                     	;# 
   425  091F                     	;# 
   426  091F                     	;# 
   427  098F                     	;# 
   428  098F                     	;# 
   429  0990                     	;# 
   430  0991                     	;# 
   431  0992                     	;# 
   432  0993                     	;# 
   433  0994                     	;# 
   434  0995                     	;# 
   435  0996                     	;# 
   436  0997                     	;# 
   437  0E0F                     	;# 
   438  0E10                     	;# 
   439  0E11                     	;# 
   440  0E12                     	;# 
   441  0E13                     	;# 
   442  0E14                     	;# 
   443  0E15                     	;# 
   444  0E16                     	;# 
   445  0E17                     	;# 
   446  0E18                     	;# 
   447  0E19                     	;# 
   448  0E1A                     	;# 
   449  0E1B                     	;# 
   450  0E1C                     	;# 
   451  0E1D                     	;# 
   452  0E1E                     	;# 
   453  0E1F                     	;# 
   454  0E20                     	;# 
   455  0E21                     	;# 
   456  0E22                     	;# 
   457  0E23                     	;# 
   458  0E24                     	;# 
   459  0E25                     	;# 
   460  0E26                     	;# 
   461  0E27                     	;# 
   462  0E28                     	;# 
   463  0E29                     	;# 
   464  0E2A                     	;# 
   465  0E2B                     	;# 
   466  0E2C                     	;# 
   467  0E2D                     	;# 
   468  0E2E                     	;# 
   469  0E2F                     	;# 
   470  0E30                     	;# 
   471  0E31                     	;# 
   472  0E32                     	;# 
   473  0E33                     	;# 
   474  0E34                     	;# 
   475  0E35                     	;# 
   476  0E36                     	;# 
   477  0E37                     	;# 
   478  0E8F                     	;# 
   479  0E90                     	;# 
   480  0E91                     	;# 
   481  0E92                     	;# 
   482  0E93                     	;# 
   483  0E94                     	;# 
   484  0E95                     	;# 
   485  0E96                     	;# 
   486  0E97                     	;# 
   487  0E9C                     	;# 
   488  0E9D                     	;# 
   489  0E9E                     	;# 
   490  0EA1                     	;# 
   491  0EA2                     	;# 
   492  0EA3                     	;# 
   493  0EA4                     	;# 
   494  0EA5                     	;# 
   495  0EA9                     	;# 
   496  0EAA                     	;# 
   497  0EAB                     	;# 
   498  0EAC                     	;# 
   499  0EB1                     	;# 
   500  0EB2                     	;# 
   501  0EB3                     	;# 
   502  0EB8                     	;# 
   503  0EB9                     	;# 
   504  0EBA                     	;# 
   505  0EBB                     	;# 
   506  0EBC                     	;# 
   507  0EBD                     	;# 
   508  0EBE                     	;# 
   509  0EC3                     	;# 
   510  0EC5                     	;# 
   511  0EC6                     	;# 
   512  0EC7                     	;# 
   513  0EC8                     	;# 
   514  0EC9                     	;# 
   515  0ECA                     	;# 
   516  0ECB                     	;# 
   517  0ECC                     	;# 
   518  0F10                     	;# 
   519  0F11                     	;# 
   520  0F12                     	;# 
   521  0F13                     	;# 
   522  0F14                     	;# 
   523  0F15                     	;# 
   524  0F16                     	;# 
   525  0F17                     	;# 
   526  0F18                     	;# 
   527  0F19                     	;# 
   528  0F1A                     	;# 
   529  0F1B                     	;# 
   530  0F1C                     	;# 
   531  0F1D                     	;# 
   532  0F1E                     	;# 
   533  0F1F                     	;# 
   534  0F20                     	;# 
   535  0F21                     	;# 
   536  0F22                     	;# 
   537  0F23                     	;# 
   538  0F24                     	;# 
   539  0F25                     	;# 
   540  0F26                     	;# 
   541  0F27                     	;# 
   542  0F38                     	;# 
   543  0F39                     	;# 
   544  0F3A                     	;# 
   545  0F3B                     	;# 
   546  0F3C                     	;# 
   547  0F3D                     	;# 
   548  0F3E                     	;# 
   549  0F3F                     	;# 
   550  0F40                     	;# 
   551  0F41                     	;# 
   552  0F43                     	;# 
   553  0F44                     	;# 
   554  0F45                     	;# 
   555  0F46                     	;# 
   556  0F47                     	;# 
   557  0F48                     	;# 
   558  0F49                     	;# 
   559  0F4A                     	;# 
   560  0F4B                     	;# 
   561  0F4C                     	;# 
   562  0F4E                     	;# 
   563  0F4F                     	;# 
   564  0F50                     	;# 
   565  0F51                     	;# 
   566  0F52                     	;# 
   567  0F53                     	;# 
   568  0F54                     	;# 
   569  0F55                     	;# 
   570  0F56                     	;# 
   571  0F57                     	;# 
   572  0F65                     	;# 
   573  0F68                     	;# 
   574  0F69                     	;# 
   575  0F6A                     	;# 
   576  0F6B                     	;# 
   577  0FE4                     	;# 
   578  0FE5                     	;# 
   579  0FE6                     	;# 
   580  0FE7                     	;# 
   581  0FE8                     	;# 
   582  0FE9                     	;# 
   583  0FEA                     	;# 
   584  0FEB                     	;# 
   585  0FED                     	;# 
   586  0FEE                     	;# 
   587  0FEF                     	;# 
   588  0000                     	;# 
   589  0001                     	;# 
   590  0002                     	;# 
   591  0003                     	;# 
   592  0004                     	;# 
   593  0005                     	;# 
   594  0006                     	;# 
   595  0007                     	;# 
   596  0008                     	;# 
   597  0009                     	;# 
   598  000A                     	;# 
   599  000B                     	;# 
   600  000C                     	;# 
   601  000D                     	;# 
   602  000E                     	;# 
   603  0010                     	;# 
   604  0011                     	;# 
   605  0012                     	;# 
   606  0013                     	;# 
   607  0016                     	;# 
   608  0017                     	;# 
   609  0018                     	;# 
   610  001C                     	;# 
   611  001C                     	;# 
   612  001D                     	;# 
   613  001D                     	;# 
   614  001E                     	;# 
   615  001F                     	;# 
   616  008C                     	;# 
   617  008C                     	;# 
   618  008D                     	;# 
   619  008E                     	;# 
   620  008E                     	;# 
   621  008F                     	;# 
   622  0090                     	;# 
   623  0090                     	;# 
   624  0091                     	;# 
   625  0093                     	;# 
   626  0094                     	;# 
   627  0095                     	;# 
   628  0096                     	;# 
   629  0097                     	;# 
   630  0098                     	;# 
   631  0099                     	;# 
   632  009A                     	;# 
   633  009B                     	;# 
   634  009C                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  010C                     	;# 
   638  010D                     	;# 
   639  010E                     	;# 
   640  010E                     	;# 
   641  010F                     	;# 
   642  0110                     	;# 
   643  0110                     	;# 
   644  0111                     	;# 
   645  0112                     	;# 
   646  0112                     	;# 
   647  0113                     	;# 
   648  0114                     	;# 
   649  0114                     	;# 
   650  0115                     	;# 
   651  0116                     	;# 
   652  0116                     	;# 
   653  0117                     	;# 
   654  0119                     	;# 
   655  0119                     	;# 
   656  0119                     	;# 
   657  011A                     	;# 
   658  011A                     	;# 
   659  011A                     	;# 
   660  011B                     	;# 
   661  011B                     	;# 
   662  011B                     	;# 
   663  011B                     	;# 
   664  011B                     	;# 
   665  011C                     	;# 
   666  011C                     	;# 
   667  011C                     	;# 
   668  011D                     	;# 
   669  011D                     	;# 
   670  011D                     	;# 
   671  011E                     	;# 
   672  011E                     	;# 
   673  011E                     	;# 
   674  011F                     	;# 
   675  011F                     	;# 
   676  011F                     	;# 
   677  011F                     	;# 
   678  011F                     	;# 
   679  018C                     	;# 
   680  018D                     	;# 
   681  018E                     	;# 
   682  018F                     	;# 
   683  0190                     	;# 
   684  0191                     	;# 
   685  0192                     	;# 
   686  0196                     	;# 
   687  0197                     	;# 
   688  0198                     	;# 
   689  0199                     	;# 
   690  019A                     	;# 
   691  019B                     	;# 
   692  019C                     	;# 
   693  020C                     	;# 
   694  020C                     	;# 
   695  020D                     	;# 
   696  020E                     	;# 
   697  020F                     	;# 
   698  020F                     	;# 
   699  0210                     	;# 
   700  0210                     	;# 
   701  0211                     	;# 
   702  0211                     	;# 
   703  0212                     	;# 
   704  0212                     	;# 
   705  0213                     	;# 
   706  0214                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0216                     	;# 
   710  0216                     	;# 
   711  0217                     	;# 
   712  0217                     	;# 
   713  0218                     	;# 
   714  0218                     	;# 
   715  0219                     	;# 
   716  021A                     	;# 
   717  021B                     	;# 
   718  021B                     	;# 
   719  021C                     	;# 
   720  021C                     	;# 
   721  021D                     	;# 
   722  021D                     	;# 
   723  021E                     	;# 
   724  021F                     	;# 
   725  028C                     	;# 
   726  028C                     	;# 
   727  028D                     	;# 
   728  028D                     	;# 
   729  028E                     	;# 
   730  028F                     	;# 
   731  0290                     	;# 
   732  0290                     	;# 
   733  0291                     	;# 
   734  0292                     	;# 
   735  0292                     	;# 
   736  0293                     	;# 
   737  0293                     	;# 
   738  0294                     	;# 
   739  0295                     	;# 
   740  0296                     	;# 
   741  0296                     	;# 
   742  0297                     	;# 
   743  0298                     	;# 
   744  0298                     	;# 
   745  0299                     	;# 
   746  0299                     	;# 
   747  029A                     	;# 
   748  029B                     	;# 
   749  029C                     	;# 
   750  029C                     	;# 
   751  029D                     	;# 
   752  030C                     	;# 
   753  030C                     	;# 
   754  030D                     	;# 
   755  030E                     	;# 
   756  030F                     	;# 
   757  0310                     	;# 
   758  0310                     	;# 
   759  0311                     	;# 
   760  0312                     	;# 
   761  0313                     	;# 
   762  0314                     	;# 
   763  0314                     	;# 
   764  0315                     	;# 
   765  0316                     	;# 
   766  0317                     	;# 
   767  0318                     	;# 
   768  0318                     	;# 
   769  0319                     	;# 
   770  031A                     	;# 
   771  031B                     	;# 
   772  031C                     	;# 
   773  031C                     	;# 
   774  031D                     	;# 
   775  031E                     	;# 
   776  031F                     	;# 
   777  038C                     	;# 
   778  038D                     	;# 
   779  038E                     	;# 
   780  0390                     	;# 
   781  0391                     	;# 
   782  0392                     	;# 
   783  040C                     	;# 
   784  040D                     	;# 
   785  040E                     	;# 
   786  040F                     	;# 
   787  0410                     	;# 
   788  0411                     	;# 
   789  0416                     	;# 
   790  0416                     	;# 
   791  0417                     	;# 
   792  0418                     	;# 
   793  0418                     	;# 
   794  0419                     	;# 
   795  041A                     	;# 
   796  041A                     	;# 
   797  041B                     	;# 
   798  041C                     	;# 
   799  041C                     	;# 
   800  041D                     	;# 
   801  041E                     	;# 
   802  041F                     	;# 
   803  048C                     	;# 
   804  048C                     	;# 
   805  048D                     	;# 
   806  048E                     	;# 
   807  048F                     	;# 
   808  048F                     	;# 
   809  0490                     	;# 
   810  0491                     	;# 
   811  0492                     	;# 
   812  0492                     	;# 
   813  0493                     	;# 
   814  0494                     	;# 
   815  0495                     	;# 
   816  0495                     	;# 
   817  0496                     	;# 
   818  0497                     	;# 
   819  0498                     	;# 
   820  0499                     	;# 
   821  049A                     	;# 
   822  049B                     	;# 
   823  049C                     	;# 
   824  049D                     	;# 
   825  050C                     	;# 
   826  050C                     	;# 
   827  050D                     	;# 
   828  050E                     	;# 
   829  050F                     	;# 
   830  050F                     	;# 
   831  0510                     	;# 
   832  0511                     	;# 
   833  0512                     	;# 
   834  0512                     	;# 
   835  0513                     	;# 
   836  0514                     	;# 
   837  0515                     	;# 
   838  0515                     	;# 
   839  0516                     	;# 
   840  0517                     	;# 
   841  0518                     	;# 
   842  0519                     	;# 
   843  051A                     	;# 
   844  051B                     	;# 
   845  051C                     	;# 
   846  051D                     	;# 
   847  058C                     	;# 
   848  058C                     	;# 
   849  058D                     	;# 
   850  058E                     	;# 
   851  058F                     	;# 
   852  058F                     	;# 
   853  0590                     	;# 
   854  0591                     	;# 
   855  0592                     	;# 
   856  0593                     	;# 
   857  060C                     	;# 
   858  060D                     	;# 
   859  060E                     	;# 
   860  060F                     	;# 
   861  0610                     	;# 
   862  0611                     	;# 
   863  0612                     	;# 
   864  0613                     	;# 
   865  0614                     	;# 
   866  0616                     	;# 
   867  0617                     	;# 
   868  0618                     	;# 
   869  0619                     	;# 
   870  061A                     	;# 
   871  061B                     	;# 
   872  061C                     	;# 
   873  061D                     	;# 
   874  061E                     	;# 
   875  068C                     	;# 
   876  068D                     	;# 
   877  068E                     	;# 
   878  068F                     	;# 
   879  0690                     	;# 
   880  0691                     	;# 
   881  0692                     	;# 
   882  0693                     	;# 
   883  0694                     	;# 
   884  070C                     	;# 
   885  070D                     	;# 
   886  070E                     	;# 
   887  070F                     	;# 
   888  0710                     	;# 
   889  0711                     	;# 
   890  0712                     	;# 
   891  0713                     	;# 
   892  0714                     	;# 
   893  0716                     	;# 
   894  0717                     	;# 
   895  0718                     	;# 
   896  0719                     	;# 
   897  071A                     	;# 
   898  071B                     	;# 
   899  071C                     	;# 
   900  071D                     	;# 
   901  071E                     	;# 
   902  0796                     	;# 
   903  0797                     	;# 
   904  0798                     	;# 
   905  0799                     	;# 
   906  079A                     	;# 
   907  079B                     	;# 
   908  080C                     	;# 
   909  080D                     	;# 
   910  080E                     	;# 
   911  080F                     	;# 
   912  0810                     	;# 
   913  0811                     	;# 
   914  0812                     	;# 
   915  0813                     	;# 
   916  0814                     	;# 
   917  081A                     	;# 
   918  081B                     	;# 
   919  081C                     	;# 
   920  081D                     	;# 
   921  081E                     	;# 
   922  081F                     	;# 
   923  088C                     	;# 
   924  088D                     	;# 
   925  088E                     	;# 
   926  088F                     	;# 
   927  0890                     	;# 
   928  0891                     	;# 
   929  0892                     	;# 
   930  0893                     	;# 
   931  0895                     	;# 
   932  0896                     	;# 
   933  0897                     	;# 
   934  0898                     	;# 
   935  0899                     	;# 
   936  089A                     	;# 
   937  089B                     	;# 
   938  090C                     	;# 
   939  090E                     	;# 
   940  090F                     	;# 
   941  091F                     	;# 
   942  091F                     	;# 
   943  098F                     	;# 
   944  098F                     	;# 
   945  0990                     	;# 
   946  0991                     	;# 
   947  0992                     	;# 
   948  0993                     	;# 
   949  0994                     	;# 
   950  0995                     	;# 
   951  0996                     	;# 
   952  0997                     	;# 
   953  0E0F                     	;# 
   954  0E10                     	;# 
   955  0E11                     	;# 
   956  0E12                     	;# 
   957  0E13                     	;# 
   958  0E14                     	;# 
   959  0E15                     	;# 
   960  0E16                     	;# 
   961  0E17                     	;# 
   962  0E18                     	;# 
   963  0E19                     	;# 
   964  0E1A                     	;# 
   965  0E1B                     	;# 
   966  0E1C                     	;# 
   967  0E1D                     	;# 
   968  0E1E                     	;# 
   969  0E1F                     	;# 
   970  0E20                     	;# 
   971  0E21                     	;# 
   972  0E22                     	;# 
   973  0E23                     	;# 
   974  0E24                     	;# 
   975  0E25                     	;# 
   976  0E26                     	;# 
   977  0E27                     	;# 
   978  0E28                     	;# 
   979  0E29                     	;# 
   980  0E2A                     	;# 
   981  0E2B                     	;# 
   982  0E2C                     	;# 
   983  0E2D                     	;# 
   984  0E2E                     	;# 
   985  0E2F                     	;# 
   986  0E30                     	;# 
   987  0E31                     	;# 
   988  0E32                     	;# 
   989  0E33                     	;# 
   990  0E34                     	;# 
   991  0E35                     	;# 
   992  0E36                     	;# 
   993  0E37                     	;# 
   994  0E8F                     	;# 
   995  0E90                     	;# 
   996  0E91                     	;# 
   997  0E92                     	;# 
   998  0E93                     	;# 
   999  0E94                     	;# 
  1000  0E95                     	;# 
  1001  0E96                     	;# 
  1002  0E97                     	;# 
  1003  0E9C                     	;# 
  1004  0E9D                     	;# 
  1005  0E9E                     	;# 
  1006  0EA1                     	;# 
  1007  0EA2                     	;# 
  1008  0EA3                     	;# 
  1009  0EA4                     	;# 
  1010  0EA5                     	;# 
  1011  0EA9                     	;# 
  1012  0EAA                     	;# 
  1013  0EAB                     	;# 
  1014  0EAC                     	;# 
  1015  0EB1                     	;# 
  1016  0EB2                     	;# 
  1017  0EB3                     	;# 
  1018  0EB8                     	;# 
  1019  0EB9                     	;# 
  1020  0EBA                     	;# 
  1021  0EBB                     	;# 
  1022  0EBC                     	;# 
  1023  0EBD                     	;# 
  1024  0EBE                     	;# 
  1025  0EC3                     	;# 
  1026  0EC5                     	;# 
  1027  0EC6                     	;# 
  1028  0EC7                     	;# 
  1029  0EC8                     	;# 
  1030  0EC9                     	;# 
  1031  0ECA                     	;# 
  1032  0ECB                     	;# 
  1033  0ECC                     	;# 
  1034  0F10                     	;# 
  1035  0F11                     	;# 
  1036  0F12                     	;# 
  1037  0F13                     	;# 
  1038  0F14                     	;# 
  1039  0F15                     	;# 
  1040  0F16                     	;# 
  1041  0F17                     	;# 
  1042  0F18                     	;# 
  1043  0F19                     	;# 
  1044  0F1A                     	;# 
  1045  0F1B                     	;# 
  1046  0F1C                     	;# 
  1047  0F1D                     	;# 
  1048  0F1E                     	;# 
  1049  0F1F                     	;# 
  1050  0F20                     	;# 
  1051  0F21                     	;# 
  1052  0F22                     	;# 
  1053  0F23                     	;# 
  1054  0F24                     	;# 
  1055  0F25                     	;# 
  1056  0F26                     	;# 
  1057  0F27                     	;# 
  1058  0F38                     	;# 
  1059  0F39                     	;# 
  1060  0F3A                     	;# 
  1061  0F3B                     	;# 
  1062  0F3C                     	;# 
  1063  0F3D                     	;# 
  1064  0F3E                     	;# 
  1065  0F3F                     	;# 
  1066  0F40                     	;# 
  1067  0F41                     	;# 
  1068  0F43                     	;# 
  1069  0F44                     	;# 
  1070  0F45                     	;# 
  1071  0F46                     	;# 
  1072  0F47                     	;# 
  1073  0F48                     	;# 
  1074  0F49                     	;# 
  1075  0F4A                     	;# 
  1076  0F4B                     	;# 
  1077  0F4C                     	;# 
  1078  0F4E                     	;# 
  1079  0F4F                     	;# 
  1080  0F50                     	;# 
  1081  0F51                     	;# 
  1082  0F52                     	;# 
  1083  0F53                     	;# 
  1084  0F54                     	;# 
  1085  0F55                     	;# 
  1086  0F56                     	;# 
  1087  0F57                     	;# 
  1088  0F65                     	;# 
  1089  0F68                     	;# 
  1090  0F69                     	;# 
  1091  0F6A                     	;# 
  1092  0F6B                     	;# 
  1093  0FE4                     	;# 
  1094  0FE5                     	;# 
  1095  0FE6                     	;# 
  1096  0FE7                     	;# 
  1097  0FE8                     	;# 
  1098  0FE9                     	;# 
  1099  0FEA                     	;# 
  1100  0FEB                     	;# 
  1101  0FED                     	;# 
  1102  0FEE                     	;# 
  1103  0FEF                     	;# 
  1104                           
  1105                           	psect	stringtext1
  1106  051A                     __pstringtext1:	
  1107  051A                     _dpowers:	
  1108  051A  3401               	retlw	1
  1109  051B  3400               	retlw	0
  1110  051C  340A               	retlw	10
  1111  051D  3400               	retlw	0
  1112  051E  3464               	retlw	100
  1113  051F  3400               	retlw	0
  1114  0520  34E8               	retlw	232
  1115  0521  3403               	retlw	3
  1116  0522  3410               	retlw	16
  1117  0523  3427               	retlw	39
  1118  0524                     __end_of_dpowers:	
  1119  0012                     _TRISBbits	set	18
  1120  0018                     _LATC	set	24
  1121  0017                     _LATB	set	23
  1122  0016                     _LATA	set	22
  1123  000E                     _PORTC	set	14
  1124  000D                     _PORTB	set	13
  1125  000C                     _PORTA	set	12
  1126  0013                     _TRISC	set	19
  1127  0012                     _TRISB	set	18
  1128  0011                     _TRISA	set	17
  1129  000B                     _INTCONbits	set	11
  1130  001D                     _TMR0H	set	29
  1131  001F                     _T0CON1	set	31
  1132  001E                     _T0CON0	set	30
  1133  001C                     _TMR0L	set	28
  1134  0016                     _LATAbits	set	22
  1135  001E                     _T0CON0bits	set	30
  1136  0018                     _LATCbits	set	24
  1137  0069                     _RB1	set	105
  1138  0068                     _RB0	set	104
  1139  006A                     _RB2	set	106
  1140  006B                     _RB3	set	107
  1141  0074                     _RC4	set	116
  1142  0073                     _RC3	set	115
  1143  0077                     _RC7	set	119
  1144  0072                     _RC2	set	114
  1145  0076                     _RC6	set	118
  1146  0075                     _RC5	set	117
  1147  0716                     _PIE0bits	set	1814
  1148  070C                     _PIR0bits	set	1804
  1149  0F4E                     _ANSELC	set	3918
  1150  0F43                     _ANSELB	set	3907
  1151  0F38                     _ANSELA	set	3896
  1152  0524                     STR_7:	
  1153  0524  3420               	retlw	32	;' '
  1154  0525  3420               	retlw	32	;' '
  1155  0526  3420               	retlw	32	;' '
  1156  0527  3420               	retlw	32	;' '
  1157  0528  3420               	retlw	32	;' '
  1158  0529  3420               	retlw	32	;' '
  1159  052A  3420               	retlw	32	;' '
  1160  052B  3420               	retlw	32	;' '
  1161  052C  3400               	retlw	0
  1162                           
  1163                           	psect	stringtext2
  1164  055D                     __pstringtext2:	
  1165  055D                     STR_10:	
  1166  055D  3445               	retlw	69	;'E'
  1167  055E  3478               	retlw	120	;'x'
  1168  055F  3470               	retlw	112	;'p'
  1169  0560  346F               	retlw	111	;'o'
  1170  0561  3473               	retlw	115	;'s'
  1171  0562  3469               	retlw	105	;'i'
  1172  0563  346E               	retlw	110	;'n'
  1173  0564  3467               	retlw	103	;'g'
  1174  0565  3400               	retlw	0
  1175                           
  1176                           	psect	stringtext3
  1177  0566                     __pstringtext3:	
  1178  0566                     STR_8:	
  1179  0566  3453               	retlw	83	;'S'
  1180  0567  3474               	retlw	116	;'t'
  1181  0568  346F               	retlw	111	;'o'
  1182  0569  3470               	retlw	112	;'p'
  1183  056A  3470               	retlw	112	;'p'
  1184  056B  3465               	retlw	101	;'e'
  1185  056C  3464               	retlw	100	;'d'
  1186  056D  3400               	retlw	0
  1187                           
  1188                           	psect	stringtext4
  1189  0576                     __pstringtext4:	
  1190  0576                     STR_1:	
  1191  0576  3449               	retlw	73	;'I'
  1192  0577  3464               	retlw	100	;'d'
  1193  0578  346C               	retlw	108	;'l'
  1194  0579  3465               	retlw	101	;'e'
  1195  057A  3400               	retlw	0
  1196                           
  1197                           	psect	stringtext5
  1198  057B                     __pstringtext5:	
  1199  057B                     STR_2:	
  1200  057B  3425               	retlw	37	;'%'
  1201  057C  3432               	retlw	50	;'2'
  1202  057D  3464               	retlw	100	;'d'
  1203  057E  3400               	retlw	0
  1204                           
  1205                           	psect	stringtext6
  1206  057F                     __pstringtext6:	
  1207  057F                     STR_5:	
  1208  057F  343A               	retlw	58	;':'
  1209  0580  3400               	retlw	0
  1210                           
  1211                           	psect	stringtext7
  1212  0000                     __pstringtext7:	
  1213  052A                     
  1214                           ; #config settings
  1215  0000                     
  1216                           	psect	cinit
  1217  0069                     start_initialization:	
  1218  0069                     __initialization:	
  1219                           
  1220                           ; Clear objects allocated to BANK0
  1221  0069  0020               	movlb	0	; select bank0
  1222  006A  01C3               	clrf	__pbssBANK0& (0+127)
  1223  006B  01C4               	clrf	(__pbssBANK0+1)& (0+127)
  1224  006C  01C5               	clrf	(__pbssBANK0+2)& (0+127)
  1225  006D  01C6               	clrf	(__pbssBANK0+3)& (0+127)
  1226  006E  01C7               	clrf	(__pbssBANK0+4)& (0+127)
  1227  006F  01C8               	clrf	(__pbssBANK0+5)& (0+127)
  1228  0070  01C9               	clrf	(__pbssBANK0+6)& (0+127)
  1229  0071  01CA               	clrf	(__pbssBANK0+7)& (0+127)
  1230  0072  01CB               	clrf	(__pbssBANK0+8)& (0+127)
  1231  0073  01CC               	clrf	(__pbssBANK0+9)& (0+127)
  1232  0074  01CD               	clrf	(__pbssBANK0+10)& (0+127)
  1233  0075  01CE               	clrf	(__pbssBANK0+11)& (0+127)
  1234  0076                     end_of_initialization:	
  1235                           ;End of C runtime variable initialization code
  1236                           
  1237  0076                     __end_of__initialization:	
  1238  0076  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1239  0077  0020               	movlb	0
  1240  0078  3181  29CB         	ljmp	_main	;jump to C main() function
  1241                           
  1242                           	psect	bssBANK0
  1243  0043                     __pbssBANK0:	
  1244  0043                     _sec:	
  1245  0043                     	ds	2
  1246  0045                     _min:	
  1247  0045                     	ds	2
  1248  0047                     _flag:	
  1249  0047                     	ds	2
  1250  0049                     _buffer_min:	
  1251  0049                     	ds	3
  1252  004C                     _buffer_sec:	
  1253  004C                     	ds	3
  1254                           
  1255                           	psect	cstackCOMMON
  1256  0070                     __pcstackCOMMON:	
  1257  0070                     ?_isdigit:	
  1258  0070                     ?_initial_config:	
  1259                           ; 1 bit 
  1260                           
  1261  0070                     ?_init_int:	
  1262                           ; 1 bytes @ 0x0
  1263                           
  1264  0070                     ?_Lcd_Port:	
  1265                           ; 1 bytes @ 0x0
  1266                           
  1267  0070                     ?_Lcd_Cmd:	
  1268                           ; 1 bytes @ 0x0
  1269                           
  1270  0070                     ?_Lcd_Init:	
  1271                           ; 1 bytes @ 0x0
  1272                           
  1273  0070                     ?_Lcd_Write_Char:	
  1274                           ; 1 bytes @ 0x0
  1275                           
  1276  0070                     ?_main:	
  1277                           ; 1 bytes @ 0x0
  1278                           
  1279  0070                     ?_timer:	
  1280                           ; 1 bytes @ 0x0
  1281                           
  1282  0070                     ?i1_Lcd_Port:	
  1283                           ; 1 bytes @ 0x0
  1284                           
  1285  0070                     ??i1_Lcd_Port:	
  1286                           ; 1 bytes @ 0x0
  1287                           
  1288  0070                     ?i1_Lcd_Cmd:	
  1289                           ; 1 bytes @ 0x0
  1290                           
  1291  0070                     ?i1_Lcd_Write_Char:	
  1292                           ; 1 bytes @ 0x0
  1293                           
  1294  0070                     ?_Lcd_Clear:	
  1295                           ; 1 bytes @ 0x0
  1296                           
  1297  0070                     i1Lcd_Port@a:	
  1298                           ; 2 bytes @ 0x0
  1299                           
  1300                           
  1301                           ; 1 bytes @ 0x0
  1302  0070                     	ds	1
  1303  0071                     ??i1_Lcd_Cmd:	
  1304  0071                     ??i1_Lcd_Write_Char:	
  1305                           ; 1 bytes @ 0x1
  1306                           
  1307                           
  1308                           ; 1 bytes @ 0x1
  1309  0071                     	ds	1
  1310  0072                     i1Lcd_Cmd@a:	
  1311  0072                     i1Lcd_Write_Char@temp:	
  1312                           ; 1 bytes @ 0x2
  1313                           
  1314                           
  1315                           ; 1 bytes @ 0x2
  1316  0072                     	ds	1
  1317  0073                     ?i1_Lcd_Set_Cursor:	
  1318  0073                     i1Lcd_Set_Cursor@b:	
  1319                           ; 1 bytes @ 0x3
  1320                           
  1321  0073                     i1Lcd_Write_Char@y:	
  1322                           ; 1 bytes @ 0x3
  1323                           
  1324                           
  1325                           ; 1 bytes @ 0x3
  1326  0073                     	ds	1
  1327  0074                     ??i1_Lcd_Set_Cursor:	
  1328  0074                     i1Lcd_Write_Char@a:	
  1329                           ; 1 bytes @ 0x4
  1330                           
  1331                           
  1332                           ; 1 bytes @ 0x4
  1333  0074                     	ds	1
  1334  0075                     ?i1_Lcd_Write_String:	
  1335  0075                     i1Lcd_Write_String@a:	
  1336                           ; 1 bytes @ 0x5
  1337                           
  1338                           
  1339                           ; 2 bytes @ 0x5
  1340  0075                     	ds	1
  1341  0076                     i1Lcd_Set_Cursor@a:	
  1342                           
  1343                           ; 1 bytes @ 0x6
  1344  0076                     	ds	1
  1345  0077                     ??i1_Lcd_Write_String:	
  1346  0077                     i1Lcd_Set_Cursor@z:	
  1347                           ; 1 bytes @ 0x7
  1348                           
  1349                           
  1350                           ; 1 bytes @ 0x7
  1351  0077                     	ds	1
  1352  0078                     i1Lcd_Set_Cursor@y:	
  1353  0078                     i1Lcd_Write_String@i:	
  1354                           ; 1 bytes @ 0x8
  1355                           
  1356                           
  1357                           ; 2 bytes @ 0x8
  1358  0078                     	ds	1
  1359  0079                     i1Lcd_Set_Cursor@temp:	
  1360                           
  1361                           ; 1 bytes @ 0x9
  1362  0079                     	ds	1
  1363  007A                     ??_timer:	
  1364                           
  1365                           ; 1 bytes @ 0xA
  1366  007A                     	ds	3
  1367                           
  1368                           	psect	cstackBANK0
  1369  0020                     __pcstackBANK0:	
  1370  0020                     ??_initial_config:	
  1371  0020                     ??_init_int:	
  1372                           ; 1 bytes @ 0x0
  1373                           
  1374  0020                     ??_isdigit:	
  1375                           ; 1 bytes @ 0x0
  1376                           
  1377  0020                     ??_Lcd_Port:	
  1378                           ; 1 bytes @ 0x0
  1379                           
  1380  0020                     ?___wmul:	
  1381                           ; 1 bytes @ 0x0
  1382                           
  1383  0020                     ?___lwdiv:	
  1384                           ; 2 bytes @ 0x0
  1385                           
  1386  0020                     Lcd_Port@a:	
  1387                           ; 2 bytes @ 0x0
  1388                           
  1389  0020                     _isdigit$583:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  0020                     ___wmul@multiplier:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  0020                     ___lwdiv@divisor:	
  1396                           ; 2 bytes @ 0x0
  1397                           
  1398                           
  1399                           ; 2 bytes @ 0x0
  1400  0020                     	ds	1
  1401  0021                     ??_Lcd_Cmd:	
  1402  0021                     ??_Lcd_Write_Char:	
  1403                           ; 1 bytes @ 0x1
  1404                           
  1405  0021                     isdigit@c:	
  1406                           ; 1 bytes @ 0x1
  1407                           
  1408                           
  1409                           ; 1 bytes @ 0x1
  1410  0021                     	ds	1
  1411  0022                     Lcd_Cmd@a:	
  1412  0022                     Lcd_Write_Char@temp:	
  1413                           ; 1 bytes @ 0x2
  1414                           
  1415  0022                     ___wmul@multiplicand:	
  1416                           ; 1 bytes @ 0x2
  1417                           
  1418  0022                     ___lwdiv@dividend:	
  1419                           ; 2 bytes @ 0x2
  1420                           
  1421                           
  1422                           ; 2 bytes @ 0x2
  1423  0022                     	ds	1
  1424  0023                     ??_Lcd_Clear:	
  1425  0023                     ?_Lcd_Set_Cursor:	
  1426                           ; 1 bytes @ 0x3
  1427                           
  1428  0023                     ??_Lcd_Init:	
  1429                           ; 1 bytes @ 0x3
  1430                           
  1431  0023                     Lcd_Set_Cursor@b:	
  1432                           ; 1 bytes @ 0x3
  1433                           
  1434  0023                     Lcd_Write_Char@y:	
  1435                           ; 1 bytes @ 0x3
  1436                           
  1437                           
  1438                           ; 1 bytes @ 0x3
  1439  0023                     	ds	1
  1440  0024                     ??_Lcd_Set_Cursor:	
  1441  0024                     ??___wmul:	
  1442                           ; 1 bytes @ 0x4
  1443                           
  1444  0024                     ??___lwdiv:	
  1445                           ; 1 bytes @ 0x4
  1446                           
  1447  0024                     Lcd_Write_Char@a:	
  1448                           ; 1 bytes @ 0x4
  1449                           
  1450  0024                     ___wmul@product:	
  1451                           ; 1 bytes @ 0x4
  1452                           
  1453                           
  1454                           ; 2 bytes @ 0x4
  1455  0024                     	ds	1
  1456  0025                     ?_Lcd_Write_String:	
  1457  0025                     Lcd_Write_String@a:	
  1458                           ; 1 bytes @ 0x5
  1459                           
  1460  0025                     ___lwdiv@quotient:	
  1461                           ; 2 bytes @ 0x5
  1462                           
  1463                           
  1464                           ; 2 bytes @ 0x5
  1465  0025                     	ds	1
  1466  0026                     Lcd_Set_Cursor@a:	
  1467                           
  1468                           ; 1 bytes @ 0x6
  1469  0026                     	ds	1
  1470  0027                     ??_Lcd_Write_String:	
  1471  0027                     Lcd_Set_Cursor@z:	
  1472                           ; 1 bytes @ 0x7
  1473                           
  1474  0027                     ___lwdiv@counter:	
  1475                           ; 1 bytes @ 0x7
  1476                           
  1477                           
  1478                           ; 1 bytes @ 0x7
  1479  0027                     	ds	1
  1480  0028                     ?___lwmod:	
  1481  0028                     Lcd_Set_Cursor@y:	
  1482                           ; 2 bytes @ 0x8
  1483                           
  1484  0028                     Lcd_Write_String@i:	
  1485                           ; 1 bytes @ 0x8
  1486                           
  1487  0028                     ___lwmod@divisor:	
  1488                           ; 2 bytes @ 0x8
  1489                           
  1490                           
  1491                           ; 2 bytes @ 0x8
  1492  0028                     	ds	1
  1493  0029                     Lcd_Set_Cursor@temp:	
  1494                           
  1495                           ; 1 bytes @ 0x9
  1496  0029                     	ds	1
  1497  002A                     ___lwmod@dividend:	
  1498                           
  1499                           ; 2 bytes @ 0xA
  1500  002A                     	ds	2
  1501  002C                     ??___lwmod:	
  1502                           
  1503                           ; 1 bytes @ 0xC
  1504  002C                     	ds	1
  1505  002D                     ___lwmod@counter:	
  1506                           
  1507                           ; 1 bytes @ 0xD
  1508  002D                     	ds	1
  1509  002E                     ?_sprintf:	
  1510  002E                     sprintf@f:	
  1511                           ; 2 bytes @ 0xE
  1512                           
  1513                           
  1514                           ; 2 bytes @ 0xE
  1515  002E                     	ds	4
  1516  0032                     ??_sprintf:	
  1517                           
  1518                           ; 1 bytes @ 0x12
  1519  0032                     	ds	4
  1520  0036                     sprintf@ap:	
  1521                           
  1522                           ; 1 bytes @ 0x16
  1523  0036                     	ds	1
  1524  0037                     sprintf@prec:	
  1525                           
  1526                           ; 1 bytes @ 0x17
  1527  0037                     	ds	1
  1528  0038                     sprintf@flag:	
  1529                           
  1530                           ; 1 bytes @ 0x18
  1531  0038                     	ds	1
  1532  0039                     sprintf@val:	
  1533                           
  1534                           ; 2 bytes @ 0x19
  1535  0039                     	ds	2
  1536  003B                     sprintf@width:	
  1537                           
  1538                           ; 2 bytes @ 0x1B
  1539  003B                     	ds	2
  1540  003D                     sprintf@sp:	
  1541                           
  1542                           ; 1 bytes @ 0x1D
  1543  003D                     	ds	1
  1544  003E                     sprintf@c:	
  1545                           
  1546                           ; 1 bytes @ 0x1E
  1547  003E                     	ds	1
  1548  003F                     ??_main:	
  1549                           
  1550                           ; 1 bytes @ 0x1F
  1551  003F                     	ds	2
  1552  0041                     main@counter:	
  1553                           
  1554                           ; 2 bytes @ 0x21
  1555  0041                     	ds	2
  1556                           
  1557                           	psect	maintext
  1558  01CB                     __pmaintext:	
  1559 ;;
  1560 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1561 ;;
  1562 ;; *************** function _main *****************
  1563 ;; Defined at:
  1564 ;;		line 31 in file "main.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  counter         2   33[BANK0 ] int 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : B1F/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1579 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1580 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1581 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1582 ;;Total ram usage:        4 bytes
  1583 ;; Hardware stack levels required when called:    7
  1584 ;; This function calls:
  1585 ;;		_Lcd_Clear
  1586 ;;		_Lcd_Init
  1587 ;;		_Lcd_Set_Cursor
  1588 ;;		_Lcd_Write_String
  1589 ;;		_init_int
  1590 ;;		_initial_config
  1591 ;;		_sprintf
  1592 ;; This function is called by:
  1593 ;;		Startup code after reset
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           
  1598                           ;psect for function _main
  1599  01CB                     _main:	
  1600                           
  1601                           ;main.c: 33: sec=0;
  1602                           
  1603                           ;incstack = 0
  1604                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1605  01CB  0020               	movlb	0	; select bank0
  1606  01CC  01C3               	clrf	_sec
  1607  01CD  01C4               	clrf	_sec+1
  1608                           
  1609                           ;main.c: 34: min=0;
  1610  01CE  01C5               	clrf	_min
  1611  01CF  01C6               	clrf	_min+1
  1612                           
  1613                           ;main.c: 35: int counter=0;
  1614  01D0  01C1               	clrf	main@counter
  1615  01D1  01C2               	clrf	main@counter+1
  1616                           
  1617                           ;main.c: 37: initial_config();
  1618  01D2  3185  2506  3181   	fcall	_initial_config
  1619                           
  1620                           ;main.c: 38: init_int();
  1621  01D5  3185  254F  3181   	fcall	_init_int
  1622                           
  1623                           ;main.c: 40: Lcd_Init();
  1624  01D8  3182  22EB  3181   	fcall	_Lcd_Init
  1625                           
  1626                           ;main.c: 41: Lcd_Clear();
  1627  01DB  3185  256E  3181   	fcall	_Lcd_Clear
  1628                           
  1629                           ;main.c: 43: Lcd_Set_Cursor(2,1);
  1630  01DE  0020               	movlb	0	; select bank0
  1631  01DF  01A3               	clrf	Lcd_Set_Cursor@b
  1632  01E0  0AA3               	incf	Lcd_Set_Cursor@b,f
  1633  01E1  3002               	movlw	2
  1634  01E2  3183  2332  3181   	fcall	_Lcd_Set_Cursor
  1635                           
  1636                           ;main.c: 44: Lcd_Write_String("Idle");
  1637  01E5  3076               	movlw	low (STR_1| (0+32768))
  1638  01E6  0020               	movlb	0	; select bank0
  1639  01E7  00A5               	movwf	Lcd_Write_String@a
  1640  01E8  3085               	movlw	high (STR_1| (0+32768))
  1641  01E9  00A6               	movwf	Lcd_Write_String@a+1
  1642  01EA  3184  248C  3181   	fcall	_Lcd_Write_String
  1643                           
  1644                           ;main.c: 47: LATCbits.LATC1=1;
  1645  01ED  0020               	movlb	0	; select bank0
  1646  01EE  1498               	bsf	24,1	;volatile
  1647  01EF                     l1525:	
  1648                           ;main.c: 49: while(1)
  1649                           
  1650                           
  1651                           ;main.c: 50: {
  1652                           ;main.c: 51: if(min>=0)
  1653  01EF  0020               	movlb	0	; select bank0
  1654  01F0  1BC6               	btfsc	_min+1,7
  1655  01F1  2A53               	goto	l1547
  1656                           
  1657                           ;main.c: 52: {
  1658                           ;main.c: 53: sprintf(buffer_sec, "%2d", sec);
  1659  01F2  307B               	movlw	low (STR_2| (0+32768))
  1660  01F3  00AE               	movwf	sprintf@f
  1661  01F4  3085               	movlw	high (STR_2| (0+32768))
  1662  01F5  00AF               	movwf	sprintf@f+1
  1663  01F6  0844               	movf	_sec+1,w
  1664  01F7  00B1               	movwf	?_sprintf+3
  1665  01F8  0843               	movf	_sec,w
  1666  01F9  00B0               	movwf	?_sprintf+2
  1667  01FA  304C               	movlw	(low (_buffer_sec| 0))& (0+255)
  1668  01FB  3180  207A  3181   	fcall	_sprintf
  1669                           
  1670                           ;main.c: 54: sprintf(buffer_min, "%2d", min);
  1671  01FE  307B               	movlw	low (STR_2| (0+32768))
  1672  01FF  0020               	movlb	0	; select bank0
  1673  0200  00AE               	movwf	sprintf@f
  1674  0201  3085               	movlw	high (STR_2| (0+32768))
  1675  0202  00AF               	movwf	sprintf@f+1
  1676  0203  0846               	movf	_min+1,w
  1677  0204  00B1               	movwf	?_sprintf+3
  1678  0205  0845               	movf	_min,w
  1679  0206  00B0               	movwf	?_sprintf+2
  1680  0207  3049               	movlw	(low (_buffer_min| 0))& (0+255)
  1681  0208  3180  207A  3181   	fcall	_sprintf
  1682                           
  1683                           ;main.c: 56: Lcd_Set_Cursor(1,1);
  1684  020B  0020               	movlb	0	; select bank0
  1685  020C  01A3               	clrf	Lcd_Set_Cursor@b
  1686  020D  0AA3               	incf	Lcd_Set_Cursor@b,f
  1687  020E  3001               	movlw	1
  1688  020F  3183  2332  3181   	fcall	_Lcd_Set_Cursor
  1689                           
  1690                           ;main.c: 57: Lcd_Write_String("  ");
  1691  0212  302A               	movlw	low ((STR_7+6)| (0+32768))
  1692  0213  0020               	movlb	0	; select bank0
  1693  0214  00A5               	movwf	Lcd_Write_String@a
  1694  0215  3085               	movlw	high ((STR_7+6)| (0+32768))
  1695  0216  00A6               	movwf	Lcd_Write_String@a+1
  1696  0217  3184  248C  3181   	fcall	_Lcd_Write_String
  1697                           
  1698                           ;main.c: 58: Lcd_Set_Cursor(1,1);
  1699  021A  0020               	movlb	0	; select bank0
  1700  021B  01A3               	clrf	Lcd_Set_Cursor@b
  1701  021C  0AA3               	incf	Lcd_Set_Cursor@b,f
  1702  021D  3001               	movlw	1
  1703  021E  3183  2332  3181   	fcall	_Lcd_Set_Cursor
  1704                           
  1705                           ;main.c: 59: Lcd_Write_String(buffer_min);
  1706  0221  3049               	movlw	low _buffer_min
  1707  0222  0020               	movlb	0	; select bank0
  1708  0223  00A5               	movwf	Lcd_Write_String@a
  1709  0224  3000               	movlw	high _buffer_min
  1710  0225  00A6               	movwf	Lcd_Write_String@a+1
  1711  0226  3184  248C  3181   	fcall	_Lcd_Write_String
  1712                           
  1713                           ;main.c: 61: Lcd_Write_String(":");
  1714  0229  307F               	movlw	low (STR_5| (0+32768))
  1715  022A  0020               	movlb	0	; select bank0
  1716  022B  00A5               	movwf	Lcd_Write_String@a
  1717  022C  3085               	movlw	high (STR_5| (0+32768))
  1718  022D  00A6               	movwf	Lcd_Write_String@a+1
  1719  022E  3184  248C  3181   	fcall	_Lcd_Write_String
  1720                           
  1721                           ;main.c: 63: Lcd_Set_Cursor(1,4);
  1722  0231  3004               	movlw	4
  1723  0232  0020               	movlb	0	; select bank0
  1724  0233  00BF               	movwf	??_main
  1725  0234  083F               	movf	??_main,w
  1726  0235  00A3               	movwf	Lcd_Set_Cursor@b
  1727  0236  3001               	movlw	1
  1728  0237  3183  2332  3181   	fcall	_Lcd_Set_Cursor
  1729                           
  1730                           ;main.c: 64: Lcd_Write_String("  ");
  1731  023A  302A               	movlw	low ((STR_7+6)| (0+32768))
  1732  023B  0020               	movlb	0	; select bank0
  1733  023C  00A5               	movwf	Lcd_Write_String@a
  1734  023D  3085               	movlw	high ((STR_7+6)| (0+32768))
  1735  023E  00A6               	movwf	Lcd_Write_String@a+1
  1736  023F  3184  248C  3181   	fcall	_Lcd_Write_String
  1737                           
  1738                           ;main.c: 65: Lcd_Set_Cursor(1,4);
  1739  0242  3004               	movlw	4
  1740  0243  0020               	movlb	0	; select bank0
  1741  0244  00BF               	movwf	??_main
  1742  0245  083F               	movf	??_main,w
  1743  0246  00A3               	movwf	Lcd_Set_Cursor@b
  1744  0247  3001               	movlw	1
  1745  0248  3183  2332  3181   	fcall	_Lcd_Set_Cursor
  1746                           
  1747                           ;main.c: 66: Lcd_Write_String(buffer_sec);
  1748  024B  304C               	movlw	low _buffer_sec
  1749  024C  0020               	movlb	0	; select bank0
  1750  024D  00A5               	movwf	Lcd_Write_String@a
  1751  024E  3000               	movlw	high _buffer_sec
  1752  024F  00A6               	movwf	Lcd_Write_String@a+1
  1753  0250  3184  248C  3181   	fcall	_Lcd_Write_String
  1754  0253                     l1547:	
  1755                           
  1756                           ;main.c: 67: }
  1757                           ;main.c: 70: _delay((unsigned long)((100)*(32000000/4000.0)));
  1758  0253  3005               	movlw	5
  1759  0254  0020               	movlb	0	; select bank0
  1760  0255  00C0               	movwf	??_main+1
  1761  0256  300F               	movlw	15
  1762  0257  00BF               	movwf	??_main
  1763  0258  30F1               	movlw	241
  1764  0259                     u1277:	
  1765  0259  0B89               	decfsz	9,f
  1766  025A  2A59               	goto	u1277
  1767  025B  0BBF               	decfsz	??_main,f
  1768  025C  2A59               	goto	u1277
  1769  025D  0BC0               	decfsz	??_main+1,f
  1770  025E  2A59               	goto	u1277
  1771                           
  1772                           ;main.c: 74: if(RB3==1)
  1773  025F  0020               	movlb	0	; select bank0
  1774  0260  1D8D               	btfss	13,3	;volatile
  1775  0261  2A8F               	goto	l1563
  1776                           
  1777                           ;main.c: 75: {
  1778                           ;main.c: 76: T0CON0bits.T0EN=0;
  1779  0262  139E               	bcf	30,7	;volatile
  1780                           
  1781                           ;main.c: 77: Lcd_Set_Cursor(2,1);
  1782  0263  01A3               	clrf	Lcd_Set_Cursor@b
  1783  0264  0AA3               	incf	Lcd_Set_Cursor@b,f
  1784  0265  3002               	movlw	2
  1785  0266  3183  2332  3181   	fcall	_Lcd_Set_Cursor
  1786                           
  1787                           ;main.c: 78: Lcd_Write_String("        ");
  1788  0269  3024               	movlw	low (STR_7| (0+32768))
  1789  026A  0020               	movlb	0	; select bank0
  1790  026B  00A5               	movwf	Lcd_Write_String@a
  1791  026C  3085               	movlw	high (STR_7| (0+32768))
  1792  026D  00A6               	movwf	Lcd_Write_String@a+1
  1793  026E  3184  248C  3181   	fcall	_Lcd_Write_String
  1794                           
  1795                           ;main.c: 79: Lcd_Set_Cursor(2,1);
  1796  0271  0020               	movlb	0	; select bank0
  1797  0272  01A3               	clrf	Lcd_Set_Cursor@b
  1798  0273  0AA3               	incf	Lcd_Set_Cursor@b,f
  1799  0274  3002               	movlw	2
  1800  0275  3183  2332  3181   	fcall	_Lcd_Set_Cursor
  1801                           
  1802                           ;main.c: 80: Lcd_Write_String("Stopped");
  1803  0278  3066               	movlw	low (STR_8| (0+32768))
  1804  0279  0020               	movlb	0	; select bank0
  1805  027A  00A5               	movwf	Lcd_Write_String@a
  1806  027B  3085               	movlw	high (STR_8| (0+32768))
  1807  027C  00A6               	movwf	Lcd_Write_String@a+1
  1808  027D  3184  248C  3181   	fcall	_Lcd_Write_String
  1809                           
  1810                           ;main.c: 81: _delay((unsigned long)((500)*(32000000/4000.0)));
  1811  0280  3015               	movlw	21
  1812  0281  0020               	movlb	0	; select bank0
  1813  0282  00C0               	movwf	??_main+1
  1814  0283  304B               	movlw	75
  1815  0284  00BF               	movwf	??_main
  1816  0285  30BE               	movlw	190
  1817  0286                     u1287:	
  1818  0286  0B89               	decfsz	9,f
  1819  0287  2A86               	goto	u1287
  1820  0288  0BBF               	decfsz	??_main,f
  1821  0289  2A86               	goto	u1287
  1822  028A  0BC0               	decfsz	??_main+1,f
  1823  028B  2A86               	goto	u1287
  1824  028C  0000               	nop
  1825                           
  1826                           ;main.c: 82: LATCbits.LATC1=1;
  1827  028D  0020               	movlb	0	; select bank0
  1828  028E  1498               	bsf	24,1	;volatile
  1829  028F                     l1563:	
  1830                           
  1831                           ;main.c: 83: }
  1832                           ;main.c: 85: if(RB2==1)
  1833  028F  1D0D               	btfss	13,2	;volatile
  1834  0290  2ABE               	goto	l1577
  1835                           
  1836                           ;main.c: 86: {
  1837                           ;main.c: 87: T0CON0bits.T0EN=1;
  1838  0291  179E               	bsf	30,7	;volatile
  1839                           
  1840                           ;main.c: 88: Lcd_Set_Cursor(2,1);
  1841  0292  01A3               	clrf	Lcd_Set_Cursor@b
  1842  0293  0AA3               	incf	Lcd_Set_Cursor@b,f
  1843  0294  3002               	movlw	2
  1844  0295  3183  2332  3181   	fcall	_Lcd_Set_Cursor
  1845                           
  1846                           ;main.c: 89: Lcd_Write_String("        ");
  1847  0298  3024               	movlw	low (STR_7| (0+32768))
  1848  0299  0020               	movlb	0	; select bank0
  1849  029A  00A5               	movwf	Lcd_Write_String@a
  1850  029B  3085               	movlw	high (STR_7| (0+32768))
  1851  029C  00A6               	movwf	Lcd_Write_String@a+1
  1852  029D  3184  248C  3181   	fcall	_Lcd_Write_String
  1853                           
  1854                           ;main.c: 90: Lcd_Set_Cursor(2,1);
  1855  02A0  0020               	movlb	0	; select bank0
  1856  02A1  01A3               	clrf	Lcd_Set_Cursor@b
  1857  02A2  0AA3               	incf	Lcd_Set_Cursor@b,f
  1858  02A3  3002               	movlw	2
  1859  02A4  3183  2332  3181   	fcall	_Lcd_Set_Cursor
  1860                           
  1861                           ;main.c: 91: Lcd_Write_String("Exposing");
  1862  02A7  305D               	movlw	low (STR_10| (0+32768))
  1863  02A8  0020               	movlb	0	; select bank0
  1864  02A9  00A5               	movwf	Lcd_Write_String@a
  1865  02AA  3085               	movlw	high (STR_10| (0+32768))
  1866  02AB  00A6               	movwf	Lcd_Write_String@a+1
  1867  02AC  3184  248C  3181   	fcall	_Lcd_Write_String
  1868                           
  1869                           ;main.c: 92: LATCbits.LATC1=0;
  1870  02AF  0020               	movlb	0	; select bank0
  1871  02B0  1098               	bcf	24,1	;volatile
  1872                           
  1873                           ;main.c: 93: _delay((unsigned long)((500)*(32000000/4000.0)));
  1874  02B1  3015               	movlw	21
  1875  02B2  0020               	movlb	0	; select bank0
  1876  02B3  00C0               	movwf	??_main+1
  1877  02B4  304B               	movlw	75
  1878  02B5  00BF               	movwf	??_main
  1879  02B6  30BE               	movlw	190
  1880  02B7                     u1297:	
  1881  02B7  0B89               	decfsz	9,f
  1882  02B8  2AB7               	goto	u1297
  1883  02B9  0BBF               	decfsz	??_main,f
  1884  02BA  2AB7               	goto	u1297
  1885  02BB  0BC0               	decfsz	??_main+1,f
  1886  02BC  2AB7               	goto	u1297
  1887  02BD  0000               	nop
  1888  02BE                     l1577:	
  1889                           
  1890                           ;main.c: 95: }
  1891                           ;main.c: 97: if(RB0==1)
  1892  02BE  0020               	movlb	0	; select bank0
  1893  02BF  1C0D               	btfss	13,0	;volatile
  1894  02C0  2AD1               	goto	l1581
  1895                           
  1896                           ;main.c: 98: {
  1897                           ;main.c: 99: min++;
  1898  02C1  3001               	movlw	1
  1899  02C2  07C5               	addwf	_min,f
  1900  02C3  3000               	movlw	0
  1901  02C4  3DC6               	addwfc	_min+1,f
  1902                           
  1903                           ;main.c: 100: _delay((unsigned long)((100)*(32000000/4000.0)));
  1904  02C5  3005               	movlw	5
  1905  02C6  0020               	movlb	0	; select bank0
  1906  02C7  00C0               	movwf	??_main+1
  1907  02C8  300F               	movlw	15
  1908  02C9  00BF               	movwf	??_main
  1909  02CA  30F1               	movlw	241
  1910  02CB                     u1307:	
  1911  02CB  0B89               	decfsz	9,f
  1912  02CC  2ACB               	goto	u1307
  1913  02CD  0BBF               	decfsz	??_main,f
  1914  02CE  2ACB               	goto	u1307
  1915  02CF  0BC0               	decfsz	??_main+1,f
  1916  02D0  2ACB               	goto	u1307
  1917  02D1                     l1581:	
  1918                           
  1919                           ;main.c: 101: }
  1920                           ;main.c: 103: if(RB1==1)
  1921  02D1  0020               	movlb	0	; select bank0
  1922  02D2  1C8D               	btfss	13,1	;volatile
  1923  02D3  29EF               	goto	l1525
  1924                           
  1925                           ;main.c: 104: {
  1926                           ;main.c: 105: min--;
  1927  02D4  30FF               	movlw	255
  1928  02D5  07C5               	addwf	_min,f
  1929  02D6  30FF               	movlw	255
  1930  02D7  3DC6               	addwfc	_min+1,f
  1931                           
  1932                           ;main.c: 106: if(min<0)
  1933  02D8  1FC6               	btfss	_min+1,7
  1934  02D9  2ADE               	goto	l1589
  1935                           
  1936                           ;main.c: 107: {
  1937                           ;main.c: 108: min=0;
  1938  02DA  01C5               	clrf	_min
  1939  02DB  01C6               	clrf	_min+1
  1940                           
  1941                           ;main.c: 109: sec=0;
  1942  02DC  01C3               	clrf	_sec
  1943  02DD  01C4               	clrf	_sec+1
  1944  02DE                     l1589:	
  1945                           
  1946                           ;main.c: 110: }
  1947                           ;main.c: 111: _delay((unsigned long)((100)*(32000000/4000.0)));
  1948  02DE  3005               	movlw	5
  1949  02DF  0020               	movlb	0	; select bank0
  1950  02E0  00C0               	movwf	??_main+1
  1951  02E1  300F               	movlw	15
  1952  02E2  00BF               	movwf	??_main
  1953  02E3  30F1               	movlw	241
  1954  02E4                     u1317:	
  1955  02E4  0B89               	decfsz	9,f
  1956  02E5  2AE4               	goto	u1317
  1957  02E6  0BBF               	decfsz	??_main,f
  1958  02E7  2AE4               	goto	u1317
  1959  02E8  0BC0               	decfsz	??_main+1,f
  1960  02E9  2AE4               	goto	u1317
  1961  02EA  29EF               	goto	l1525
  1962  02EB                     __end_of_main:	
  1963                           
  1964                           	psect	text1
  1965  007A                     __ptext1:	
  1966 ;; *************** function _sprintf *****************
  1967 ;; Defined at:
  1968 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  sp              1    wreg     PTR unsigned char 
  1971 ;;		 -> buffer_min(3), buffer_sec(3), 
  1972 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  1973 ;;		 -> STR_3(4), STR_2(4), 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  sp              1   29[BANK0 ] PTR unsigned char 
  1976 ;;		 -> buffer_min(3), buffer_sec(3), 
  1977 ;;  tmpval          4    0        struct .
  1978 ;;  width           2   27[BANK0 ] int 
  1979 ;;  val             2   25[BANK0 ] unsigned int 
  1980 ;;  cp              2    0        PTR const unsigned char 
  1981 ;;  len             2    0        unsigned int 
  1982 ;;  c               1   30[BANK0 ] char 
  1983 ;;  flag            1   24[BANK0 ] unsigned char 
  1984 ;;  prec            1   23[BANK0 ] char 
  1985 ;;  ap              1   22[BANK0 ] PTR void [1]
  1986 ;;		 -> ?_sprintf(2), 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  2   14[BANK0 ] int 
  1989 ;; Registers used:
  1990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1996 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1997 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1998 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1999 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2000 ;;Total ram usage:       17 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:    5
  2003 ;; This function calls:
  2004 ;;		___lwdiv
  2005 ;;		___lwmod
  2006 ;;		___wmul
  2007 ;;		_isdigit
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           
  2014                           ;psect for function _sprintf
  2015  007A                     _sprintf:	
  2016                           
  2017                           ;incstack = 0
  2018                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2019                           ;sprintf@sp stored from wreg
  2020  007A  0020               	movlb	0	; select bank0
  2021  007B  00BD               	movwf	sprintf@sp
  2022                           
  2023                           ;doprnt.c: 494: va_list ap;
  2024                           ;doprnt.c: 499: signed char c;
  2025                           ;doprnt.c: 501: int width;
  2026                           ;doprnt.c: 506: signed char prec;
  2027                           ;doprnt.c: 508: unsigned char flag;
  2028                           ;doprnt.c: 523: union {
  2029                           ;doprnt.c: 524: unsigned long vd;
  2030                           ;doprnt.c: 525: double integ;
  2031                           ;doprnt.c: 526: } tmpval;
  2032                           ;doprnt.c: 528: unsigned int val;
  2033                           ;doprnt.c: 529: unsigned len;
  2034                           ;doprnt.c: 530: const char * cp;
  2035                           ;doprnt.c: 533: *ap = __va_start();
  2036  007C  3030               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2037  007D  00B2               	movwf	??_sprintf
  2038  007E  0832               	movf	??_sprintf,w
  2039  007F  00B6               	movwf	sprintf@ap
  2040  0080                     l1471:	
  2041                           ;doprnt.c: 536: while(c = *f++) {
  2042                           
  2043  0080  0020               	movlb	0	; select bank0
  2044  0081  082F               	movf	sprintf@f+1,w
  2045  0082  00B3               	movwf	??_sprintf+1
  2046  0083  082E               	movf	sprintf@f,w
  2047  0084  00B2               	movwf	??_sprintf
  2048  0085  0AAE               	incf	sprintf@f,f
  2049  0086  1903               	skipnz
  2050  0087  0AAF               	incf	sprintf@f+1,f
  2051  0088  0832               	movf	??_sprintf,w
  2052  0089  0084               	movwf	4
  2053  008A  0833               	movf	??_sprintf+1,w
  2054  008B  0085               	movwf	5
  2055  008C  0800               	movf	0,w	;code access
  2056  008D  00B4               	movwf	??_sprintf+2
  2057  008E  0834               	movf	??_sprintf+2,w
  2058  008F  00BE               	movwf	sprintf@c
  2059  0090  083E               	movf	sprintf@c,w
  2060  0091  1903               	btfsc	3,2
  2061  0092  29C5               	goto	l1473
  2062                           
  2063                           ;doprnt.c: 538: if(c != '%')
  2064  0093  3025               	movlw	37
  2065  0094  063E               	xorwf	sprintf@c,w
  2066  0095  1903               	btfsc	3,2
  2067  0096  28A3               	goto	l1397
  2068                           
  2069                           ;doprnt.c: 540: {
  2070                           ;doprnt.c: 541: ((*sp++ = (c)));
  2071  0097  083E               	movf	sprintf@c,w
  2072  0098  00B2               	movwf	??_sprintf
  2073  0099  083D               	movf	sprintf@sp,w
  2074  009A  0086               	movwf	6
  2075  009B  0187               	clrf	7
  2076  009C  0832               	movf	??_sprintf,w
  2077  009D  0081               	movwf	1
  2078  009E  3001               	movlw	1
  2079  009F  00B2               	movwf	??_sprintf
  2080  00A0  0832               	movf	??_sprintf,w
  2081  00A1  07BD               	addwf	sprintf@sp,f
  2082                           
  2083                           ;doprnt.c: 542: continue;
  2084  00A2  2880               	goto	l1471
  2085  00A3                     l1397:	
  2086                           
  2087                           ;doprnt.c: 543: }
  2088                           ;doprnt.c: 546: width = 0;
  2089  00A3  01BB               	clrf	sprintf@width
  2090  00A4  01BC               	clrf	sprintf@width+1
  2091                           
  2092                           ;doprnt.c: 548: flag = 0;
  2093  00A5  01B8               	clrf	sprintf@flag
  2094                           
  2095                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2096  00A6  082E               	movf	sprintf@f,w
  2097  00A7  0084               	movwf	4
  2098  00A8  082F               	movf	sprintf@f+1,w
  2099  00A9  0085               	movwf	5
  2100  00AA  0800               	movf	0,w	;code access
  2101  00AB  3185  2540  3180   	fcall	_isdigit
  2102  00AE  1C03               	btfss	3,0
  2103  00AF  28E1               	goto	l1413
  2104                           
  2105                           ;doprnt.c: 598: width = 0;
  2106  00B0  0020               	movlb	0	; select bank0
  2107  00B1  01BB               	clrf	sprintf@width
  2108  00B2  01BC               	clrf	sprintf@width+1
  2109  00B3                     l1403:	
  2110                           ;doprnt.c: 599: do {
  2111                           
  2112                           
  2113                           ;doprnt.c: 600: width *= 10;
  2114  00B3  300A               	movlw	10
  2115  00B4  0020               	movlb	0	; select bank0
  2116  00B5  00A0               	movwf	___wmul@multiplier
  2117  00B6  3000               	movlw	0
  2118  00B7  00A1               	movwf	___wmul@multiplier+1
  2119  00B8  083C               	movf	sprintf@width+1,w
  2120  00B9  00A3               	movwf	___wmul@multiplicand+1
  2121  00BA  083B               	movf	sprintf@width,w
  2122  00BB  00A2               	movwf	___wmul@multiplicand
  2123  00BC  3184  2470  3180   	fcall	___wmul
  2124  00BF  0020               	movlb	0	; select bank0
  2125  00C0  0821               	movf	?___wmul+1,w
  2126  00C1  00BC               	movwf	sprintf@width+1
  2127  00C2  0820               	movf	?___wmul,w
  2128  00C3  00BB               	movwf	sprintf@width
  2129                           
  2130                           ;doprnt.c: 601: width += *f++ - '0';
  2131  00C4  082E               	movf	sprintf@f,w
  2132  00C5  0084               	movwf	4
  2133  00C6  082F               	movf	sprintf@f+1,w
  2134  00C7  0085               	movwf	5
  2135  00C8  0800               	movf	0,w	;code access
  2136  00C9  3ED0               	addlw	208
  2137  00CA  00B2               	movwf	??_sprintf
  2138  00CB  30FF               	movlw	255
  2139  00CC  1803               	skipnc
  2140  00CD  3000               	movlw	0
  2141  00CE  00B3               	movwf	??_sprintf+1
  2142  00CF  0832               	movf	??_sprintf,w
  2143  00D0  07BB               	addwf	sprintf@width,f
  2144  00D1  0833               	movf	??_sprintf+1,w
  2145  00D2  3DBC               	addwfc	sprintf@width+1,f
  2146  00D3  3001               	movlw	1
  2147  00D4  07AE               	addwf	sprintf@f,f
  2148  00D5  3000               	movlw	0
  2149  00D6  3DAF               	addwfc	sprintf@f+1,f
  2150                           
  2151                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2152  00D7  082E               	movf	sprintf@f,w
  2153  00D8  0084               	movwf	4
  2154  00D9  082F               	movf	sprintf@f+1,w
  2155  00DA  0085               	movwf	5
  2156  00DB  0800               	movf	0,w	;code access
  2157  00DC  3185  2540  3180   	fcall	_isdigit
  2158  00DF  1803               	btfsc	3,0
  2159  00E0  28B3               	goto	l1403
  2160  00E1                     l1413:	
  2161                           ;doprnt.c: 822: }
  2162                           
  2163                           ;doprnt.c: 813: continue;
  2164                           
  2165                           ;doprnt.c: 802: default:
  2166                           
  2167                           ;doprnt.c: 698: case 'i':
  2168                           ;doprnt.c: 699: break;
  2169                           
  2170                           ;doprnt.c: 697: case 'd':
  2171                           
  2172                           ;doprnt.c: 638: goto alldone;
  2173                           
  2174                           ;doprnt.c: 637: case 0:
  2175                           
  2176                           ;doprnt.c: 608: }
  2177                           ;doprnt.c: 635: switch(c = *f++) {
  2178                           
  2179  00E1  0020               	movlb	0	; select bank0
  2180  00E2  082F               	movf	sprintf@f+1,w
  2181  00E3  00B3               	movwf	??_sprintf+1
  2182  00E4  082E               	movf	sprintf@f,w
  2183  00E5  00B2               	movwf	??_sprintf
  2184  00E6  0AAE               	incf	sprintf@f,f
  2185  00E7  1903               	skipnz
  2186  00E8  0AAF               	incf	sprintf@f+1,f
  2187  00E9  0832               	movf	??_sprintf,w
  2188  00EA  0084               	movwf	4
  2189  00EB  0833               	movf	??_sprintf+1,w
  2190  00EC  0085               	movwf	5
  2191  00ED  0800               	movf	0,w	;code access
  2192  00EE  00BE               	movwf	sprintf@c
  2193                           
  2194                           ; Switch size 1, requested type "space"
  2195                           ; Number of cases is 3, Range of values is 0 to 105
  2196                           ; switch strategies available:
  2197                           ; Name         Instructions Cycles
  2198                           ; simple_byte           10     6 (average)
  2199                           ; direct_byte          218     6 (fixed)
  2200                           ; jumptable            260     6 (fixed)
  2201                           ;	Chosen strategy is simple_byte
  2202  00EF  3A00               	xorlw	0	; case 0
  2203  00F0  1903               	skipnz
  2204  00F1  29C5               	goto	l1473
  2205  00F2  3A64               	xorlw	100	; case 100
  2206  00F3  1903               	skipnz
  2207  00F4  28F9               	goto	l1415
  2208  00F5  3A0D               	xorlw	13	; case 105
  2209  00F6  1903               	skipnz
  2210  00F7  28F9               	goto	l1415
  2211  00F8  2880               	goto	l1471
  2212  00F9                     l1415:	
  2213                           
  2214                           ;doprnt.c: 1253: {
  2215                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2216  00F9  0020               	movlb	0	; select bank0
  2217  00FA  0836               	movf	sprintf@ap,w
  2218  00FB  0086               	movwf	6
  2219  00FC  0187               	clrf	7
  2220  00FD  3F40               	moviw [0]fsr1
  2221  00FE  00B9               	movwf	sprintf@val
  2222  00FF  3F41               	moviw [1]fsr1
  2223  0100  00BA               	movwf	sprintf@val+1
  2224  0101  3002               	movlw	2
  2225  0102  00B2               	movwf	??_sprintf
  2226  0103  0832               	movf	??_sprintf,w
  2227  0104  07B6               	addwf	sprintf@ap,f
  2228                           
  2229                           ;doprnt.c: 1261: if((int)val < 0) {
  2230  0105  1FBA               	btfss	sprintf@val+1,7
  2231  0106  2910               	goto	l1425
  2232                           
  2233                           ;doprnt.c: 1262: flag |= 0x03;
  2234  0107  3003               	movlw	3
  2235  0108  00B2               	movwf	??_sprintf
  2236  0109  0832               	movf	??_sprintf,w
  2237  010A  04B8               	iorwf	sprintf@flag,f
  2238                           
  2239                           ;doprnt.c: 1263: val = -val;
  2240  010B  09B9               	comf	sprintf@val,f
  2241  010C  09BA               	comf	sprintf@val+1,f
  2242  010D  0AB9               	incf	sprintf@val,f
  2243  010E  1903               	skipnz
  2244  010F  0ABA               	incf	sprintf@val+1,f
  2245  0110                     l1425:	
  2246                           
  2247                           ;doprnt.c: 1264: }
  2248                           ;doprnt.c: 1266: }
  2249                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2250  0110  01BE               	clrf	sprintf@c
  2251  0111  0ABE               	incf	sprintf@c,f
  2252  0112  3005               	movlw	5
  2253  0113  063E               	xorwf	sprintf@c,w
  2254  0114  1903               	btfsc	3,2
  2255  0115  2935               	goto	l1437
  2256  0116                     l1431:	
  2257                           
  2258                           ;doprnt.c: 1306: if(val < dpowers[c])
  2259  0116  083E               	movf	sprintf@c,w
  2260  0117  00B2               	movwf	??_sprintf
  2261  0118  01B3               	clrf	??_sprintf+1
  2262  0119  35B2               	lslf	??_sprintf,f
  2263  011A  0DB3               	rlf	??_sprintf+1,f
  2264  011B  301A               	movlw	low (_dpowers| (0+32768))
  2265  011C  0732               	addwf	??_sprintf,w
  2266  011D  0084               	movwf	4
  2267  011E  3085               	movlw	high (_dpowers| (0+32768))
  2268  011F  3D33               	addwfc	??_sprintf+1,w
  2269  0120  0085               	movwf	5
  2270  0121  3F00               	moviw [0]fsr0
  2271  0122  00B4               	movwf	??_sprintf+2
  2272  0123  3F01               	moviw [1]fsr0
  2273  0124  00B5               	movwf	??_sprintf+3
  2274  0125  0835               	movf	??_sprintf+3,w
  2275  0126  023A               	subwf	sprintf@val+1,w
  2276  0127  1D03               	skipz
  2277  0128  292B               	goto	u1035
  2278  0129  0834               	movf	??_sprintf+2,w
  2279  012A  0239               	subwf	sprintf@val,w
  2280  012B                     u1035:	
  2281  012B  1C03               	btfss	3,0
  2282  012C  2935               	goto	l1437
  2283                           
  2284                           ;doprnt.c: 1307: break;
  2285  012D  3001               	movlw	1
  2286  012E  00B2               	movwf	??_sprintf
  2287  012F  0832               	movf	??_sprintf,w
  2288  0130  07BE               	addwf	sprintf@c,f
  2289  0131  3005               	movlw	5
  2290  0132  063E               	xorwf	sprintf@c,w
  2291  0133  1D03               	btfss	3,2
  2292  0134  2916               	goto	l1431
  2293  0135                     l1437:	
  2294                           
  2295                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2296  0135  083B               	movf	sprintf@width,w
  2297  0136  043C               	iorwf	sprintf@width+1,w
  2298  0137  1903               	btfsc	3,2
  2299  0138  2941               	goto	l189
  2300  0139  0838               	movf	sprintf@flag,w
  2301  013A  3903               	andlw	3
  2302  013B  1903               	btfsc	3,2
  2303  013C  2941               	goto	l189
  2304                           
  2305                           ;doprnt.c: 1346: width--;
  2306  013D  30FF               	movlw	255
  2307  013E  07BB               	addwf	sprintf@width,f
  2308  013F  30FF               	movlw	255
  2309  0140  3DBC               	addwfc	sprintf@width+1,f
  2310  0141                     l189:	
  2311                           
  2312                           ;doprnt.c: 1381: if(width > c)
  2313  0141  083E               	movf	sprintf@c,w
  2314  0142  00B2               	movwf	??_sprintf
  2315  0143  01B3               	clrf	??_sprintf+1
  2316  0144  1BB2               	btfsc	??_sprintf,7
  2317  0145  03B3               	decf	??_sprintf+1,f
  2318  0146  0833               	movf	??_sprintf+1,w
  2319  0147  3A80               	xorlw	128
  2320  0148  00B4               	movwf	??_sprintf+2
  2321  0149  083C               	movf	sprintf@width+1,w
  2322  014A  3A80               	xorlw	128
  2323  014B  0234               	subwf	??_sprintf+2,w
  2324  014C  1D03               	skipz
  2325  014D  2950               	goto	u1075
  2326  014E  083B               	movf	sprintf@width,w
  2327  014F  0232               	subwf	??_sprintf,w
  2328  0150                     u1075:	
  2329  0150  1803               	skipnc
  2330  0151  295D               	goto	l1445
  2331                           
  2332                           ;doprnt.c: 1382: width -= c;
  2333  0152  0020               	movlb	0	; select bank0
  2334  0153  083E               	movf	sprintf@c,w
  2335  0154  00B2               	movwf	??_sprintf
  2336  0155  01B3               	clrf	??_sprintf+1
  2337  0156  1BB2               	btfsc	??_sprintf,7
  2338  0157  03B3               	decf	??_sprintf+1,f
  2339  0158  0832               	movf	??_sprintf,w
  2340  0159  02BB               	subwf	sprintf@width,f
  2341  015A  0833               	movf	??_sprintf+1,w
  2342  015B  3BBC               	subwfb	sprintf@width+1,f
  2343  015C  2960               	goto	l1447
  2344  015D                     l1445:	
  2345                           
  2346                           ;doprnt.c: 1383: else
  2347                           ;doprnt.c: 1384: width = 0;
  2348  015D  0020               	movlb	0	; select bank0
  2349  015E  01BB               	clrf	sprintf@width
  2350  015F  01BC               	clrf	sprintf@width+1
  2351  0160                     l1447:	
  2352                           
  2353                           ;doprnt.c: 1422: {
  2354                           ;doprnt.c: 1424: if(width
  2355                           ;doprnt.c: 1428: )
  2356  0160  083B               	movf	sprintf@width,w
  2357  0161  043C               	iorwf	sprintf@width+1,w
  2358  0162  1903               	btfsc	3,2
  2359  0163  2977               	goto	l1455
  2360  0164                     l1449:	
  2361                           ;doprnt.c: 1429: do
  2362                           
  2363                           
  2364                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2365  0164  3020               	movlw	32
  2366  0165  00B2               	movwf	??_sprintf
  2367  0166  083D               	movf	sprintf@sp,w
  2368  0167  0086               	movwf	6
  2369  0168  0187               	clrf	7
  2370  0169  0832               	movf	??_sprintf,w
  2371  016A  0081               	movwf	1
  2372  016B  3001               	movlw	1
  2373  016C  00B2               	movwf	??_sprintf
  2374  016D  0832               	movf	??_sprintf,w
  2375  016E  07BD               	addwf	sprintf@sp,f
  2376                           
  2377                           ;doprnt.c: 1431: while(--width);
  2378  016F  30FF               	movlw	255
  2379  0170  07BB               	addwf	sprintf@width,f
  2380  0171  30FF               	movlw	255
  2381  0172  3DBC               	addwfc	sprintf@width+1,f
  2382  0173  083B               	movf	sprintf@width,w
  2383  0174  043C               	iorwf	sprintf@width+1,w
  2384  0175  1D03               	btfss	3,2
  2385  0176  2964               	goto	l1449
  2386  0177                     l1455:	
  2387                           
  2388                           ;doprnt.c: 1438: if(flag & 0x03)
  2389  0177  0838               	movf	sprintf@flag,w
  2390  0178  3903               	andlw	3
  2391  0179  1903               	btfsc	3,2
  2392  017A  2986               	goto	l1461
  2393                           
  2394                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2395  017B  302D               	movlw	45
  2396  017C  00B2               	movwf	??_sprintf
  2397  017D  083D               	movf	sprintf@sp,w
  2398  017E  0086               	movwf	6
  2399  017F  0187               	clrf	7
  2400  0180  0832               	movf	??_sprintf,w
  2401  0181  0081               	movwf	1
  2402  0182  3001               	movlw	1
  2403  0183  00B2               	movwf	??_sprintf
  2404  0184  0832               	movf	??_sprintf,w
  2405  0185  07BD               	addwf	sprintf@sp,f
  2406  0186                     l1461:	
  2407                           
  2408                           ;doprnt.c: 1469: }
  2409                           ;doprnt.c: 1472: prec = c;
  2410  0186  083E               	movf	sprintf@c,w
  2411  0187  00B2               	movwf	??_sprintf
  2412  0188  0832               	movf	??_sprintf,w
  2413  0189  00B7               	movwf	sprintf@prec
  2414  018A                     l1469:	
  2415                           ;doprnt.c: 1474: while(prec--) {
  2416                           
  2417  018A  30FF               	movlw	255
  2418  018B  00B2               	movwf	??_sprintf
  2419  018C  0832               	movf	??_sprintf,w
  2420  018D  07B7               	addwf	sprintf@prec,f
  2421  018E  0A37               	incf	sprintf@prec,w
  2422  018F  1903               	btfsc	3,2
  2423  0190  2880               	goto	l1471
  2424                           
  2425                           ;doprnt.c: 1478: {
  2426                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2427  0191  300A               	movlw	10
  2428  0192  00A8               	movwf	___lwmod@divisor
  2429  0193  3000               	movlw	0
  2430  0194  00A9               	movwf	___lwmod@divisor+1
  2431  0195  0837               	movf	sprintf@prec,w
  2432  0196  00B2               	movwf	??_sprintf
  2433  0197  01B3               	clrf	??_sprintf+1
  2434  0198  35B2               	lslf	??_sprintf,f
  2435  0199  0DB3               	rlf	??_sprintf+1,f
  2436  019A  301A               	movlw	low (_dpowers| (0+32768))
  2437  019B  0732               	addwf	??_sprintf,w
  2438  019C  0084               	movwf	4
  2439  019D  3085               	movlw	high (_dpowers| (0+32768))
  2440  019E  3D33               	addwfc	??_sprintf+1,w
  2441  019F  0085               	movwf	5
  2442  01A0  3F00               	moviw [0]fsr0
  2443  01A1  00A0               	movwf	___lwdiv@divisor
  2444  01A2  3F01               	moviw [1]fsr0
  2445  01A3  00A1               	movwf	___lwdiv@divisor+1
  2446  01A4  083A               	movf	sprintf@val+1,w
  2447  01A5  00A3               	movwf	___lwdiv@dividend+1
  2448  01A6  0839               	movf	sprintf@val,w
  2449  01A7  00A2               	movwf	___lwdiv@dividend
  2450  01A8  3183  23B6  3180   	fcall	___lwdiv
  2451  01AB  0020               	movlb	0	; select bank0
  2452  01AC  0821               	movf	?___lwdiv+1,w
  2453  01AD  00AB               	movwf	___lwmod@dividend+1
  2454  01AE  0820               	movf	?___lwdiv,w
  2455  01AF  00AA               	movwf	___lwmod@dividend
  2456  01B0  3183  23EB  3180   	fcall	___lwmod
  2457  01B3  0020               	movlb	0	; select bank0
  2458  01B4  0828               	movf	?___lwmod,w
  2459  01B5  3E30               	addlw	48
  2460  01B6  00B4               	movwf	??_sprintf+2
  2461  01B7  0834               	movf	??_sprintf+2,w
  2462  01B8  00BE               	movwf	sprintf@c
  2463                           
  2464                           ;doprnt.c: 1523: }
  2465                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2466  01B9  083E               	movf	sprintf@c,w
  2467  01BA  00B2               	movwf	??_sprintf
  2468  01BB  083D               	movf	sprintf@sp,w
  2469  01BC  0086               	movwf	6
  2470  01BD  0187               	clrf	7
  2471  01BE  0832               	movf	??_sprintf,w
  2472  01BF  0081               	movwf	1
  2473  01C0  3001               	movlw	1
  2474  01C1  00B2               	movwf	??_sprintf
  2475  01C2  0832               	movf	??_sprintf,w
  2476  01C3  07BD               	addwf	sprintf@sp,f
  2477  01C4  298A               	goto	l1469
  2478  01C5                     l1473:	
  2479                           ;doprnt.c: 1525: }
  2480                           ;doprnt.c: 1533: }
  2481                           ;doprnt.c: 1535: alldone:
  2482                           
  2483                           
  2484                           ;doprnt.c: 1538: *sp = 0;
  2485  01C5  0020               	movlb	0	; select bank0
  2486  01C6  083D               	movf	sprintf@sp,w
  2487  01C7  0086               	movwf	6
  2488  01C8  0187               	clrf	7
  2489  01C9  0181               	clrf	1
  2490  01CA  0008               	return
  2491  01CB                     __end_of_sprintf:	
  2492                           ;doprnt.c: 1540: return 0;
  2493                           ;	Return value of _sprintf is never used
  2494                           
  2495                           
  2496                           	psect	text2
  2497  0540                     __ptext2:	
  2498 ;; *************** function _isdigit *****************
  2499 ;; Defined at:
  2500 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  c               1    wreg     unsigned char 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  c               1    1[BANK0 ] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;		None               void
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2518 ;;Total ram usage:        2 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    4
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_sprintf
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           
  2529                           ;psect for function _isdigit
  2530  0540                     _isdigit:	
  2531                           
  2532                           ;incstack = 0
  2533                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2534                           ;isdigit@c stored from wreg
  2535  0540  0020               	movlb	0	; select bank0
  2536  0541  00A1               	movwf	isdigit@c
  2537  0542  01A0               	clrf	_isdigit$583
  2538  0543  303A               	movlw	58
  2539  0544  0221               	subwf	isdigit@c,w
  2540  0545  1803               	skipnc
  2541  0546  2D4D               	goto	l1229
  2542  0547  3030               	movlw	48
  2543  0548  0221               	subwf	isdigit@c,w
  2544  0549  1C03               	skipc
  2545  054A  2D4D               	goto	l1229
  2546  054B  01A0               	clrf	_isdigit$583
  2547  054C  0AA0               	incf	_isdigit$583,f
  2548  054D                     l1229:	
  2549  054D  0C20               	rrf	_isdigit$583,w
  2550  054E  0008               	return
  2551  054F                     __end_of_isdigit:	
  2552                           
  2553                           	psect	text3
  2554  0470                     __ptext3:	
  2555 ;; *************** function ___wmul *****************
  2556 ;; Defined at:
  2557 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2560 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  product         2    4[BANK0 ] unsigned int 
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  2    0[BANK0 ] unsigned int 
  2565 ;; Registers used:
  2566 ;;		wreg, status,2, status,0
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2572 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2573 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2575 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2576 ;;Total ram usage:        6 bytes
  2577 ;; Hardware stack levels used:    1
  2578 ;; Hardware stack levels required when called:    4
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_sprintf
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           
  2587                           ;psect for function ___wmul
  2588  0470                     ___wmul:	
  2589                           
  2590                           ;incstack = 0
  2591                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2592  0470  0020               	movlb	0	; select bank0
  2593  0471  01A4               	clrf	___wmul@product
  2594  0472  01A5               	clrf	___wmul@product+1
  2595  0473                     l1235:	
  2596  0473  1C20               	btfss	___wmul@multiplier,0
  2597  0474  2C79               	goto	l282
  2598  0475  0822               	movf	___wmul@multiplicand,w
  2599  0476  07A4               	addwf	___wmul@product,f
  2600  0477  0823               	movf	___wmul@multiplicand+1,w
  2601  0478  3DA5               	addwfc	___wmul@product+1,f
  2602  0479                     l282:	
  2603  0479  3001               	movlw	1
  2604  047A                     u765:	
  2605  047A  35A2               	lslf	___wmul@multiplicand,f
  2606  047B  0DA3               	rlf	___wmul@multiplicand+1,f
  2607  047C  0B89               	decfsz	9,f
  2608  047D  2C7A               	goto	u765
  2609  047E  3001               	movlw	1
  2610  047F                     u775:	
  2611  047F  36A1               	lsrf	___wmul@multiplier+1,f
  2612  0480  0CA0               	rrf	___wmul@multiplier,f
  2613  0481  0B89               	decfsz	9,f
  2614  0482  2C7F               	goto	u775
  2615  0483  0820               	movf	___wmul@multiplier,w
  2616  0484  0421               	iorwf	___wmul@multiplier+1,w
  2617  0485  1D03               	btfss	3,2
  2618  0486  2C73               	goto	l1235
  2619  0487  0825               	movf	___wmul@product+1,w
  2620  0488  00A1               	movwf	?___wmul+1
  2621  0489  0824               	movf	___wmul@product,w
  2622  048A  00A0               	movwf	?___wmul
  2623  048B  0008               	return
  2624  048C                     __end_of___wmul:	
  2625                           
  2626                           	psect	text4
  2627  03EB                     __ptext4:	
  2628 ;; *************** function ___lwmod *****************
  2629 ;; Defined at:
  2630 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  divisor         2    8[BANK0 ] unsigned int 
  2633 ;;  dividend        2   10[BANK0 ] unsigned int 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  counter         1   13[BANK0 ] unsigned char 
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  2    8[BANK0 ] unsigned int 
  2638 ;; Registers used:
  2639 ;;		wreg, status,2, status,0
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2645 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2647 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2648 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2649 ;;Total ram usage:        6 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    4
  2652 ;; This function calls:
  2653 ;;		Nothing
  2654 ;; This function is called by:
  2655 ;;		_sprintf
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           
  2660                           ;psect for function ___lwmod
  2661  03EB                     ___lwmod:	
  2662                           
  2663                           ;incstack = 0
  2664                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2665  03EB  0020               	movlb	0	; select bank0
  2666  03EC  0828               	movf	___lwmod@divisor,w
  2667  03ED  0429               	iorwf	___lwmod@divisor+1,w
  2668  03EE  1903               	btfsc	3,2
  2669  03EF  2C13               	goto	l1291
  2670  03F0  01AD               	clrf	___lwmod@counter
  2671  03F1  0AAD               	incf	___lwmod@counter,f
  2672  03F2                     l1281:	
  2673  03F2  1BA9               	btfsc	___lwmod@divisor+1,7
  2674  03F3  2BFE               	goto	l1283
  2675  03F4  3001               	movlw	1
  2676  03F5                     u875:	
  2677  03F5  35A8               	lslf	___lwmod@divisor,f
  2678  03F6  0DA9               	rlf	___lwmod@divisor+1,f
  2679  03F7  0B89               	decfsz	9,f
  2680  03F8  2BF5               	goto	u875
  2681  03F9  3001               	movlw	1
  2682  03FA  00AC               	movwf	??___lwmod
  2683  03FB  082C               	movf	??___lwmod,w
  2684  03FC  07AD               	addwf	___lwmod@counter,f
  2685  03FD  2BF2               	goto	l1281
  2686  03FE                     l1283:	
  2687  03FE  0829               	movf	___lwmod@divisor+1,w
  2688  03FF  022B               	subwf	___lwmod@dividend+1,w
  2689  0400  1D03               	skipz
  2690  0401  2C04               	goto	u895
  2691  0402  0828               	movf	___lwmod@divisor,w
  2692  0403  022A               	subwf	___lwmod@dividend,w
  2693  0404                     u895:	
  2694  0404  1C03               	skipc
  2695  0405  2C0A               	goto	l1287
  2696  0406  0828               	movf	___lwmod@divisor,w
  2697  0407  02AA               	subwf	___lwmod@dividend,f
  2698  0408  0829               	movf	___lwmod@divisor+1,w
  2699  0409  3BAB               	subwfb	___lwmod@dividend+1,f
  2700  040A                     l1287:	
  2701  040A  3001               	movlw	1
  2702  040B                     u905:	
  2703  040B  36A9               	lsrf	___lwmod@divisor+1,f
  2704  040C  0CA8               	rrf	___lwmod@divisor,f
  2705  040D  0B89               	decfsz	9,f
  2706  040E  2C0B               	goto	u905
  2707  040F  3001               	movlw	1
  2708  0410  02AD               	subwf	___lwmod@counter,f
  2709  0411  1D03               	btfss	3,2
  2710  0412  2BFE               	goto	l1283
  2711  0413                     l1291:	
  2712  0413  082B               	movf	___lwmod@dividend+1,w
  2713  0414  00A9               	movwf	?___lwmod+1
  2714  0415  082A               	movf	___lwmod@dividend,w
  2715  0416  00A8               	movwf	?___lwmod
  2716  0417  0008               	return
  2717  0418                     __end_of___lwmod:	
  2718                           
  2719                           	psect	text5
  2720  03B6                     __ptext5:	
  2721 ;; *************** function ___lwdiv *****************
  2722 ;; Defined at:
  2723 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;  divisor         2    0[BANK0 ] unsigned int 
  2726 ;;  dividend        2    2[BANK0 ] unsigned int 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  quotient        2    5[BANK0 ] unsigned int 
  2729 ;;  counter         1    7[BANK0 ] unsigned char 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  2    0[BANK0 ] unsigned int 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2, status,0
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2739 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2740 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2742 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2743 ;;Total ram usage:        8 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    4
  2746 ;; This function calls:
  2747 ;;		Nothing
  2748 ;; This function is called by:
  2749 ;;		_sprintf
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           
  2754                           ;psect for function ___lwdiv
  2755  03B6                     ___lwdiv:	
  2756                           
  2757                           ;incstack = 0
  2758                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2759  03B6  0020               	movlb	0	; select bank0
  2760  03B7  01A5               	clrf	___lwdiv@quotient
  2761  03B8  01A6               	clrf	___lwdiv@quotient+1
  2762  03B9  0820               	movf	___lwdiv@divisor,w
  2763  03BA  0421               	iorwf	___lwdiv@divisor+1,w
  2764  03BB  1903               	btfsc	3,2
  2765  03BC  2BE6               	goto	l1269
  2766  03BD  01A7               	clrf	___lwdiv@counter
  2767  03BE  0AA7               	incf	___lwdiv@counter,f
  2768  03BF                     l1257:	
  2769  03BF  1BA1               	btfsc	___lwdiv@divisor+1,7
  2770  03C0  2BCB               	goto	l1259
  2771  03C1  3001               	movlw	1
  2772  03C2                     u805:	
  2773  03C2  35A0               	lslf	___lwdiv@divisor,f
  2774  03C3  0DA1               	rlf	___lwdiv@divisor+1,f
  2775  03C4  0B89               	decfsz	9,f
  2776  03C5  2BC2               	goto	u805
  2777  03C6  3001               	movlw	1
  2778  03C7  00A4               	movwf	??___lwdiv
  2779  03C8  0824               	movf	??___lwdiv,w
  2780  03C9  07A7               	addwf	___lwdiv@counter,f
  2781  03CA  2BBF               	goto	l1257
  2782  03CB                     l1259:	
  2783  03CB  3001               	movlw	1
  2784  03CC                     u825:	
  2785  03CC  35A5               	lslf	___lwdiv@quotient,f
  2786  03CD  0DA6               	rlf	___lwdiv@quotient+1,f
  2787  03CE  0B89               	decfsz	9,f
  2788  03CF  2BCC               	goto	u825
  2789  03D0  0821               	movf	___lwdiv@divisor+1,w
  2790  03D1  0223               	subwf	___lwdiv@dividend+1,w
  2791  03D2  1D03               	skipz
  2792  03D3  2BD6               	goto	u835
  2793  03D4  0820               	movf	___lwdiv@divisor,w
  2794  03D5  0222               	subwf	___lwdiv@dividend,w
  2795  03D6                     u835:	
  2796  03D6  1C03               	skipc
  2797  03D7  2BDD               	goto	l1265
  2798  03D8  0820               	movf	___lwdiv@divisor,w
  2799  03D9  02A2               	subwf	___lwdiv@dividend,f
  2800  03DA  0821               	movf	___lwdiv@divisor+1,w
  2801  03DB  3BA3               	subwfb	___lwdiv@dividend+1,f
  2802  03DC  1425               	bsf	___lwdiv@quotient,0
  2803  03DD                     l1265:	
  2804  03DD  3001               	movlw	1
  2805  03DE                     u845:	
  2806  03DE  36A1               	lsrf	___lwdiv@divisor+1,f
  2807  03DF  0CA0               	rrf	___lwdiv@divisor,f
  2808  03E0  0B89               	decfsz	9,f
  2809  03E1  2BDE               	goto	u845
  2810  03E2  3001               	movlw	1
  2811  03E3  02A7               	subwf	___lwdiv@counter,f
  2812  03E4  1D03               	btfss	3,2
  2813  03E5  2BCB               	goto	l1259
  2814  03E6                     l1269:	
  2815  03E6  0826               	movf	___lwdiv@quotient+1,w
  2816  03E7  00A1               	movwf	?___lwdiv+1
  2817  03E8  0825               	movf	___lwdiv@quotient,w
  2818  03E9  00A0               	movwf	?___lwdiv
  2819  03EA  0008               	return
  2820  03EB                     __end_of___lwdiv:	
  2821                           
  2822                           	psect	text6
  2823  0506                     __ptext6:	
  2824 ;; *************** function _initial_config *****************
  2825 ;; Defined at:
  2826 ;;		line 31 in file "config.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		status,2
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2844 ;;Total ram usage:        0 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    4
  2847 ;; This function calls:
  2848 ;;		Nothing
  2849 ;; This function is called by:
  2850 ;;		_main
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           
  2855                           ;psect for function _initial_config
  2856  0506                     _initial_config:	
  2857                           
  2858                           ;config.c: 33: TRISA=0X00;
  2859                           
  2860                           ;incstack = 0
  2861                           ; Regs used in _initial_config: [status,2]
  2862  0506  0020               	movlb	0	; select bank0
  2863  0507  0191               	clrf	17	;volatile
  2864                           
  2865                           ;config.c: 34: TRISB=0X00;
  2866  0508  0192               	clrf	18	;volatile
  2867                           
  2868                           ;config.c: 35: TRISC=0X00;
  2869  0509  0193               	clrf	19	;volatile
  2870                           
  2871                           ;config.c: 37: PORTA=0X00;
  2872  050A  018C               	clrf	12	;volatile
  2873                           
  2874                           ;config.c: 38: PORTB=0X00;
  2875  050B  018D               	clrf	13	;volatile
  2876                           
  2877                           ;config.c: 39: PORTC=0X00;
  2878  050C  018E               	clrf	14	;volatile
  2879                           
  2880                           ;config.c: 41: LATA=0X00;
  2881  050D  0196               	clrf	22	;volatile
  2882                           
  2883                           ;config.c: 42: LATB=0X00;
  2884  050E  0197               	clrf	23	;volatile
  2885                           
  2886                           ;config.c: 43: LATC=0X00;
  2887  050F  0198               	clrf	24	;volatile
  2888                           
  2889                           ;config.c: 45: ANSELA=0X00;
  2890  0510  003E               	movlb	30	; select bank30
  2891  0511  01B8               	clrf	56	;volatile
  2892                           
  2893                           ;config.c: 46: ANSELB=0X00;
  2894  0512  01C3               	clrf	67	;volatile
  2895                           
  2896                           ;config.c: 47: ANSELC=0X00;
  2897  0513  01CE               	clrf	78	;volatile
  2898                           
  2899                           ;config.c: 52: TRISBbits.TRISB0=1;
  2900  0514  0020               	movlb	0	; select bank0
  2901  0515  1412               	bsf	18,0	;volatile
  2902                           
  2903                           ;config.c: 53: TRISBbits.TRISB1=1;
  2904  0516  1492               	bsf	18,1	;volatile
  2905                           
  2906                           ;config.c: 54: TRISBbits.TRISB2=1;
  2907  0517  1512               	bsf	18,2	;volatile
  2908                           
  2909                           ;config.c: 55: TRISBbits.TRISB3=1;
  2910  0518  1592               	bsf	18,3	;volatile
  2911  0519  0008               	return
  2912  051A                     __end_of_initial_config:	
  2913                           
  2914                           	psect	text7
  2915  054F                     __ptext7:	
  2916 ;; *************** function _init_int *****************
  2917 ;; Defined at:
  2918 ;;		line 13 in file "config.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;		None
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;		None
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		wreg, status,2
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2936 ;;Total ram usage:        0 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    4
  2939 ;; This function calls:
  2940 ;;		Nothing
  2941 ;; This function is called by:
  2942 ;;		_main
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           
  2947                           ;psect for function _init_int
  2948  054F                     _init_int:	
  2949                           
  2950                           ;config.c: 18: T0CON0=0b00000000;
  2951                           
  2952                           ;incstack = 0
  2953                           ; Regs used in _init_int: [wreg+status,2]
  2954  054F  0020               	movlb	0	; select bank0
  2955  0550  019E               	clrf	30	;volatile
  2956                           
  2957                           ;config.c: 19: T0CON1=0b01001111;
  2958  0551  304F               	movlw	79
  2959  0552  009F               	movwf	31	;volatile
  2960                           
  2961                           ;config.c: 21: T0CON0bits.T0EN=0;
  2962  0553  139E               	bcf	30,7	;volatile
  2963                           
  2964                           ;config.c: 22: TMR0L=0X00;
  2965  0554  019C               	clrf	28	;volatile
  2966                           
  2967                           ;config.c: 23: TMR0H=0Xf3;
  2968  0555  30F3               	movlw	243
  2969  0556  009D               	movwf	29	;volatile
  2970                           
  2971                           ;config.c: 25: INTCONbits.GIE=1;
  2972  0557  178B               	bsf	11,7	;volatile
  2973                           
  2974                           ;config.c: 26: PIE0bits.TMR0IE=1;
  2975  0558  002E               	movlb	14	; select bank14
  2976  0559  1696               	bsf	22,5	;volatile
  2977                           
  2978                           ;config.c: 28: T0CON0bits.T0EN=0;
  2979  055A  0020               	movlb	0	; select bank0
  2980  055B  139E               	bcf	30,7	;volatile
  2981  055C  0008               	return
  2982  055D                     __end_of_init_int:	
  2983                           
  2984                           	psect	text8
  2985  048C                     __ptext8:	
  2986 ;; *************** function _Lcd_Write_String *****************
  2987 ;; Defined at:
  2988 ;;		line 102 in file "lcd.h"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;  a               2    5[BANK0 ] PTR unsigned char 
  2991 ;;		 -> STR_12(8), STR_11(9), STR_10(9), STR_9(9), 
  2992 ;;		 -> STR_8(8), STR_7(9), STR_6(3), STR_5(2), 
  2993 ;;		 -> STR_4(3), buffer_min(3), buffer_sec(3), STR_1(5), 
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;  i               2    8[BANK0 ] int 
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      void 
  2998 ;; Registers used:
  2999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3005 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3006 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3008 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3009 ;;Total ram usage:        5 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    6
  3012 ;; This function calls:
  3013 ;;		_Lcd_Write_Char
  3014 ;; This function is called by:
  3015 ;;		_main
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           
  3020                           ;psect for function _Lcd_Write_String
  3021  048C                     _Lcd_Write_String:	
  3022                           
  3023                           ;lcd.h: 104: int i;
  3024                           ;lcd.h: 105: for(i=0;a[i]!='\0';i++)
  3025                           
  3026                           ;incstack = 0
  3027                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3028  048C  0020               	movlb	0	; select bank0
  3029  048D  01A8               	clrf	Lcd_Write_String@i
  3030  048E  01A9               	clrf	Lcd_Write_String@i+1
  3031  048F                     l1363:	
  3032  048F  0825               	movf	Lcd_Write_String@a,w
  3033  0490  0728               	addwf	Lcd_Write_String@i,w
  3034  0491  0084               	movwf	4
  3035  0492  0826               	movf	Lcd_Write_String@a+1,w
  3036  0493  3D29               	addwfc	Lcd_Write_String@i+1,w
  3037  0494  0085               	movwf	5
  3038  0495  0012               	moviw fsr0++
  3039  0496  1903               	btfsc	3,2
  3040  0497  0008               	return
  3041                           
  3042                           ;lcd.h: 106: Lcd_Write_Char(a[i]);
  3043  0498  0825               	movf	Lcd_Write_String@a,w
  3044  0499  0728               	addwf	Lcd_Write_String@i,w
  3045  049A  0084               	movwf	4
  3046  049B  0826               	movf	Lcd_Write_String@a+1,w
  3047  049C  3D29               	addwfc	Lcd_Write_String@i+1,w
  3048  049D  0085               	movwf	5
  3049  049E  0800               	movf	0,w	;code access
  3050  049F  3184  2418  3184   	fcall	_Lcd_Write_Char
  3051  04A2  3001               	movlw	1
  3052  04A3  0020               	movlb	0	; select bank0
  3053  04A4  07A8               	addwf	Lcd_Write_String@i,f
  3054  04A5  3000               	movlw	0
  3055  04A6  3DA9               	addwfc	Lcd_Write_String@i+1,f
  3056  04A7  2C8F               	goto	l1363
  3057  04A8                     __end_of_Lcd_Write_String:	
  3058                           
  3059                           	psect	text9
  3060  0418                     __ptext9:	
  3061 ;; *************** function _Lcd_Write_Char *****************
  3062 ;; Defined at:
  3063 ;;		line 86 in file "lcd.h"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;  a               1    wreg     unsigned char 
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  a               1    4[BANK0 ] unsigned char 
  3068 ;;  y               1    3[BANK0 ] unsigned char 
  3069 ;;  temp            1    2[BANK0 ] unsigned char 
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg, status,2, status,0, pclath, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3080 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3082 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3083 ;;Total ram usage:        4 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    5
  3086 ;; This function calls:
  3087 ;;		_Lcd_Port
  3088 ;; This function is called by:
  3089 ;;		_Lcd_Write_String
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           
  3094                           ;psect for function _Lcd_Write_Char
  3095  0418                     _Lcd_Write_Char:	
  3096                           
  3097                           ;incstack = 0
  3098                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3099                           ;Lcd_Write_Char@a stored from wreg
  3100  0418  0020               	movlb	0	; select bank0
  3101  0419  00A4               	movwf	Lcd_Write_Char@a
  3102                           
  3103                           ;lcd.h: 88: char temp,y;
  3104                           ;lcd.h: 89: temp = a&0x0F;
  3105  041A  0824               	movf	Lcd_Write_Char@a,w
  3106  041B  390F               	andlw	15
  3107  041C  00A1               	movwf	??_Lcd_Write_Char
  3108  041D  0821               	movf	??_Lcd_Write_Char,w
  3109  041E  00A2               	movwf	Lcd_Write_Char@temp
  3110                           
  3111                           ;lcd.h: 90: y = a&0xF0;
  3112  041F  0824               	movf	Lcd_Write_Char@a,w
  3113  0420  39F0               	andlw	240
  3114  0421  00A1               	movwf	??_Lcd_Write_Char
  3115  0422  0821               	movf	??_Lcd_Write_Char,w
  3116  0423  00A3               	movwf	Lcd_Write_Char@y
  3117                           
  3118                           ;lcd.h: 91: RC3 = 1;
  3119  0424  158E               	bsf	14,3	;volatile
  3120                           
  3121                           ;lcd.h: 92: Lcd_Port(y>>4);
  3122  0425  0823               	movf	Lcd_Write_Char@y,w
  3123  0426  00A1               	movwf	??_Lcd_Write_Char
  3124  0427  3004               	movlw	4
  3125  0428                     u725:	
  3126  0428  36A1               	lsrf	??_Lcd_Write_Char,f
  3127  0429  0B89               	decfsz	9,f
  3128  042A  2C28               	goto	u725
  3129  042B  0821               	movf	??_Lcd_Write_Char,w
  3130  042C  3184  24DA  3184   	fcall	_Lcd_Port
  3131                           
  3132                           ;lcd.h: 93: RC4 = 1;
  3133  042F  0020               	movlb	0	; select bank0
  3134  0430  160E               	bsf	14,4	;volatile
  3135                           
  3136                           ;lcd.h: 94: _delay((unsigned long)((40)*(32000000/4000000.0)));
  3137  0431  306A               	movlw	106
  3138  0432                     u1327:	
  3139  0432  0B89               	decfsz	9,f
  3140  0433  2C32               	goto	u1327
  3141  0434  3200               	nop2
  3142                           
  3143                           ;lcd.h: 95: RC4 = 0;
  3144  0435  0020               	movlb	0	; select bank0
  3145  0436  120E               	bcf	14,4	;volatile
  3146                           
  3147                           ;lcd.h: 96: Lcd_Port(temp);
  3148  0437  0822               	movf	Lcd_Write_Char@temp,w
  3149  0438  3184  24DA  3184   	fcall	_Lcd_Port
  3150                           
  3151                           ;lcd.h: 97: RC4 = 1;
  3152  043B  0020               	movlb	0	; select bank0
  3153  043C  160E               	bsf	14,4	;volatile
  3154                           
  3155                           ;lcd.h: 98: _delay((unsigned long)((40)*(32000000/4000000.0)));
  3156  043D  306A               	movlw	106
  3157  043E                     u1337:	
  3158  043E  0B89               	decfsz	9,f
  3159  043F  2C3E               	goto	u1337
  3160  0440  3200               	nop2
  3161                           
  3162                           ;lcd.h: 99: RC4 = 0;
  3163  0441  0020               	movlb	0	; select bank0
  3164  0442  120E               	bcf	14,4	;volatile
  3165  0443  0008               	return
  3166  0444                     __end_of_Lcd_Write_Char:	
  3167                           
  3168                           	psect	text10
  3169  0332                     __ptext10:	
  3170 ;; *************** function _Lcd_Set_Cursor *****************
  3171 ;; Defined at:
  3172 ;;		line 46 in file "lcd.h"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;  a               1    wreg     unsigned char 
  3175 ;;  b               1    3[BANK0 ] unsigned char 
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;  a               1    6[BANK0 ] unsigned char 
  3178 ;;  temp            1    9[BANK0 ] unsigned char 
  3179 ;;  y               1    8[BANK0 ] unsigned char 
  3180 ;;  z               1    7[BANK0 ] unsigned char 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0, pclath, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3190 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3191 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3192 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3193 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3194 ;;Total ram usage:        7 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    6
  3197 ;; This function calls:
  3198 ;;		_Lcd_Cmd
  3199 ;; This function is called by:
  3200 ;;		_main
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function _Lcd_Set_Cursor
  3206  0332                     _Lcd_Set_Cursor:	
  3207                           
  3208                           ;incstack = 0
  3209                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3210                           ;Lcd_Set_Cursor@a stored from wreg
  3211  0332  0020               	movlb	0	; select bank0
  3212  0333  00A6               	movwf	Lcd_Set_Cursor@a
  3213                           
  3214                           ;lcd.h: 48: char temp,z,y;
  3215                           ;lcd.h: 49: if(a == 1)
  3216  0334  0326               	decf	Lcd_Set_Cursor@a,w
  3217  0335  1D03               	btfss	3,2
  3218  0336  2B54               	goto	l1337
  3219                           
  3220                           ;lcd.h: 50: {
  3221                           ;lcd.h: 51: temp = 0x80 + b - 1;
  3222  0337  0823               	movf	Lcd_Set_Cursor@b,w
  3223  0338  3E7F               	addlw	127
  3224  0339  00A4               	movwf	??_Lcd_Set_Cursor
  3225  033A  0824               	movf	??_Lcd_Set_Cursor,w
  3226  033B  00A9               	movwf	Lcd_Set_Cursor@temp
  3227                           
  3228                           ;lcd.h: 52: z = temp>>4;
  3229  033C  0829               	movf	Lcd_Set_Cursor@temp,w
  3230  033D  00A4               	movwf	??_Lcd_Set_Cursor
  3231  033E  3004               	movlw	4
  3232  033F                     u945:	
  3233  033F  36A4               	lsrf	??_Lcd_Set_Cursor,f
  3234  0340  0B89               	decfsz	9,f
  3235  0341  2B3F               	goto	u945
  3236  0342  0824               	movf	??_Lcd_Set_Cursor,w
  3237  0343  00A5               	movwf	??_Lcd_Set_Cursor+1
  3238  0344  0825               	movf	??_Lcd_Set_Cursor+1,w
  3239  0345  00A7               	movwf	Lcd_Set_Cursor@z
  3240                           
  3241                           ;lcd.h: 53: y = temp & 0x0F;
  3242  0346  0829               	movf	Lcd_Set_Cursor@temp,w
  3243  0347  390F               	andlw	15
  3244  0348  00A4               	movwf	??_Lcd_Set_Cursor
  3245  0349  0824               	movf	??_Lcd_Set_Cursor,w
  3246  034A  00A8               	movwf	Lcd_Set_Cursor@y
  3247                           
  3248                           ;lcd.h: 54: Lcd_Cmd(z);
  3249  034B  0827               	movf	Lcd_Set_Cursor@z,w
  3250  034C  3184  24F1  3183   	fcall	_Lcd_Cmd
  3251                           
  3252                           ;lcd.h: 55: Lcd_Cmd(y);
  3253  034F  0020               	movlb	0	; select bank0
  3254  0350  0828               	movf	Lcd_Set_Cursor@y,w
  3255  0351  3184  24F1         	fcall	_Lcd_Cmd
  3256                           
  3257                           ;lcd.h: 56: }
  3258  0353  0008               	return
  3259  0354                     l1337:	
  3260                           
  3261                           ;lcd.h: 57: else if(a == 2)
  3262  0354  3002               	movlw	2
  3263  0355  0020               	movlb	0	; select bank0
  3264  0356  0626               	xorwf	Lcd_Set_Cursor@a,w
  3265  0357  1D03               	btfss	3,2
  3266  0358  0008               	return
  3267                           
  3268                           ;lcd.h: 58: {
  3269                           ;lcd.h: 59: temp = 0xC0 + b - 1;
  3270  0359  0823               	movf	Lcd_Set_Cursor@b,w
  3271  035A  3EBF               	addlw	191
  3272  035B  00A4               	movwf	??_Lcd_Set_Cursor
  3273  035C  0824               	movf	??_Lcd_Set_Cursor,w
  3274  035D  00A9               	movwf	Lcd_Set_Cursor@temp
  3275                           
  3276                           ;lcd.h: 60: z = temp>>4;
  3277  035E  0829               	movf	Lcd_Set_Cursor@temp,w
  3278  035F  00A4               	movwf	??_Lcd_Set_Cursor
  3279  0360  3004               	movlw	4
  3280  0361                     u965:	
  3281  0361  36A4               	lsrf	??_Lcd_Set_Cursor,f
  3282  0362  0B89               	decfsz	9,f
  3283  0363  2B61               	goto	u965
  3284  0364  0824               	movf	??_Lcd_Set_Cursor,w
  3285  0365  00A5               	movwf	??_Lcd_Set_Cursor+1
  3286  0366  0825               	movf	??_Lcd_Set_Cursor+1,w
  3287  0367  00A7               	movwf	Lcd_Set_Cursor@z
  3288                           
  3289                           ;lcd.h: 61: y = temp & 0x0F;
  3290  0368  0829               	movf	Lcd_Set_Cursor@temp,w
  3291  0369  390F               	andlw	15
  3292  036A  00A4               	movwf	??_Lcd_Set_Cursor
  3293  036B  0824               	movf	??_Lcd_Set_Cursor,w
  3294  036C  00A8               	movwf	Lcd_Set_Cursor@y
  3295                           
  3296                           ;lcd.h: 62: Lcd_Cmd(z);
  3297  036D  0827               	movf	Lcd_Set_Cursor@z,w
  3298  036E  3184  24F1  3183   	fcall	_Lcd_Cmd
  3299                           
  3300                           ;lcd.h: 63: Lcd_Cmd(y);
  3301  0371  0020               	movlb	0	; select bank0
  3302  0372  0828               	movf	Lcd_Set_Cursor@y,w
  3303  0373  3184  24F1         	fcall	_Lcd_Cmd
  3304  0375  0008               	return
  3305  0376                     __end_of_Lcd_Set_Cursor:	
  3306                           
  3307                           	psect	text11
  3308  02EB                     __ptext11:	
  3309 ;; *************** function _Lcd_Init *****************
  3310 ;; Defined at:
  3311 ;;		line 67 in file "lcd.h"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;		None
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0, pclath, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3328 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3329 ;;Total ram usage:        1 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    6
  3332 ;; This function calls:
  3333 ;;		_Lcd_Cmd
  3334 ;;		_Lcd_Port
  3335 ;; This function is called by:
  3336 ;;		_main
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _Lcd_Init
  3342  02EB                     _Lcd_Init:	
  3343                           
  3344                           ;lcd.h: 69: Lcd_Port(0x00);
  3345                           
  3346                           ;incstack = 0
  3347                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3348  02EB  3000               	movlw	0
  3349  02EC  3184  24DA  3182   	fcall	_Lcd_Port
  3350                           
  3351                           ;lcd.h: 70: _delay((unsigned long)((20)*(32000000/4000.0)));
  3352  02EF  30D0               	movlw	208
  3353  02F0  0020               	movlb	0	; select bank0
  3354  02F1  00A3               	movwf	??_Lcd_Init
  3355  02F2  30C9               	movlw	201
  3356  02F3                     u1347:	
  3357  02F3  0B89               	decfsz	9,f
  3358  02F4  2AF3               	goto	u1347
  3359  02F5  0BA3               	decfsz	??_Lcd_Init,f
  3360  02F6  2AF3               	goto	u1347
  3361  02F7  3200               	nop2
  3362                           
  3363                           ;lcd.h: 71: Lcd_Cmd(0x03);
  3364  02F8  3003               	movlw	3
  3365  02F9  3184  24F1  3182   	fcall	_Lcd_Cmd
  3366                           
  3367                           ;lcd.h: 72: _delay((unsigned long)((5)*(32000000/4000.0)));
  3368  02FC  3034               	movlw	52
  3369  02FD  0020               	movlb	0	; select bank0
  3370  02FE  00A3               	movwf	??_Lcd_Init
  3371  02FF  30F1               	movlw	241
  3372  0300                     u1357:	
  3373  0300  0B89               	decfsz	9,f
  3374  0301  2B00               	goto	u1357
  3375  0302  0BA3               	decfsz	??_Lcd_Init,f
  3376  0303  2B00               	goto	u1357
  3377  0304  3200               	nop2
  3378                           
  3379                           ;lcd.h: 73: Lcd_Cmd(0x03);
  3380  0305  3003               	movlw	3
  3381  0306  3184  24F1  3182   	fcall	_Lcd_Cmd
  3382                           
  3383                           ;lcd.h: 74: _delay((unsigned long)((11)*(32000000/4000.0)));
  3384  0309  3073               	movlw	115
  3385  030A  0020               	movlb	0	; select bank0
  3386  030B  00A3               	movwf	??_Lcd_Init
  3387  030C  3047               	movlw	71
  3388  030D                     u1367:	
  3389  030D  0B89               	decfsz	9,f
  3390  030E  2B0D               	goto	u1367
  3391  030F  0BA3               	decfsz	??_Lcd_Init,f
  3392  0310  2B0D               	goto	u1367
  3393  0311  3200               	nop2
  3394                           
  3395                           ;lcd.h: 75: Lcd_Cmd(0x03);
  3396  0312  3003               	movlw	3
  3397  0313  3184  24F1  3182   	fcall	_Lcd_Cmd
  3398                           
  3399                           ;lcd.h: 77: Lcd_Cmd(0x02);
  3400  0316  3002               	movlw	2
  3401  0317  3184  24F1  3182   	fcall	_Lcd_Cmd
  3402                           
  3403                           ;lcd.h: 78: Lcd_Cmd(0x02);
  3404  031A  3002               	movlw	2
  3405  031B  3184  24F1  3182   	fcall	_Lcd_Cmd
  3406                           
  3407                           ;lcd.h: 79: Lcd_Cmd(0x08);
  3408  031E  3008               	movlw	8
  3409  031F  3184  24F1  3182   	fcall	_Lcd_Cmd
  3410                           
  3411                           ;lcd.h: 80: Lcd_Cmd(0x00);
  3412  0322  3000               	movlw	0
  3413  0323  3184  24F1  3182   	fcall	_Lcd_Cmd
  3414                           
  3415                           ;lcd.h: 81: Lcd_Cmd(0x0C);
  3416  0326  300C               	movlw	12
  3417  0327  3184  24F1  3182   	fcall	_Lcd_Cmd
  3418                           
  3419                           ;lcd.h: 82: Lcd_Cmd(0x00);
  3420  032A  3000               	movlw	0
  3421  032B  3184  24F1  3182   	fcall	_Lcd_Cmd
  3422                           
  3423                           ;lcd.h: 83: Lcd_Cmd(0x06);
  3424  032E  3006               	movlw	6
  3425  032F  3184  24F1         	fcall	_Lcd_Cmd
  3426  0331  0008               	return
  3427  0332                     __end_of_Lcd_Init:	
  3428                           
  3429                           	psect	text12
  3430  056E                     __ptext12:	
  3431 ;; *************** function _Lcd_Clear *****************
  3432 ;; Defined at:
  3433 ;;		line 40 in file "lcd.h"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;		None
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  2   54[None  ] int 
  3440 ;; Registers used:
  3441 ;;		wreg, status,2, status,0, pclath, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3451 ;;Total ram usage:        0 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    6
  3454 ;; This function calls:
  3455 ;;		_Lcd_Cmd
  3456 ;; This function is called by:
  3457 ;;		_main
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           
  3462                           ;psect for function _Lcd_Clear
  3463  056E                     _Lcd_Clear:	
  3464                           
  3465                           ;lcd.h: 42: Lcd_Cmd(0);
  3466                           
  3467                           ;incstack = 0
  3468                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3469  056E  3000               	movlw	0
  3470  056F  3184  24F1  3185   	fcall	_Lcd_Cmd
  3471                           
  3472                           ;lcd.h: 43: Lcd_Cmd(1);
  3473  0572  3001               	movlw	1
  3474  0573  3184  24F1         	fcall	_Lcd_Cmd
  3475  0575  0008               	return
  3476  0576                     __end_of_Lcd_Clear:	
  3477                           
  3478                           	psect	text13
  3479  04F1                     __ptext13:	
  3480 ;; *************** function _Lcd_Cmd *****************
  3481 ;; Defined at:
  3482 ;;		line 31 in file "lcd.h"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  a               1    wreg     unsigned char 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  a               1    2[BANK0 ] unsigned char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0, pclath, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3500 ;;Total ram usage:        2 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    5
  3503 ;; This function calls:
  3504 ;;		_Lcd_Port
  3505 ;; This function is called by:
  3506 ;;		_Lcd_Clear
  3507 ;;		_Lcd_Set_Cursor
  3508 ;;		_Lcd_Init
  3509 ;;		_Lcd_Shift_Right
  3510 ;;		_Lcd_Shift_Left
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           
  3515                           ;psect for function _Lcd_Cmd
  3516  04F1                     _Lcd_Cmd:	
  3517                           
  3518                           ;incstack = 0
  3519                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3520                           ;Lcd_Cmd@a stored from wreg
  3521  04F1  0020               	movlb	0	; select bank0
  3522  04F2  00A2               	movwf	Lcd_Cmd@a
  3523                           
  3524                           ;lcd.h: 33: RC3 = 0;
  3525  04F3  118E               	bcf	14,3	;volatile
  3526                           
  3527                           ;lcd.h: 34: Lcd_Port(a);
  3528  04F4  0822               	movf	Lcd_Cmd@a,w
  3529  04F5  3184  24DA  3184   	fcall	_Lcd_Port
  3530                           
  3531                           ;lcd.h: 35: RC4 = 1;
  3532  04F8  0020               	movlb	0	; select bank0
  3533  04F9  160E               	bsf	14,4	;volatile
  3534                           
  3535                           ;lcd.h: 36: _delay((unsigned long)((4)*(32000000/4000.0)));
  3536  04FA  302A               	movlw	42
  3537  04FB  0020               	movlb	0	; select bank0
  3538  04FC  00A1               	movwf	??_Lcd_Cmd
  3539  04FD  308D               	movlw	141
  3540  04FE                     u1377:	
  3541  04FE  0B89               	decfsz	9,f
  3542  04FF  2CFE               	goto	u1377
  3543  0500  0BA1               	decfsz	??_Lcd_Cmd,f
  3544  0501  2CFE               	goto	u1377
  3545  0502  3200               	nop2
  3546                           
  3547                           ;lcd.h: 37: RC4 = 0;
  3548  0503  0020               	movlb	0	; select bank0
  3549  0504  120E               	bcf	14,4	;volatile
  3550  0505  0008               	return
  3551  0506                     __end_of_Lcd_Cmd:	
  3552                           
  3553                           	psect	text14
  3554  04DA                     __ptext14:	
  3555 ;; *************** function _Lcd_Port *****************
  3556 ;; Defined at:
  3557 ;;		line 9 in file "lcd.h"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;  a               1    wreg     unsigned char 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  a               1    0[BANK0 ] unsigned char 
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  1    wreg      void 
  3564 ;; Registers used:
  3565 ;;		wreg
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3574 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3575 ;;Total ram usage:        1 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    4
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_Lcd_Cmd
  3582 ;;		_Lcd_Init
  3583 ;;		_Lcd_Write_Char
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           
  3588                           ;psect for function _Lcd_Port
  3589  04DA                     _Lcd_Port:	
  3590                           
  3591                           ;incstack = 0
  3592                           ; Regs used in _Lcd_Port: [wreg]
  3593                           ;Lcd_Port@a stored from wreg
  3594  04DA  0020               	movlb	0	; select bank0
  3595  04DB  00A0               	movwf	Lcd_Port@a
  3596                           
  3597                           ;lcd.h: 11: if(a & 1)
  3598  04DC  1C20               	btfss	Lcd_Port@a,0
  3599  04DD  2CE0               	goto	l41
  3600                           
  3601                           ;lcd.h: 12: RC5 = 1;
  3602  04DE  168E               	bsf	14,5	;volatile
  3603  04DF  2CE1               	goto	l1163
  3604  04E0                     l41:	
  3605                           
  3606                           ;lcd.h: 13: else
  3607                           ;lcd.h: 14: RC5 = 0;
  3608  04E0  128E               	bcf	14,5	;volatile
  3609  04E1                     l1163:	
  3610                           
  3611                           ;lcd.h: 16: if(a & 2)
  3612  04E1  1CA0               	btfss	Lcd_Port@a,1
  3613  04E2  2CE5               	goto	l43
  3614                           
  3615                           ;lcd.h: 17: RC6 = 1;
  3616  04E3  170E               	bsf	14,6	;volatile
  3617  04E4  2CE6               	goto	l1167
  3618  04E5                     l43:	
  3619                           
  3620                           ;lcd.h: 18: else
  3621                           ;lcd.h: 19: RC6 = 0;
  3622  04E5  130E               	bcf	14,6	;volatile
  3623  04E6                     l1167:	
  3624                           
  3625                           ;lcd.h: 21: if(a & 4)
  3626  04E6  1D20               	btfss	Lcd_Port@a,2
  3627  04E7  2CEA               	goto	l45
  3628                           
  3629                           ;lcd.h: 22: RC2 = 1;
  3630  04E8  150E               	bsf	14,2	;volatile
  3631  04E9  2CEB               	goto	l1171
  3632  04EA                     l45:	
  3633                           
  3634                           ;lcd.h: 23: else
  3635                           ;lcd.h: 24: RC2 = 0;
  3636  04EA  110E               	bcf	14,2	;volatile
  3637  04EB                     l1171:	
  3638                           
  3639                           ;lcd.h: 26: if(a & 8)
  3640  04EB  1DA0               	btfss	Lcd_Port@a,3
  3641  04EC  2CEF               	goto	l47
  3642                           
  3643                           ;lcd.h: 27: RC7 = 1;
  3644  04ED  178E               	bsf	14,7	;volatile
  3645  04EE  0008               	return
  3646  04EF                     l47:	
  3647                           
  3648                           ;lcd.h: 28: else
  3649                           ;lcd.h: 29: RC7 = 0;
  3650  04EF  138E               	bcf	14,7	;volatile
  3651  04F0  0008               	return
  3652  04F1                     __end_of_Lcd_Port:	
  3653                           
  3654                           	psect	intentry
  3655  0004                     __pintentry:	
  3656 ;; *************** function _timer *****************
  3657 ;; Defined at:
  3658 ;;		line 118 in file "main.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3674 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3675 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3676 ;;Total ram usage:        3 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    3
  3679 ;; This function calls:
  3680 ;;		i1_Lcd_Set_Cursor
  3681 ;;		i1_Lcd_Write_String
  3682 ;; This function is called by:
  3683 ;;		Interrupt level 1
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687  0004                     _timer:	
  3688                           
  3689                           ;incstack = 0
  3690  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3691                           
  3692                           ; Regs used in _timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3693  0005  3180               	pagesel	$
  3694  0006  0020               	movlb	0	; select bank0
  3695  0007  087F               	movf	127,w
  3696  0008  00FC               	movwf	??_timer+2
  3697                           
  3698                           ;main.c: 120: PIR0bits.TMR0IF=0;
  3699  0009  002E               	movlb	14	; select bank14
  3700  000A  128C               	bcf	12,5	;volatile
  3701                           
  3702                           ;main.c: 121: T0CON0bits.T0EN=0;
  3703  000B  0020               	movlb	0	; select bank0
  3704  000C  139E               	bcf	30,7	;volatile
  3705                           
  3706                           ;main.c: 123: switch (flag)
  3707  000D  2818               	goto	i1l1599
  3708  000E                     i1l109:	
  3709                           ;main.c: 124: {
  3710                           ;main.c: 125: case 0:
  3711                           
  3712                           
  3713                           ;main.c: 126: LATAbits.LATA5=1;
  3714  000E  1696               	bsf	22,5	;volatile
  3715                           
  3716                           ;main.c: 127: flag=1;
  3717  000F  3001               	movlw	1
  3718  0010  00C7               	movwf	_flag
  3719  0011  3000               	movlw	0
  3720  0012  00C8               	movwf	_flag+1
  3721                           
  3722                           ;main.c: 128: break;
  3723  0013  2825               	goto	i1l1601
  3724  0014                     i1l111:	
  3725                           ;main.c: 129: case 1:
  3726                           
  3727                           
  3728                           ;main.c: 130: LATAbits.LATA5=0;
  3729  0014  1296               	bcf	22,5	;volatile
  3730                           
  3731                           ;main.c: 131: flag=0;
  3732  0015  01C7               	clrf	_flag
  3733  0016  01C8               	clrf	_flag+1
  3734                           
  3735                           ;main.c: 133: }
  3736                           
  3737                           ;main.c: 132: break;
  3738  0017  2825               	goto	i1l1601
  3739  0018                     i1l1599:	
  3740                           
  3741                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3742                           ; Switch size 1, requested type "space"
  3743                           ; Number of cases is 1, Range of values is 0 to 0
  3744                           ; switch strategies available:
  3745                           ; Name         Instructions Cycles
  3746                           ; simple_byte            4     3 (average)
  3747                           ; direct_byte            8     6 (fixed)
  3748                           ; jumptable            260     6 (fixed)
  3749                           ;	Chosen strategy is simple_byte
  3750  0018  0848               	movf	_flag+1,w
  3751  0019  3A00               	xorlw	0	; case 0
  3752  001A  1903               	skipnz
  3753  001B  281D               	goto	i1l1655
  3754  001C  2825               	goto	i1l1601
  3755  001D                     i1l1655:	
  3756                           
  3757                           ; Switch size 1, requested type "space"
  3758                           ; Number of cases is 2, Range of values is 0 to 1
  3759                           ; switch strategies available:
  3760                           ; Name         Instructions Cycles
  3761                           ; simple_byte            7     4 (average)
  3762                           ; direct_byte           10     6 (fixed)
  3763                           ; jumptable            260     6 (fixed)
  3764                           ;	Chosen strategy is simple_byte
  3765  001D  0847               	movf	_flag,w
  3766  001E  3A00               	xorlw	0	; case 0
  3767  001F  1903               	skipnz
  3768  0020  280E               	goto	i1l109
  3769  0021  3A01               	xorlw	1	; case 1
  3770  0022  1903               	skipnz
  3771  0023  2814               	goto	i1l111
  3772  0024  2825               	goto	i1l1601
  3773  0025                     i1l1601:	
  3774                           
  3775                           ;main.c: 134: sec--;
  3776  0025  30FF               	movlw	255
  3777  0026  07C3               	addwf	_sec,f
  3778  0027  30FF               	movlw	255
  3779  0028  3DC4               	addwfc	_sec+1,f
  3780                           
  3781                           ;main.c: 136: if(sec<0)
  3782  0029  1FC4               	btfss	_sec+1,7
  3783  002A  2860               	goto	i1l1625
  3784                           
  3785                           ;main.c: 137: {
  3786                           ;main.c: 138: sec=59;
  3787  002B  303B               	movlw	59
  3788  002C  00C3               	movwf	_sec
  3789  002D  3000               	movlw	0
  3790  002E  00C4               	movwf	_sec+1
  3791                           
  3792                           ;main.c: 139: min--;
  3793  002F  30FF               	movlw	255
  3794  0030  07C5               	addwf	_min,f
  3795  0031  30FF               	movlw	255
  3796  0032  3DC6               	addwfc	_min+1,f
  3797                           
  3798                           ;main.c: 140: if(min<0)
  3799  0033  1FC6               	btfss	_min+1,7
  3800  0034  2860               	goto	i1l1625
  3801                           
  3802                           ;main.c: 141: {
  3803                           ;main.c: 142: T0CON0bits.T0EN=0;
  3804  0035  139E               	bcf	30,7	;volatile
  3805                           
  3806                           ;main.c: 143: sec=0;
  3807  0036  01C3               	clrf	_sec
  3808  0037  01C4               	clrf	_sec+1
  3809                           
  3810                           ;main.c: 144: Lcd_Set_Cursor(2,1);
  3811  0038  01F3               	clrf	i1Lcd_Set_Cursor@b
  3812  0039  0AF3               	incf	i1Lcd_Set_Cursor@b,f
  3813  003A  3002               	movlw	2
  3814  003B  3183  2376  3180   	fcall	i1_Lcd_Set_Cursor
  3815                           
  3816                           ;main.c: 145: Lcd_Write_String("        ");
  3817  003E  3024               	movlw	low (STR_7| (0+32768))
  3818  003F  00F5               	movwf	i1Lcd_Write_String@a
  3819  0040  3085               	movlw	high (STR_7| (0+32768))
  3820  0041  00F6               	movwf	i1Lcd_Write_String@a+1
  3821  0042  3184  24A8  3180   	fcall	i1_Lcd_Write_String
  3822                           
  3823                           ;main.c: 146: Lcd_Set_Cursor(2,1);
  3824  0045  01F3               	clrf	i1Lcd_Set_Cursor@b
  3825  0046  0AF3               	incf	i1Lcd_Set_Cursor@b,f
  3826  0047  3002               	movlw	2
  3827  0048  3183  2376  3180   	fcall	i1_Lcd_Set_Cursor
  3828                           
  3829                           ;main.c: 147: Lcd_Write_String("Stopped");
  3830  004B  3066               	movlw	low (STR_8| (0+32768))
  3831  004C  00F5               	movwf	i1Lcd_Write_String@a
  3832  004D  3085               	movlw	high (STR_8| (0+32768))
  3833  004E  00F6               	movwf	i1Lcd_Write_String@a+1
  3834  004F  3184  24A8  3180   	fcall	i1_Lcd_Write_String
  3835                           
  3836                           ;main.c: 148: _delay((unsigned long)((500)*(32000000/4000.0)));
  3837  0052  3015               	movlw	21
  3838  0053  00FB               	movwf	??_timer+1
  3839  0054  304B               	movlw	75
  3840  0055  00FA               	movwf	??_timer
  3841  0056  30BE               	movlw	190
  3842  0057                     u138_27:	
  3843  0057  0B89               	decfsz	9,f
  3844  0058  2857               	goto	u138_27
  3845  0059  0BFA               	decfsz	??_timer,f
  3846  005A  2857               	goto	u138_27
  3847  005B  0BFB               	decfsz	??_timer+1,f
  3848  005C  2857               	goto	u138_27
  3849  005D  3200               	nop2
  3850                           
  3851                           ;main.c: 149: LATCbits.LATC1=1;
  3852  005E  0020               	movlb	0	; select bank0
  3853  005F  1498               	bsf	24,1	;volatile
  3854  0060                     i1l1625:	
  3855                           
  3856                           ;main.c: 150: }
  3857                           ;main.c: 151: }
  3858                           ;main.c: 153: TMR0L=0X00;
  3859  0060  019C               	clrf	28	;volatile
  3860                           
  3861                           ;main.c: 154: if(min>=0)
  3862  0061  1FC6               	btfss	_min+1,7
  3863                           
  3864                           ;main.c: 155: T0CON0bits.T0EN=1;
  3865  0062  179E               	bsf	30,7	;volatile
  3866  0063  087C               	movf	??_timer+2,w
  3867  0064  00FF               	movwf	127
  3868  0065  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3869  0066  0009               	retfie
  3870  0067                     __end_of_timer:	
  3871                           
  3872                           	psect	text16
  3873  04A8                     __ptext16:	
  3874 ;; *************** function i1_Lcd_Write_String *****************
  3875 ;; Defined at:
  3876 ;;		line 102 in file "lcd.h"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;  a               2    5[COMMON] PTR unsigned char 
  3879 ;;		 -> STR_12(8), STR_11(9), STR_10(9), STR_9(9), 
  3880 ;;		 -> STR_8(8), STR_7(9), STR_6(3), STR_5(2), 
  3881 ;;		 -> STR_4(3), buffer_min(3), buffer_sec(3), STR_1(5), 
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;  Lcd_Write_St    2    8[COMMON] int 
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      void 
  3886 ;; Registers used:
  3887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3893 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3894 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3895 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3896 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3897 ;;Total ram usage:        5 bytes
  3898 ;; Hardware stack levels used:    1
  3899 ;; Hardware stack levels required when called:    2
  3900 ;; This function calls:
  3901 ;;		i1_Lcd_Write_Char
  3902 ;; This function is called by:
  3903 ;;		_timer
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           
  3908                           ;psect for function i1_Lcd_Write_String
  3909  04A8                     i1_Lcd_Write_String:	
  3910                           
  3911                           ;lcd.h: 104: int i;
  3912                           ;lcd.h: 105: for(i=0;a[i]!='\0';i++)
  3913                           
  3914                           ;incstack = 0
  3915                           ; Regs used in i1_Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3916  04A8  01F8               	clrf	i1Lcd_Write_String@i
  3917  04A9  01F9               	clrf	i1Lcd_Write_String@i+1
  3918  04AA                     i1l1503:	
  3919  04AA  0875               	movf	i1Lcd_Write_String@a,w
  3920  04AB  0778               	addwf	i1Lcd_Write_String@i,w
  3921  04AC  0084               	movwf	4
  3922  04AD  0876               	movf	i1Lcd_Write_String@a+1,w
  3923  04AE  3D79               	addwfc	i1Lcd_Write_String@i+1,w
  3924  04AF  0085               	movwf	5
  3925  04B0  0012               	moviw fsr0++
  3926  04B1  1903               	btfsc	3,2
  3927  04B2  0008               	return
  3928                           
  3929                           ;lcd.h: 106: Lcd_Write_Char(a[i]);
  3930  04B3  0875               	movf	i1Lcd_Write_String@a,w
  3931  04B4  0778               	addwf	i1Lcd_Write_String@i,w
  3932  04B5  0084               	movwf	4
  3933  04B6  0876               	movf	i1Lcd_Write_String@a+1,w
  3934  04B7  3D79               	addwfc	i1Lcd_Write_String@i+1,w
  3935  04B8  0085               	movwf	5
  3936  04B9  0800               	movf	0,w	;code access
  3937  04BA  3184  2444  3184   	fcall	i1_Lcd_Write_Char
  3938  04BD  3001               	movlw	1
  3939  04BE  07F8               	addwf	i1Lcd_Write_String@i,f
  3940  04BF  3000               	movlw	0
  3941  04C0  3DF9               	addwfc	i1Lcd_Write_String@i+1,f
  3942  04C1  2CAA               	goto	i1l1503
  3943  04C2                     __end_ofi1_Lcd_Write_String:	
  3944                           
  3945                           	psect	text17
  3946  0444                     __ptext17:	
  3947 ;; *************** function i1_Lcd_Write_Char *****************
  3948 ;; Defined at:
  3949 ;;		line 86 in file "lcd.h"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  a               1    wreg     unsigned char 
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  a               1    4[COMMON] unsigned char 
  3954 ;;  Lcd_Write_Ch    1    3[COMMON] unsigned char 
  3955 ;;  Lcd_Write_Ch    1    2[COMMON] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0, pclath, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3967 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;Total ram usage:        4 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    1
  3972 ;; This function calls:
  3973 ;;		i1_Lcd_Port
  3974 ;; This function is called by:
  3975 ;;		i1_Lcd_Write_String
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           
  3980                           ;psect for function i1_Lcd_Write_Char
  3981  0444                     i1_Lcd_Write_Char:	
  3982                           
  3983                           ;incstack = 0
  3984                           ; Regs used in i1_Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3985                           ;i1Lcd_Write_Char@a stored from wreg
  3986  0444  00F4               	movwf	i1Lcd_Write_Char@a
  3987                           
  3988                           ;lcd.h: 88: char temp,y;
  3989                           ;lcd.h: 89: temp = a&0x0F;
  3990  0445  0874               	movf	i1Lcd_Write_Char@a,w
  3991  0446  390F               	andlw	15
  3992  0447  00F1               	movwf	??i1_Lcd_Write_Char
  3993  0448  0871               	movf	??i1_Lcd_Write_Char,w
  3994  0449  00F2               	movwf	i1Lcd_Write_Char@temp
  3995                           
  3996                           ;lcd.h: 90: y = a&0xF0;
  3997  044A  0874               	movf	i1Lcd_Write_Char@a,w
  3998  044B  39F0               	andlw	240
  3999  044C  00F1               	movwf	??i1_Lcd_Write_Char
  4000  044D  0871               	movf	??i1_Lcd_Write_Char,w
  4001  044E  00F3               	movwf	i1Lcd_Write_Char@y
  4002                           
  4003                           ;lcd.h: 91: RC3 = 1;
  4004  044F  0020               	movlb	0	; select bank0
  4005  0450  158E               	bsf	14,3	;volatile
  4006                           
  4007                           ;lcd.h: 92: Lcd_Port(y>>4);
  4008  0451  0873               	movf	i1Lcd_Write_Char@y,w
  4009  0452  00F1               	movwf	??i1_Lcd_Write_Char
  4010  0453  3004               	movlw	4
  4011  0454                     u92_25:	
  4012  0454  36F1               	lsrf	??i1_Lcd_Write_Char,f
  4013  0455  0B89               	decfsz	9,f
  4014  0456  2C54               	goto	u92_25
  4015  0457  0871               	movf	??i1_Lcd_Write_Char,w
  4016  0458  3184  24C2  3184   	fcall	i1_Lcd_Port
  4017                           
  4018                           ;lcd.h: 93: RC4 = 1;
  4019  045B  0020               	movlb	0	; select bank0
  4020  045C  160E               	bsf	14,4	;volatile
  4021                           
  4022                           ;lcd.h: 94: _delay((unsigned long)((40)*(32000000/4000000.0)));
  4023  045D  306A               	movlw	106
  4024  045E                     u139_27:	
  4025  045E  0B89               	decfsz	9,f
  4026  045F  2C5E               	goto	u139_27
  4027  0460  3200               	nop2
  4028                           
  4029                           ;lcd.h: 95: RC4 = 0;
  4030  0461  0020               	movlb	0	; select bank0
  4031  0462  120E               	bcf	14,4	;volatile
  4032                           
  4033                           ;lcd.h: 96: Lcd_Port(temp);
  4034  0463  0872               	movf	i1Lcd_Write_Char@temp,w
  4035  0464  3184  24C2  3184   	fcall	i1_Lcd_Port
  4036                           
  4037                           ;lcd.h: 97: RC4 = 1;
  4038  0467  0020               	movlb	0	; select bank0
  4039  0468  160E               	bsf	14,4	;volatile
  4040                           
  4041                           ;lcd.h: 98: _delay((unsigned long)((40)*(32000000/4000000.0)));
  4042  0469  306A               	movlw	106
  4043  046A                     u140_27:	
  4044  046A  0B89               	decfsz	9,f
  4045  046B  2C6A               	goto	u140_27
  4046  046C  3200               	nop2
  4047                           
  4048                           ;lcd.h: 99: RC4 = 0;
  4049  046D  0020               	movlb	0	; select bank0
  4050  046E  120E               	bcf	14,4	;volatile
  4051  046F  0008               	return
  4052  0470                     __end_ofi1_Lcd_Write_Char:	
  4053                           
  4054                           	psect	text18
  4055  0376                     __ptext18:	
  4056 ;; *************** function i1_Lcd_Set_Cursor *****************
  4057 ;; Defined at:
  4058 ;;		line 46 in file "lcd.h"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  a               1    wreg     unsigned char 
  4061 ;;  b               1    3[COMMON] unsigned char 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  a               1    6[COMMON] unsigned char 
  4064 ;;  Lcd_Set_Curs    1    9[COMMON] unsigned char 
  4065 ;;  Lcd_Set_Curs    1    8[COMMON] unsigned char 
  4066 ;;  Lcd_Set_Curs    1    7[COMMON] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      void 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0, pclath, cstack
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4076 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4077 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4078 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;Total ram usage:        7 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    2
  4083 ;; This function calls:
  4084 ;;		i1_Lcd_Cmd
  4085 ;; This function is called by:
  4086 ;;		_timer
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           
  4091                           ;psect for function i1_Lcd_Set_Cursor
  4092  0376                     i1_Lcd_Set_Cursor:	
  4093                           
  4094                           ;incstack = 0
  4095                           ; Regs used in i1_Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4096                           ;i1Lcd_Set_Cursor@a stored from wreg
  4097  0376  00F6               	movwf	i1Lcd_Set_Cursor@a
  4098                           
  4099                           ;lcd.h: 48: char temp,z,y;
  4100                           ;lcd.h: 49: if(a == 1)
  4101  0377  0376               	decf	i1Lcd_Set_Cursor@a,w
  4102  0378  1D03               	btfss	3,2
  4103  0379  2B96               	goto	i1l1487
  4104                           
  4105                           ;lcd.h: 50: {
  4106                           ;lcd.h: 51: temp = 0x80 + b - 1;
  4107  037A  0873               	movf	i1Lcd_Set_Cursor@b,w
  4108  037B  3E7F               	addlw	127
  4109  037C  00F4               	movwf	??i1_Lcd_Set_Cursor
  4110  037D  0874               	movf	??i1_Lcd_Set_Cursor,w
  4111  037E  00F9               	movwf	i1Lcd_Set_Cursor@temp
  4112                           
  4113                           ;lcd.h: 52: z = temp>>4;
  4114  037F  0879               	movf	i1Lcd_Set_Cursor@temp,w
  4115  0380  00F4               	movwf	??i1_Lcd_Set_Cursor
  4116  0381  3004               	movlw	4
  4117  0382                     u114_25:	
  4118  0382  36F4               	lsrf	??i1_Lcd_Set_Cursor,f
  4119  0383  0B89               	decfsz	9,f
  4120  0384  2B82               	goto	u114_25
  4121  0385  0874               	movf	??i1_Lcd_Set_Cursor,w
  4122  0386  00F5               	movwf	??i1_Lcd_Set_Cursor+1
  4123  0387  0875               	movf	??i1_Lcd_Set_Cursor+1,w
  4124  0388  00F7               	movwf	i1Lcd_Set_Cursor@z
  4125                           
  4126                           ;lcd.h: 53: y = temp & 0x0F;
  4127  0389  0879               	movf	i1Lcd_Set_Cursor@temp,w
  4128  038A  390F               	andlw	15
  4129  038B  00F4               	movwf	??i1_Lcd_Set_Cursor
  4130  038C  0874               	movf	??i1_Lcd_Set_Cursor,w
  4131  038D  00F8               	movwf	i1Lcd_Set_Cursor@y
  4132                           
  4133                           ;lcd.h: 54: Lcd_Cmd(z);
  4134  038E  0877               	movf	i1Lcd_Set_Cursor@z,w
  4135  038F  3185  252D  3183   	fcall	i1_Lcd_Cmd
  4136                           
  4137                           ;lcd.h: 55: Lcd_Cmd(y);
  4138  0392  0878               	movf	i1Lcd_Set_Cursor@y,w
  4139  0393  3185  252D         	fcall	i1_Lcd_Cmd
  4140                           
  4141                           ;lcd.h: 56: }
  4142  0395  0008               	return
  4143  0396                     i1l1487:	
  4144                           
  4145                           ;lcd.h: 57: else if(a == 2)
  4146  0396  3002               	movlw	2
  4147  0397  0676               	xorwf	i1Lcd_Set_Cursor@a,w
  4148  0398  1D03               	btfss	3,2
  4149  0399  0008               	return
  4150                           
  4151                           ;lcd.h: 58: {
  4152                           ;lcd.h: 59: temp = 0xC0 + b - 1;
  4153  039A  0873               	movf	i1Lcd_Set_Cursor@b,w
  4154  039B  3EBF               	addlw	191
  4155  039C  00F4               	movwf	??i1_Lcd_Set_Cursor
  4156  039D  0874               	movf	??i1_Lcd_Set_Cursor,w
  4157  039E  00F9               	movwf	i1Lcd_Set_Cursor@temp
  4158                           
  4159                           ;lcd.h: 60: z = temp>>4;
  4160  039F  0879               	movf	i1Lcd_Set_Cursor@temp,w
  4161  03A0  00F4               	movwf	??i1_Lcd_Set_Cursor
  4162  03A1  3004               	movlw	4
  4163  03A2                     u116_25:	
  4164  03A2  36F4               	lsrf	??i1_Lcd_Set_Cursor,f
  4165  03A3  0B89               	decfsz	9,f
  4166  03A4  2BA2               	goto	u116_25
  4167  03A5  0874               	movf	??i1_Lcd_Set_Cursor,w
  4168  03A6  00F5               	movwf	??i1_Lcd_Set_Cursor+1
  4169  03A7  0875               	movf	??i1_Lcd_Set_Cursor+1,w
  4170  03A8  00F7               	movwf	i1Lcd_Set_Cursor@z
  4171                           
  4172                           ;lcd.h: 61: y = temp & 0x0F;
  4173  03A9  0879               	movf	i1Lcd_Set_Cursor@temp,w
  4174  03AA  390F               	andlw	15
  4175  03AB  00F4               	movwf	??i1_Lcd_Set_Cursor
  4176  03AC  0874               	movf	??i1_Lcd_Set_Cursor,w
  4177  03AD  00F8               	movwf	i1Lcd_Set_Cursor@y
  4178                           
  4179                           ;lcd.h: 62: Lcd_Cmd(z);
  4180  03AE  0877               	movf	i1Lcd_Set_Cursor@z,w
  4181  03AF  3185  252D  3183   	fcall	i1_Lcd_Cmd
  4182                           
  4183                           ;lcd.h: 63: Lcd_Cmd(y);
  4184  03B2  0878               	movf	i1Lcd_Set_Cursor@y,w
  4185  03B3  3185  252D         	fcall	i1_Lcd_Cmd
  4186  03B5  0008               	return
  4187  03B6                     __end_ofi1_Lcd_Set_Cursor:	
  4188                           
  4189                           	psect	text19
  4190  052D                     __ptext19:	
  4191 ;; *************** function i1_Lcd_Cmd *****************
  4192 ;; Defined at:
  4193 ;;		line 31 in file "lcd.h"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;  a               1    wreg     unsigned char 
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  a               1    2[COMMON] unsigned char 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, pclath, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4209 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;Total ram usage:        2 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    1
  4214 ;; This function calls:
  4215 ;;		i1_Lcd_Port
  4216 ;; This function is called by:
  4217 ;;		i1_Lcd_Set_Cursor
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function i1_Lcd_Cmd
  4223  052D                     i1_Lcd_Cmd:	
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in i1_Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4227                           ;i1Lcd_Cmd@a stored from wreg
  4228  052D  00F2               	movwf	i1Lcd_Cmd@a
  4229                           
  4230                           ;lcd.h: 33: RC3 = 0;
  4231  052E  0020               	movlb	0	; select bank0
  4232  052F  118E               	bcf	14,3	;volatile
  4233                           
  4234                           ;lcd.h: 34: Lcd_Port(a);
  4235  0530  0872               	movf	i1Lcd_Cmd@a,w
  4236  0531  3184  24C2  3185   	fcall	i1_Lcd_Port
  4237                           
  4238                           ;lcd.h: 35: RC4 = 1;
  4239  0534  0020               	movlb	0	; select bank0
  4240  0535  160E               	bsf	14,4	;volatile
  4241                           
  4242                           ;lcd.h: 36: _delay((unsigned long)((4)*(32000000/4000.0)));
  4243  0536  302A               	movlw	42
  4244  0537  00F1               	movwf	??i1_Lcd_Cmd
  4245  0538  308E               	movlw	142
  4246  0539                     u141_27:	
  4247  0539  0B89               	decfsz	9,f
  4248  053A  2D39               	goto	u141_27
  4249  053B  0BF1               	decfsz	??i1_Lcd_Cmd,f
  4250  053C  2D39               	goto	u141_27
  4251                           
  4252                           ;lcd.h: 37: RC4 = 0;
  4253  053D  0020               	movlb	0	; select bank0
  4254  053E  120E               	bcf	14,4	;volatile
  4255  053F  0008               	return
  4256  0540                     __end_ofi1_Lcd_Cmd:	
  4257                           
  4258                           	psect	text20
  4259  04C2                     __ptext20:	
  4260 ;; *************** function i1_Lcd_Port *****************
  4261 ;; Defined at:
  4262 ;;		line 9 in file "lcd.h"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  a               1    wreg     unsigned char 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  a               1    0[COMMON] unsigned char 
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  1    wreg      void 
  4269 ;; Registers used:
  4270 ;;		wreg
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4279 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4280 ;;Total ram usage:        1 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; This function calls:
  4283 ;;		Nothing
  4284 ;; This function is called by:
  4285 ;;		i1_Lcd_Cmd
  4286 ;;		i1_Lcd_Write_Char
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           
  4291                           ;psect for function i1_Lcd_Port
  4292  04C2                     i1_Lcd_Port:	
  4293                           
  4294                           ;incstack = 0
  4295                           ; Regs used in i1_Lcd_Port: [wreg]
  4296                           ;i1Lcd_Port@a stored from wreg
  4297  04C2  00F0               	movwf	i1Lcd_Port@a
  4298                           
  4299                           ;lcd.h: 11: if(a & 1)
  4300  04C3  1C70               	btfss	i1Lcd_Port@a,0
  4301  04C4  2CC8               	goto	i1l41
  4302                           
  4303                           ;lcd.h: 12: RC5 = 1;
  4304  04C5  0020               	movlb	0	; select bank0
  4305  04C6  168E               	bsf	14,5	;volatile
  4306  04C7  2CCA               	goto	i1l1179
  4307  04C8                     i1l41:	
  4308                           
  4309                           ;lcd.h: 13: else
  4310                           ;lcd.h: 14: RC5 = 0;
  4311  04C8  0020               	movlb	0	; select bank0
  4312  04C9  128E               	bcf	14,5	;volatile
  4313  04CA                     i1l1179:	
  4314                           
  4315                           ;lcd.h: 16: if(a & 2)
  4316  04CA  1CF0               	btfss	i1Lcd_Port@a,1
  4317  04CB  2CCE               	goto	i1l43
  4318                           
  4319                           ;lcd.h: 17: RC6 = 1;
  4320  04CC  170E               	bsf	14,6	;volatile
  4321  04CD  2CCF               	goto	i1l1183
  4322  04CE                     i1l43:	
  4323                           
  4324                           ;lcd.h: 18: else
  4325                           ;lcd.h: 19: RC6 = 0;
  4326  04CE  130E               	bcf	14,6	;volatile
  4327  04CF                     i1l1183:	
  4328                           
  4329                           ;lcd.h: 21: if(a & 4)
  4330  04CF  1D70               	btfss	i1Lcd_Port@a,2
  4331  04D0  2CD3               	goto	i1l45
  4332                           
  4333                           ;lcd.h: 22: RC2 = 1;
  4334  04D1  150E               	bsf	14,2	;volatile
  4335  04D2  2CD4               	goto	i1l1187
  4336  04D3                     i1l45:	
  4337                           
  4338                           ;lcd.h: 23: else
  4339                           ;lcd.h: 24: RC2 = 0;
  4340  04D3  110E               	bcf	14,2	;volatile
  4341  04D4                     i1l1187:	
  4342                           
  4343                           ;lcd.h: 26: if(a & 8)
  4344  04D4  1DF0               	btfss	i1Lcd_Port@a,3
  4345  04D5  2CD8               	goto	i1l47
  4346                           
  4347                           ;lcd.h: 27: RC7 = 1;
  4348  04D6  178E               	bsf	14,7	;volatile
  4349  04D7  0008               	return
  4350  04D8                     i1l47:	
  4351                           
  4352                           ;lcd.h: 28: else
  4353                           ;lcd.h: 29: RC7 = 0;
  4354  04D8  138E               	bcf	14,7	;volatile
  4355  04D9  0008               	return
  4356  04DA                     __end_ofi1_Lcd_Port:	
  4357  007E                     btemp	set	126	;btemp
  4358  007E                     int$flags	set	126
  4359  007E                     wtemp0	set	126


Data Sizes:
    Strings     37
    Constant    10
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     35      47
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), STR_2(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 3
		 -> buffer_min(BANK0[3]), buffer_sec(BANK0[3]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 9
		 -> STR_12(CODE[8]), STR_11(CODE[9]), STR_10(CODE[9]), STR_9(CODE[9]), 
		 -> STR_8(CODE[8]), STR_7(CODE[9]), STR_6(CODE[3]), STR_5(CODE[2]), 
		 -> STR_4(CODE[3]), buffer_min(BANK0[3]), buffer_sec(BANK0[3]), STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _timer in COMMON

    _timer->i1_Lcd_Set_Cursor
    _timer->i1_Lcd_Write_String
    i1_Lcd_Write_String->i1_Lcd_Write_Char
    i1_Lcd_Write_Char->i1_Lcd_Port
    i1_Lcd_Set_Cursor->i1_Lcd_Cmd
    i1_Lcd_Cmd->i1_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _timer in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _timer in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _timer in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _timer in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _timer in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _timer in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _timer in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _timer in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _timer in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _timer in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    3781
                                             31 BANK0      4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           _init_int
                     _initial_config
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    21      4    1709
                                             14 BANK0     17    13      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _initial_config                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_int                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     5     3      2     852
                                              5 BANK0      5     3      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     911
                                              3 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _timer                                                3     3      0     752
                                             10 COMMON     3     3      0
                   i1_Lcd_Set_Cursor
                 i1_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (5) i1_Lcd_Write_String                                   5     3      2     320
                                              5 COMMON     5     3      2
                   i1_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (6) i1_Lcd_Write_Char                                     4     4      0     178
                                              1 COMMON     4     4      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (5) i1_Lcd_Set_Cursor                                     7     6      1     432
                                              3 COMMON     7     6      1
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (6) i1_Lcd_Cmd                                            2     2      0     110
                                              1 COMMON     2     2      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (7) i1_Lcd_Port                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _init_int
   _initial_config
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _timer (ROOT)
   i1_Lcd_Set_Cursor
     i1_Lcd_Cmd
       i1_Lcd_Port
   i1_Lcd_Write_String
     i1_Lcd_Write_Char
       i1_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     23      2F       5       58.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      3C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      3C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat May 26 14:44:38 2018

                __CFG_CP$OFF 0000                           l41 04E0                           l43 04E5  
                         l45 04EA                           l47 04EF          ___wmul@multiplicand 0022  
                __CFG_LVP$ON 0000                          l282 0479                          l189 0141  
                        _RB0 0068                          _RB1 0069                          _RB2 006A  
                        _RB3 006B                          _RC2 0072                          _RC3 0073  
                        _RC4 0074                          _RC5 0075                          _RC6 0076  
                        _RC7 0077                 __CFG_CPD$OFF 0000                          u725 0428  
                        u805 03C2                          u825 03CC                          u905 040B  
                        u835 03D6                          u845 03DE                          u765 047A  
                        u775 047F                          u945 033F                          u875 03F5  
                        u965 0361                          u895 0404                          _min 0045  
                        _sec 0043                 __CFG_BORV$LO 0000                          wreg 0009  
           ??_initial_config 0020                 __CFG_ZCD$OFF 0000                         l1171 04EB  
                       l1163 04E1                         l1235 0473                         l1403 00B3  
                       l1229 054D                         l1413 00E1                         l1167 04E6  
                       l1431 0116                         l1415 00F9                         l1337 0354  
                       l1265 03DD                         l1257 03BF                         l1281 03F2  
                       l1425 0110                         l1363 048F                         l1259 03CB  
                       l1283 03FE                         l1291 0413                         l1269 03E6  
                       l1461 0186                         l1445 015D                         l1437 0135  
                       l1525 01EF                         l1287 040A                         l1455 0177  
                       l1447 0160                         l1471 0080                         l1449 0164  
                       l1473 01C5                         l1563 028F                         l1547 0253  
                       l1469 018A                         l1397 00A3                         l1581 02D1  
                       l1577 02BE                         l1589 02DE                         STR_1 0576  
                       STR_2 057B                         STR_3 057B                         STR_4 052A  
                       STR_5 057F                         STR_6 052A                         STR_7 0524  
                       STR_8 0566                         STR_9 0524                         u1035 012B  
                       u1075 0150                         u1307 02CB                         u1317 02E4  
                       _LATA 0016                         _LATB 0017                         u1327 0432  
                       _LATC 0018                         u1337 043E                         u1347 02F3  
                       u1357 0300                         u1277 0259                         u1367 030D  
                       u1287 0286                         u1377 04FE                         u1297 02B7  
                main@counter 0041                         i1l41 04C8                         i1l43 04CE  
                       i1l45 04D3                         i1l47 04D8                 __CFG_WRT$OFF 0000  
          ?_Lcd_Write_String 0025                         _flag 0047                         _main 01CB  
                       fsr0h 0005                         fsr1h 0007                         indf0 0000  
                       fsr0l 0004                         indf1 0001                         fsr1l 0006  
                       btemp 007E                         start 0067           ??_Lcd_Write_String 0027  
            __end_of_Lcd_Cmd 0506                __CFG_MCLRE$ON 0000                        ?_main 0070  
                      STR_10 055D                        STR_11 0524                        STR_12 0566  
              __CFG_WDTE$OFF 0000              __end_of___lwdiv 03EB                        i1l111 0014  
                      i1l109 000E              __end_of___lwmod 0418            ?i1_Lcd_Set_Cursor 0073  
                      _TMR0H 001D                        _TMR0L 001C                        _PORTA 000C  
                      _PORTB 000D                        _PORTC 000E      __size_of_Lcd_Set_Cursor 0044  
                      _TRISA 0011                        _TRISB 0012                        _TRISC 0013  
                      u92_25 0454                  ?i1_Lcd_Port 0070           ??i1_Lcd_Set_Cursor 0074  
             __CFG_FCMEN$OFF 0000           __size_ofi1_Lcd_Cmd 0013              __end_of_dpowers 0524  
            __end_of_isdigit 054F                        _timer 0004               __CFG_BOREN$OFF 0000  
__size_ofi1_Lcd_Write_String 001A                        status 0003                        wtemp0 007E  
            __end_of_sprintf 01CB             __end_of_Lcd_Init 0332               __CFG_CSWEN$OFF 0000  
           __end_of_Lcd_Port 04F1              __initialization 0069                 __end_of_main 02EB  
                     ??_main 003F           __size_of_Lcd_Clear 0008                       ?_timer 0070  
                     _ANSELA 0F38                       _ANSELB 0F43                       _ANSELC 0F4E  
                     _T0CON0 001E                       _T0CON1 001F                       i1l1183 04CF  
                     i1l1503 04AA                       i1l1601 0025                       i1l1187 04D4  
                     i1l1179 04CA                       i1l1625 0060                       i1l1487 0396  
                     i1l1655 001D                       u114_25 0382                       i1l1599 0018  
             __CFG_WDTCCS$SC 0000                       u116_25 03A2                       u140_27 046A  
                     u141_27 0539                       u138_27 0057                       u139_27 045E  
          ?i1_Lcd_Write_Char 0070                    ??_Lcd_Cmd 0021      __size_of_Lcd_Write_Char 002C  
         ??i1_Lcd_Write_Char 0071               __CFG_PWRTE$OFF 0000          __size_ofi1_Lcd_Port 0018  
          __end_ofi1_Lcd_Cmd 0540            i1Lcd_Write_Char@a 0074            i1Lcd_Write_Char@y 0073  
                     ___wmul 0470                    ??___lwdiv 0024                    ??___lwmod 002C  
           __end_of_init_int 055D                    ??_isdigit 0020                    ??_sprintf 0032  
            Lcd_Set_Cursor@a 0026              Lcd_Set_Cursor@b 0023              Lcd_Set_Cursor@y 0028  
            Lcd_Set_Cursor@z 0027      __end_of__initialization 0076            __end_of_Lcd_Clear 0576  
             __pcstackCOMMON 0070                __end_of_timer 0067               _Lcd_Set_Cursor 0332  
                  ?_Lcd_Init 0070                    ?_Lcd_Port 0070                 sprintf@width 003B  
                    ??_timer 007A                   __pbssBANK0 0043                   __pmaintext 01CB  
                    ?___wmul 0020                   __pintentry 0004    __size_of_Lcd_Write_String 001C  
     __end_of_Lcd_Set_Cursor 0376     __CFG_SCANE$not_available 0000                 ??i1_Lcd_Port 0070  
                 _buffer_min 0049                   _buffer_sec 004C                   ??_Lcd_Init 0023  
                 ??_Lcd_Port 0020               _Lcd_Write_Char 0418                      _Lcd_Cmd 04F1  
                  ?_init_int 0070    __size_ofi1_Lcd_Set_Cursor 0040           __end_ofi1_Lcd_Port 04DA  
            __size_of___wmul 001C                      ___lwdiv 03B6                      ___lwmod 03EB  
            __CFG_STVREN$OFF 0000              ?_Lcd_Set_Cursor 0023                      __ptext1 007A  
                    __ptext2 0540                      __ptext3 0470                      __ptext4 03EB  
                    __ptext5 03B6                      __ptext6 0506                      __ptext7 054F  
                    __ptext8 048C                      __ptext9 0418                      _dpowers 051A  
                    _isdigit 0540   __end_ofi1_Lcd_Write_String 04C2                      _sprintf 007A  
     __end_of_Lcd_Write_Char 0444         end_of_initialization 0076                   ??_init_int 0020  
    __size_of_initial_config 0014                    Lcd_Port@a 0020    __size_ofi1_Lcd_Write_Char 002C  
                  i1_Lcd_Cmd 052D        __CFG_WDTCPS$WDTCPS_31 0000                    _TRISBbits 0012  
           __CFG_FEXTOSC$ECH 0000              ?_Lcd_Write_Char 0070            Lcd_Write_String@a 0025  
          Lcd_Write_String@i 0028                    _Lcd_Clear 056E               __end_of___wmul 048C  
                 ?i1_Lcd_Cmd 0070             _Lcd_Write_String 048C          start_initialization 0069  
          __size_of_Lcd_Init 0047            __size_of_Lcd_Port 0017             i1_Lcd_Set_Cursor 0376  
           __CFG_LPBOREN$OFF 0000                   ?_Lcd_Clear 0070                     ??___wmul 0024  
            Lcd_Write_Char@a 0024              Lcd_Write_Char@y 0023                    ___latbits 0002  
              __pcstackBANK0 0020         i1Lcd_Write_Char@temp 0072                     ?_Lcd_Cmd 0070  
                sprintf@flag 0038               _initial_config 0506                  sprintf@prec 0037  
          __size_of_init_int 000E             ___lwdiv@dividend 0022             ??_Lcd_Set_Cursor 0024  
                   ?___lwdiv 0020                     ?___lwmod 0028             i1_Lcd_Write_Char 0444  
                ??i1_Lcd_Cmd 0071         i1Lcd_Set_Cursor@temp 0079             __CFG_PPS1WAY$OFF 0000  
                   ?_isdigit 0070             ___lwdiv@quotient 0025         __CFG_RSTOSC$HFINTPLL 0000  
                   ?_sprintf 002E               __size_of_timer 0063       __end_of_initial_config 051A  
             ___wmul@product 0024                     _LATAbits 0016                     _LATCbits 0018  
                   _PIE0bits 0716           i1_Lcd_Write_String 04A8                     Lcd_Cmd@a 0022  
                   _PIR0bits 070C                  ??_Lcd_Clear 0023          ?i1_Lcd_Write_String 0075  
          ___wmul@multiplier 0020             ??_Lcd_Write_Char 0021                     _Lcd_Init 02EB  
                   _Lcd_Port 04DA         ??i1_Lcd_Write_String 0077              ?_initial_config 0070  
   __end_of_Lcd_Write_String 04A8             __size_of_Lcd_Cmd 0015             __size_of___lwdiv 0035  
           __size_of___lwmod 002D                  _isdigit$583 0020     __end_ofi1_Lcd_Set_Cursor 03B6  
                 sprintf@val 0039                   _T0CON0bits 001E             __size_of_isdigit 000F  
            ___lwdiv@divisor 0020            i1Lcd_Set_Cursor@a 0076            i1Lcd_Set_Cursor@b 0073  
          i1Lcd_Set_Cursor@y 0078            i1Lcd_Set_Cursor@z 0077              ___lwdiv@counter 0027  
                   __ptext10 0332                     __ptext11 02EB                     __ptext20 04C2  
                   __ptext12 056E                     __ptext13 04F1                     __ptext14 04DA  
                   __ptext16 04A8                     __ptext17 0444                     __ptext18 0376  
                   __ptext19 052D             __size_of_sprintf 0151                __size_of_main 0120  
                   _init_int 054F                  i1Lcd_Port@a 0070         __CFG_WDTCWS$WDTCWS_7 0000  
                   int$flags 007E          i1Lcd_Write_String@a 0075          i1Lcd_Write_String@i 0078  
                 _INTCONbits 000B                     isdigit@c 0021           Lcd_Write_Char@temp 0022  
                   intlevel1 0000                    sprintf@ap 0036     __end_ofi1_Lcd_Write_Char 0470  
                  sprintf@sp 003D             ___lwmod@dividend 002A            __CFG_CLKOUTEN$OFF 0000  
                 i1Lcd_Cmd@a 0072           Lcd_Set_Cursor@temp 0029                __pstringtext1 051A  
              __pstringtext2 055D                __pstringtext3 0566                __pstringtext4 0576  
              __pstringtext5 057B                __pstringtext6 057F                __pstringtext7 0000  
                   sprintf@c 003E                     sprintf@f 002E              ___lwmod@divisor 0028  
            ___lwmod@counter 002D                   i1_Lcd_Port 04C2  
